
________________________________________________________________________________
Ticket #1 Description
There have been ongoing problems with our modified MIT license. Every so often Debian contributors complain that our license is not really free and threaten to remove PortAudio from  
Debian. In spite of our best attempts to defend our position I believe that standing our ground is not worth the bad publicity it has/is causing us. We stand to gain credibility by adopting a standard open source license.

The current PortAudio license is the MIT license:
http://opensource.org/licenses/mit-license.php

With the following clause added:

>>>
Any person wishing to distribute modifications to the Software is requested to send the modifications to the original developer so that they can be incorporated into the canonical version.
<<<


See our full license and explanation here:
http://www.portaudio.com/license.html

I would like to revert to the MIT license, but to still include our clause in a non-binding/non-license section of the source file header and on the website (just to assert the presence of our development community) as follows:

/* ...Module description...
*
* Based on the Open Source API proposed by Ross Bencina
* Copyright (c) 1999-2002 Ross Bencina, Phil Burk
*
* Permission is hereby granted, free of charge, to any person  
obtaining
* a copy of this software and associated documentation files
* (the "Software"), to deal in the Software without restriction,
* including without limitation the rights to use, copy, modify, merge,
* publish, distribute, sublicense, and/or sell copies of the Software,
* and to permit persons to whom the Software is furnished to do so,
* subject to the following conditions:
*
* The above copyright notice and this permission notice shall be
* included in all copies or substantial portions of the Software.
*
* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
* EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
* MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND  
NONINFRINGEMENT.
* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
* ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
* CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
* WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

/*
* The text above constitutes the entire PortAudio license, however
* the PortAudio community makes the following non-binding requests:
*
* Any person wishing to distribute modifications to the Software is
* requested to send the modifications to the original developer so  
that
* they can be incorporated into the canonical version. We also request
* that these non-binding requests be included along with the official
* license.
*/

Note that we are not _requiring_ our non-binding text to be included, and we are explicitly stating that it is not part of the license. I think this reflects our intent to maintain the community spirit of  PortAudio.

This change would be made before the V19 release (for the v19-devel  
branch and all future development (not for the V18 patch branch where  
there are probably more untracable contributors). 

________________________________________________________________________________
Ticket #1 Comment 1
Done for all files except ASIHPI, waiting for confirmation from Ludwig before I close out this task.

________________________________________________________________________________
Ticket #1 Comment 2
Changed licence text in pa_linux_asihpi.c to new clarified version.

________________________________________________________________________________
Ticket #1 Comment 3
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #1 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #2 Description
The V19 API documentation is placed online here:
http://www.portaudio.com/docs/v19-doxydocs/

This used to be updated on a nightly basis from a CVS checkout.

The script needs to be reenabled to do an SVN checkout.

This is important so we can migrate the tutorials from the wiki into the documentation.

________________________________________________________________________________
Ticket #2 Comment 1
Installed new Doxygen 1.4.7 and updated SVN snapshot script to generate doxygen docs and post to web.

________________________________________________________________________________
Ticket #2 Comment 2
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #2 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #3 Description
Hosts that use the buffer processor, including Core Audio, do not pass a meaningful value to clients for timeInfo->currentTime because the buffer processor zeros it out. The code looks like it would be easy to fix:

<pre><code>
void PaUtil_BeginBufferProcessing( PaUtilBufferProcessor* bp,
        PaStreamCallbackTimeInfo* timeInfo, PaStreamCallbackFlags callbackStatusFlags )
{
    bp->timeInfo = timeInfo;

    /* the first streamCallback will be called to process samples which are
        currently in the input buffer before the ones starting at the timeInfo time */
        
    bp->timeInfo->inputBufferAdcTime -= bp->framesInTempInputBuffer * bp->samplePeriod;
    
    bp->timeInfo->currentTime = 0; /** FIXME: @todo time info currentTime not implemented */

    /* the first streamCallback will be called to generate samples which will be
        outputted after the frames currently in the output buffer have been
        outputted. */
    bp->timeInfo->outputBufferDacTime += bp->framesInTempOutputBuffer * bp->samplePeriod;

    bp->callbackStatusFlags = callbackStatusFlags;

    bp->hostInputFrameCount[1] = 0;
    bp->hostOutputFrameCount[1] = 0;
}
</code></pre>

________________________________________________________________________________
Ticket #3 Comment 1
Resolved the bug by removing the code which zeros timeInfo->currentTime. As noted in the patch:

/*
We just pass through timeInfo->currentTime provided by the caller. This is
not strictly conformant to the word of the spec, since the buffer processor 
might call the callback multiple times, and we never refresh currentTime. 
*/

A new ticket will be added for this issue.

________________________________________________________________________________
Ticket #3 Comment 2
Patched in changeset r1341

________________________________________________________________________________
Ticket #3 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #4 Description
there is currently a file called V19-devel-readme.txt in the root directory of the v19-devel branch. it contains a lot of out of date information.

it needs to be reviewed to see if any of the content is worth moving elsewhere (could be moved onto the wiki for now).. it shouldn't be included in V19 that's for sure.

________________________________________________________________________________
Ticket #4 Comment 1
the document contains a list of file summaries, some of which contain additional information not currently in the doxygen @file comments
http://www.portaudio.com/docs/v19-doxydocs/files.html (and individual files doxygen pages)

Need to merge this information as one sub-task.

________________________________________________________________________________
Ticket #4 Comment 2
Resolved in r1337.

Updated doxydocs with extra information from V19-devel-readme.txt, updated copyright year in touched files.

________________________________________________________________________________
Ticket #4 Comment 3
r1337 only committed part of the fix. The remainder has been committed in r1339

________________________________________________________________________________
Ticket #4 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #5 Description
Right now there is an out of date README.txt file in /test. It should be verified that all tests (including the debug_* ones) build with the V19 API. Then README.txt should be deleted.

________________________________________________________________________________
Ticket #5 Comment 1
I will verify the tests compile and run on Mac, Windows and Linux. I will also try to coordinate these tests with the new qa/loopback test.

________________________________________________________________________________
Ticket #5 Comment 2
The first step is to identify which tests _don't_ build. Once these have been identified they can be logged as tickets or fixed immediately.

________________________________________________________________________________
Ticket #5 Comment 3
Removed STARTER tag. Phil's onto this one.

________________________________________________________________________________
Ticket #5 Comment 4
I reviewed all the tests in the test directory.  I made numerous changes to bring them up to date.

I deleted the debug_* tests because they were V18 and not needed.

All tests except patest_converters.c build.

I updated the README.txt to reflect reality.

I also added a Wiki page at:  http://www.portaudio.com/trac/wiki/TestPlan

There is still work to be done on cleaning up these tests. But they are good enough for a stable snapshot.

________________________________________________________________________________
Ticket #5 Comment 5
patest_two_rates.c still doesn't compile. it appears to still use the V18 API

________________________________________________________________________________
Ticket #5 Comment 6
I converted patest_two_rates.c to V19.
I also verified that patest_mono.c compiles.
Updated README.txt and added them to Makefile.in

________________________________________________________________________________
Ticket #5 Comment 7
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #6 Description
The ringbuffer code (originally from PABLIO) should be made a common file in src/common. coreaudio and PABLIO should use this version. Other host APIs could then also use this code.

The API functions should be renamed to use the PortAudio naming convention.

________________________________________________________________________________
Ticket #6 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #7 Description
Some platform specific headers include portaudio.h, others don't, but require the user to include it.

I think probably we should standardise the include guards for all portaudio headers on INCLUDED_PORTAUDIO_filename_H and then do something like this in the platform specific headers:

#ifndef INCLUDED_PORTAUDIO_PORTAUDIO_H
#include "portaudio.h"
#endif /* INCLUDED_PORTAUDIO_PORTAUDIO_H */

That avoids possible multiple inclusions without requiring inclusion of portaudio.h by the caller. The alternative is to not include portaudio.h in any of the platform specific headers...




________________________________________________________________________________
Ticket #7 Comment 1
Actually on pa_mac_core.h was inconsistent so I fixed it in r1592 . The include guard issue doesn't seem worth worrying about. 

________________________________________________________________________________
Ticket #7 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #8 Description
http://www.portaudio.com/trac/browser/portaudio/trunk/src/hostapi/asio/ASIO-README.txt

This file needs to be reviewed to see whether all of its contents are current. Possibly some contents are already in the tutorial or elsewhere.

________________________________________________________________________________
Ticket #8 Comment 1
Checked and revised the text in changeset r1342, just need to confirm that the mingw instructions are correct.

________________________________________________________________________________
Ticket #8 Comment 2
I think we should keep the file, but just make sure it doesn't contain any erroneous information. If the Wiki contains additional info we should add a link to the wiki to the file.

________________________________________________________________________________
Ticket #8 Comment 3
Revised and fixed in r1788

________________________________________________________________________________
Ticket #8 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #9 Description
Diane Bruce writes:
On FreeBSD stdlib.h is where definitions for malloc live.
attached is a tiny patch, I doubt it is completely correct as it
may depend on linux version.

________________________________________________________________________________
Ticket #9 Comment 1
Is there any reason not to use <stdlib.h> on Linux as well? It seems that this is the correct header for malloc (and alloca??) on this platform too.

________________________________________________________________________________
Ticket #9 Comment 2
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #9 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #10 Description
Change host API Ids to a bit mask and provide a function

Pa_SelectHostApis( hostApis, capacity, count) 

which can be called prior to Pa_Initialize() to determine which APIs will be initialized.

This could avoid initializing unwanted APIs (and all sorts of problems on Windows with buggy drivers when trying to init DirectSound and ASIO and MME all for the same app.

Earlier versions of this proposal proposed Pa_SetHostApiInitializationMask() with a bitmask to specify which host apis to initialize. 

A prototype implementation is now available on the git "ticket-10-select-host-apis" branch. See the documentation in portaudio.h for details. See comments below for notes on the evolution of the prototype.

https://app.assembla.com/spaces/portaudio/git/compare/portaudio:ticket-10-select-host-apis...portaudio:master

________________________________________________________________________________
Ticket #10 Comment 1
Updated after marking #13 as a duplicate.

Note that making host API Ids a bit-mask rather than a sequential enumeration would limit us to 31 host apis in the future, but I sincerely hope we will never get to the point of supporting 31 host APIs anyway. Note that because some API functions return a HostAPI ID or a -ve error code, we can't use the high bit for an API id. 

The default mask should be set so that if Pa_SetHostApiInitializationMask() isn't called, all available APIs are initialized.

________________________________________________________________________________
Ticket #10 Comment 2
Another option is for Pa_SetHostApiInitializationMask() to take an array of host API type ids. That would allow initialization order/defaults to also be selected. We may also want to consider an API that supports both masking (disabling) certain APIs, and one that supports enabling only a set of APIs. Another thing that might be needed is a way to query which APIs are available/compiled in.

________________________________________________________________________________
Ticket #10 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #10 Comment 4
I've comitted a prototype implementation to the ticket-10-select-host-apis branch. Here's the commit message:

An implementation of runtime host API selection (see ticket #10). See the changes to portaudio.h for documentation for the API. Note that unlike other proposals, this version of the interface allows the client to specify the order of host API initialization. The API is excercised by patest_select_hostapis.c. To reviewers: please verify that the implementation of Pa_SelectHostApis, Pa_GetSelectedHostApis and Pa_GetAvailableHostApis in pa_front.c matches the documentation in portaudio.h

https://app.assembla.com/spaces/portaudio/git/commits/b8d4bd665db4c89c159c51c807628295a3ada5f9

________________________________________________________________________________
Ticket #10 Comment 5
Notes on the current API design in the ticket-10-select-host-apis branch:

I chose not to use a bitmask because that wouldn't allow the initialization order to be specified. It would have also lead to either (1) a messy API (mapping type ids to a bitmask) or (2) having to make a breaking change to make type ids use unique bits.

I added a function to query the available host APIs, as per a request on the mailing list (seems reasonable), and a function to query which host APIs are selected (for completeness).

Note that Pa_SelectHostApis will fail if you specify a host API that is not in the available host APIs list.

________________________________________________________________________________
Ticket #10 Comment 6
Daniel Schrmann provided this feedback on the mailing list:

I have skimmed to the diffs and have some comments:

* A call to Pa_SelectHostApis() should be rejected after calling Pa_Initialize() and before Pa_Terminate();
* The might be a future confusion between PaHostApiIndex and the order chosen in Pa_SelectHostApis(). Do they match? I think they should if possible.
* Instead of using paHostApiInitializers, Pa_GetAvailableHostApis() should call an IsAvailable() function of the API implementation. This would allow to pass the decision which API should be used to the user, without knowing anything of it in the client application. 
IsAvailable() can return false if a required DLL is missing, or something else which can be checked without actually initialize the HostAPI.
* MAX_HOST_API_COUNT could be provided by PA_GetMaxHostApiCount()

Kind regards,

Daniel 

________________________________________________________________________________
Ticket #10 Comment 7
Changes 3 September 9039daf..90fa011

* f13a626eef calling Pa_SelectHostApis now returns an error if it is called while PA is initialized.
* 196f025981 (and later) added comments that we need to review the name of Pa_GetAvailableHostApis to reflect the fact that this is just the "compiled in" host apis not the host apis present on the system.
* a3d9f6cd3c document that initialization order does not predictably determine host api indexes
* add Pa_GetAvailableHostApisCount()

The latest diff vs master can always be reviewed here:

https://app.assembla.com/spaces/portaudio/git/compare/portaudio:ticket-10-select-host-apis...portaudio:master

________________________________________________________________________________
Ticket #10 Comment 8
From my point of view, what is needed now is further code review and testing. The only outstanding issue is to select a better name than "available" for Pa_GetAvailableHostApis and Pa_GetAvailableHostApisCount. If anyone has any other comments please let us know.

________________________________________________________________________________
Ticket #10 Comment 9
Added #253 to cover detecting installed host apis at runtime

________________________________________________________________________________
Ticket #11 Description
Add an API to allow clients to be notified (or to poll) for whether audio devices have been connected or disconnected.

________________________________________________________________________________
Ticket #11 Comment 1
Robert Bielik adds: As it is now, the available audio devices are discovered during Pa_Initialize(). I'd like to have it possible to check if any new devices have been added (such as a headset), while still playing a stream with connected devices. Would that be possible?

________________________________________________________________________________
Ticket #11 Comment 2
Erik Bunce submitted a patch for this in October 2007:
http://techweb.rfa.org/pipermail/portaudio/2007-October/007719.html

There were a number of issues raised, see discussion in October:
http://techweb.rfa.org/pipermail/portaudio/2007-October/thread.html#7719
and November:
http://techweb.rfa.org/pipermail/portaudio/2007-November/

All under the subject "Plug-and-play patch for portaudio"

From memory one of the issues was concerned with dealing with concurrency issues.

This issue needs to revisited and a decision reached.

________________________________________________________________________________
Ticket #11 Comment 3
r1663:
merged initial two-stage-commit hot-plug patch from David Stuart into branches/hotplug, with ds implementation only, including: 
* include\portaudio.h: added note about available device list lifetime to Pa_Initialize() doc comment. added Pa_UpdateAvailableDeviceList() declaration and doc comment. 
* src\common\pa_front.c: added Pa_UpdateAvailableDeviceList implementation 
* src\common\pa_hostapi.h: added function pointers for ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos. 
* src\hostapi\dsound\pa_win_ds.c added ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos implementation. 
* src\hostapi\dsound\pa_win_wmme.c zeroed ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos ptrs. 
* added test\patest_update_available_device_list.c simple test case. 

Open questions:

* Is it only the PaDeviceInfo struct ptrs from disconnected devices that should become invalidated, or all of them? doccomment currently says all of them may change but perhaps this is undesirable.
* CommitDeviceInfos() should probably not be permitted to fail and therefore should not be able to return an error.
* Currently PaUtilHostApiRepresentation function ptrs for ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos are not zeroed by other host API impls but pa_front.c assumes that they are. (only pa_win_ds.c and pa_win_wmme.c are ok in commit r1663).

r1664 includes a cleaned up version of pa_win_ds.c where the scanning code is also used by Initialize()

________________________________________________________________________________
Ticket #11 Comment 4
For the open issues about the notification mechanism mentioned in comment 2 above see:
http://music.columbia.edu/pipermail/portaudio/2007-October/007723.html
http://music.columbia.edu/pipermail/portaudio/2007-October/007724.html
http://music.columbia.edu/pipermail/portaudio/2007-November/007747.html
http://music.columbia.edu/pipermail/portaudio/2007-November/007749.html
http://music.columbia.edu/pipermail/portaudio/2007-November/007757.html

________________________________________________________________________________
Ticket #11 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #11 Comment 6
[[file:cxrWi2sjOr4yWzacwqjQYw]]

portaudio-deviceschanged.patch   (44.7 KB) - added by rossb 4 years ago.
Eric Bunce's Plug-and-play patch for portaudio, see  http://techweb.rfa.org/pipermail/portaudio/2007-October/007719.html

[Portaudio] Plug-and-play patch for portaudio
Erik Bunce
Mon Oct 29 23:02:01 EDT 2007
"""
Please see the attached patch against todays portaudio v19-devel r1296. 
It defines API's to support plug-and-play
and adds an implementation to the hostapi for Mac OS X.

Highlights includes the following:
 + A callback mechanism to notify API users when the list of devices 
and/or the default input/output devices change.
 + If one of these callback is registered, and the native implementation 
detects that the devices has changed,
    the system will automatically rescan the devices and adjust the 
device lists accordingly.
 + To maintain backwards compatiblity, if no callback is registered, the 
system leaves the device list alone and the
    previous behavior is mainained.
 + Existing host API's that don't support rescanning, just have to set 
the new RescanDevices member of the
    PaUtilHostApiRepresentation structure to 0.
  + API users can call the Pa_RescanDevices() to force the native 
implementation to rescan it's list of devices.
 + Mac OS X CoreAudio implementation.
 + Designed so that it could be used with or without native host 
notifications of device list changes.
I'm successfully using this in iaxclient.

Thank you for your consideration.

Thanks and Enjoy,
Erik Bunce
"""

________________________________________________________________________________
Ticket #11 Comment 7
Patches from Ingo Bauersachs of jitsi:

This is the source we're currently using:
https://github.com/jitsi/libsrc/blob/master/portaudio.zip

The should be the diff from SVN-1677 to what is in the above .zip:
https://github.com/ibauersachs/portaudio/commit/df0179c28863ae122e5d37f4a9b4
2b7a8dd806fc

And the wmme-patch is on our list archives:
http://lists.jitsi.org/pipermail/dev/2012-July/004183.html

There are useful commit messages with details about the patches here:
https://github.com/jitsi/libsrc/commits/master/portaudio.zip

This is now in PortAudio GIT as a sequence of commits here:
https://app.assembla.com/spaces/portaudio/git/merge_requests/3784323?section=commits

________________________________________________________________________________
Ticket #11 Comment 8
Here is my review of the jitsi patch from here:
https://github.com/jitsi/libsrc/blob/master/portaudio.zip (relative to r1677)
Diff here: https://github.com/ibauersachs/portaudio/commit/df0179c28863ae122e5d37f4a9b4
2b7a8dd806fc

Also available in PortAudio GIT:
https://app.assembla.com/spaces/portaudio/git/merge_requests/3784323?section=commits

(Note: the MME mailing list patch seems redundant. It is slightly different from 5ca6fed, but doesn't appear to contain any functional differences. http://lists.jitsi.org/pipermail/dev/2012-July/004183.html)

The changes seem to fall into the following categories:

# Refactor device enumeration to support the hotplug refresh interface. Mostly moving code around. The patch includes this code for pa_linux_alsa, pa_mac_core, and pa_win_wmme.
# Rework timeouts and/or add additional timeouts to deal with devices timing out when disconnected while a stream is running (quite a lot of this code for ALSA, CoreAudio and WMME).
# Device inserted notification engines for Mac and Linux. The Linux one is very rudimentary and uses a sleep()/polling loop. The Mac one is simple, but uses core audio notifications as you'd expect.
# Addition of deviceUID and transportType to PaDeviceInfo. We won't accept this but maybe some of it will be used internally, especially deviceUID
# A few behavioral tweaks (e.g. disable wavemapper on Windows). Some of these we won't accept.

Broken down by file. I've marked changes that we won't accept with WONTFIX

*Routine Changes*

Makefile.in

* add patest_refesh_device_list to TESTS
* add src/os/mac_osx to SRC_DIRS

configure
configure.in

* add new objects and flags


*Major Changes Incl. Hotplug*

src/hostapi/alsa/pa_linux_alsa.c

* Modify BuildDeviceList, FillInDevInfo to return scan results (straight-forward refactoring of the device enumeration code to implement the device list rescanning.)
* Support hotplug: ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos
* Commented out alsa_snd_config_update_free_global(); see comment line 832
* additional xrun handling lines 3585, 3606, 3660, 3757, 4396 (possibly related to timeouts)


src/hostapi/coreaudio/pa_mac_core.c

* Support hotplug: ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos
* WONTFIX big block of code at 529 to get deviceUID and transportType (UID will probably be needed to implement connectionId unless there's a better way)
* WONTFIX transportType is set with a range of values
* timeouts added to avoid infinite loop when device is removed (e.g. at line 2480)

src/hostapi/coreaudio/pa_mac_core_blocking.c

* add timeouts to avoid infinite blocking (presumably for disconnected devices?)

src/hostapi/coreaudio/pa_mac_core_blocking.h

* timeout #defines


src/os/win/pa_win_hotplug.c

* Add 2 second delay between OS notification and PA notification


src/hostapi/wmme/pa_win_wmme.c

* Support hotplug: ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos
* ScanDeviceInfos implementation looks like a more-or-less direct pull from PaWinMme_Initialize
* WONTFIX extract transport type for device: only ever set to USB
* WONTFIX extract endpoint GUID for device (might be useful for connectionId?)
* WONTFIX: disable enumeration of WAVE_MAPPER
* use timeouts to avoid infinite waiting in StopStream, ReadStream, WriteStream (on device disconnection)


*New Files Incl. Hotplug*

src/os/mac_osx/pa_osx_hotplug.c

* CoreAudio hotplug notification engine (missing locking)

src/os/unix/pa_linux_hotplug.c

* hotplug notification engine. Non-ideal impl: (1) runs in loop sleeping for 1 second then counting devices using snd_card_next(). (2) Notifies if # cards changes (!). 


*Non-Hotplug Tweaks We Might Want (or not)*

include/pa_mac_core.h

* reinstate commented out #include AudioToolbox.h

src/hostapi/wdmks/pa_win_wdmks.c

* tweak #define _WIN32_WINNT, WINVER for gcc
* comment out #include winioctl for TDM-GCC
* WONTFIX: disable hotplug rescan


*Changes Already In PA/hotplug*

src/hostapi/asio/pa_asio.cpp
src/hostapi/jack/pa_jack.c
src/hostapi/oss/pa_unix_oss.c
src/hostapi/skeleton/pa_hostapi_skeleton.c
src/hostapi/wasapi/pa_win_wasapi.c

* zero ScanDeviceInfos et al. No hotplug support.


*WONTFIX*

include/portaudio.h

* WONTFIX: add transportType and deviceUID to PaDeviceInfo

src/common/pa_front.c

* WONTFIX: move debug print

src/hostapi/dsound/pa_win_ds.c

* WONTFIX: copy GUID to PaDeviceInfo

test/patest_update_available_device_list.c
 
* WONTFIX: add #include <unistd.h> and possibly non meaningful(?) reformatting 



________________________________________________________________________________
Ticket #11 Comment 9
Here's a breakdown of the separated Jitsi commits that are available in PortAudio GIT here:
https://app.assembla.com/spaces/portaudio/git/merge_requests/3784323?section=commits


https://app.assembla.com/spaces/portaudio/git/commits/b77a1f828c5cd683b7f10e419b815f31bbefeba6
* initial commit with configuration and housekeeping for hotplug on all platforms (configure.in, Makefile.in, zero hotplug function ptrs on non-supported platforms)
* alsa device rescanning
* alsa timeout fixes
* linux connection/disconnection notification engine
* mac core audio device rescanning 
* mac connection/disconnection notification engine
* disable WDM/KS
* windows sleep for 2 seconds before notifying

https://app.assembla.com/spaces/portaudio/git/commits/e7a274942b7edbd18a91c37be34355adbe6e0013
* add transportType and deviceUID in portaudio.h
* implement transportType and deviceUID for mac

https://app.assembla.com/spaces/portaudio/git/commits/0a7b80cfce90bf5973952c1c4ab760efc3559830
* implement transportType and deviceUID in for wmme and dsound

https://app.assembla.com/spaces/portaudio/git/commits/15d77417bf2862a079abd7ec703c2aedcde2b120
* wmme: device rescanning

https://app.assembla.com/spaces/portaudio/git/commits/6c6269425f647a82986b152584849b5fd827510d
* changes to pa_win_wdmks.c #defines/includes for GCC
* wmme: disable wavemapper
* wmme: changes to set device info transport type

https://app.assembla.com/spaces/portaudio/git/commits/c534056a7b344ad42811463c9d6a6b378a64fff1
* wmme: fixes "incorrect causes of paInvalidChannelCount errors in PortAudio on Windows/WMME"
* wmme: changes to stream wait/timeout mechanism for dealing with device disconnection

https://app.assembla.com/spaces/portaudio/git/commits/ab8b64023c7900b2e067998087adf89a96ad7cff
* wmme: refinements to transportType

https://app.assembla.com/spaces/portaudio/git/commits/66bda13f84944b8d282c52141117e2234dca8ed6
* mac core: changes to timeouts to avoid blocking when device is disconnected


________________________________________________________________________________
Ticket #12 Description
[Trac: Originally assigned to none]

There is now a "guide to the source code" page in the doxygen documentation:
http://www.portaudio.com/docs/v19-doxydocs/srcguide.html

This groups source files into different categories and lists them along with their brief documentation. This is useful (for example) to see a compact list of all test files and what each one does.

The lists are not completely up to date (some files are not listed properly, this needs to be checked and corrected). If you are responsible for a particular file and can't find it in one of the lists it would be a good idea to check that its doxygen comment block is in order.

use @ingroup to specify the group membership of a file.
see doc/src/srcguide.dox for the current list of groups a file can belong to

See also ticket #71 it is closely related and has more info.

________________________________________________________________________________
Ticket #12 Comment 1
There is now a script at:
doc/utils/checkfiledocs.py
which soes some simple checks on all source files for minimal doxygen documentation

________________________________________________________________________________
Ticket #12 Comment 2
In some cases files will already have a description that isn't marked up correctly. in other cases you may need to ask on the list or do some other research to work out what the description should be.

________________________________________________________________________________
Ticket #12 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #13 Description
(edited from Rossb post)

Make host API Ids a bit-mask rather than a sequential enumeration. This would limit us to 32 host apis in the future, but I sincerely hope we will never get to the point of supporting 32 host APIs anyway.

Pa_SetHostApiInitializationMask() <- call this before calling Pa_Initialize() would not be _required_. If not called, this defaults to "init all host apis"

Truly portable code shouldn't have to know about host apis at all.


________________________________________________________________________________
Ticket #13 Comment 1
Duplicate of #10

________________________________________________________________________________
Ticket #13 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #14 Description
pa_x86_plain_converters.h contains a declaration for a function which currently needs to be called by clients. We could either move it to /include, or somehow automatically arrange for it to be called by Pa_Initialize...

________________________________________________________________________________
Ticket #14 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #15 Description
build/msvc scripts are out of date since directory restructure

________________________________________________________________________________
Ticket #15 Comment 1
Added DSP/DSW (vc6.0), and SLN/VCPROJ (VC2005) files to build pa19-devel
towards 2 DLL builds (x86/x64) 
Fixes, including new debug log redirection function:
PaUtil_SetDebugPrintFunction, have been added to the

users/davidv/v19-devel-debugprint-sept-06

branch

________________________________________________________________________________
Ticket #15 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #16 Description
From Ross:

it seems like pa_mac_core.h doesn't follow standard PortAudio naming
conventions, to be consistent with other apis and portaudio.h:

- structs should begin with "PaMacCore" (not "paMacCore")
- functions should begin with PaMacCore_
- flags/constants should begin with paMacCore (no trailing underscore)

________________________________________________________________________________
Ticket #16 Comment 1
Also, const ints in pa_mac_core.h should be #defines.

________________________________________________________________________________
Ticket #16 Comment 2
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #16 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #17 Description
[Trac: Originally reported by leland_lucius on 2006-09-14 15:57:00]

Refer to mailing list discussion on PortMixer and exposing devices for a full understanding of the changes:

<pre><code>
diff -wruN orig/audacity/lib-src/portaudio-v19/include/pa_linux_alsa.h audacity/lib-src/portaudio-v19/include/pa_linux_alsa.h
--- orig/audacity/lib-src/portaudio-v19/include/pa_linux_alsa.h	2006-09-04 14:05:58.000000000 -0500
+++ audacity/lib-src/portaudio-v19/include/pa_linux_alsa.h	2006-09-04 05:30:19.000000000 -0500
@@ -63,6 +63,10 @@
 
 void PaAlsa_EnableWatchdog( PaStream *s, int enable );
 
+int PaAlsa_GetStreamInputCard( PaStream *s );
+
+int PaAlsa_GetStreamOutputCard( PaStream *s );
+
 #ifdef __cplusplus
 }
 #endif
diff -wruN orig/audacity/lib-src/portaudio-v19/src/hostapi/alsa/pa_linux_alsa.c audacity/lib-src/portaudio-v19/src/hostapi/alsa/pa_linux_alsa.c
--- orig/audacity/lib-src/portaudio-v19/src/hostapi/alsa/pa_linux_alsa.c	2006-09-04 14:05:58.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/hostapi/alsa/pa_linux_alsa.c	2006-09-04 05:30:19.000000000 -0500
@@ -3321,3 +3321,40 @@
     stream->threading.useWatchdog = enable;
 #endif
 }
+
+int PaAlsa_GetStreamInputCard( PaStream *s )
+{
+    PaAlsaStream *stream = (PaAlsaStream *) s;
+    snd_pcm_info_t *pcmInfo;
+    int card = -1;
+
+    if( stream->capture.pcm )
+    {
+        snd_pcm_info_alloca( &pcmInfo );
+        if( snd_pcm_info( stream->capture.pcm, pcmInfo ) >= 0 )
+        {
+            card = snd_pcm_info_get_card( pcmInfo );
+        }
+    }
+
+    return card;
+}
+
+int PaAlsa_GetStreamOutputCard( PaStream *s )
+{
+    PaAlsaStream *stream = (PaAlsaStream *) s;
+    snd_pcm_info_t *pcmInfo;
+    int card = -1;
+
+    if( stream->playback.pcm )
+    {
+        snd_pcm_info_alloca( &pcmInfo );
+        if( snd_pcm_info( stream->playback.pcm, pcmInfo ) >= 0 )
+        {
+            card = snd_pcm_info_get_card( pcmInfo );
+        }
+    }
+
+    return card;
+}
+
</code></pre>

Leland

________________________________________________________________________________
Ticket #17 Comment 1
I've accepted the patch in a somewhat modified form, so that errors can be returned.

________________________________________________________________________________
Ticket #17 Comment 2
The committed code in r1145 casts a PaStream to a PaAlsaStream without checking that it is a PaAlsaStream. See GetWinMMEStreamPointer in pa_win_wmme.c for example.

________________________________________________________________________________
Ticket #17 Comment 3
I've followed your suggestion, Ross.

________________________________________________________________________________
Ticket #17 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #18 Description
[Trac: Originally reported by leland_lucius on 2006-09-14 15:59:00]

Refer to mailing list discussion on PortMixer and exposing devices for a full understanding of the changes.

Related open bugs:
http://www.portaudio.com/trac/ticket/19 (DirectSound)
http://www.portaudio.com/trac/ticket/21 (OSS)

<pre><code>
diff -wruN orig/audacity/lib-src/portaudio-v19/include/portaudio.h audacity/lib-src/portaudio-v19/include/portaudio.h
--- orig/audacity/lib-src/portaudio-v19/include/portaudio.h	2006-09-04 14:05:58.000000000 -0500
+++ audacity/lib-src/portaudio-v19/include/portaudio.h	2006-09-04 05:30:19.000000000 -0500
@@ -1105,6 +1105,15 @@
 signed long Pa_GetStreamWriteAvailable( PaStream* stream );
 
 
+/** Retrieve the host type handling an open stream.
+
+ @return Returns a non-negative value representing the host API type
+ handling an open stream or, a PaErrorCode (which are always negative)
+ if PortAudio is not initialized or an error is encountered.
+*/
+PaHostApiTypeId Pa_GetStreamHostApiType( PaStream* stream );
+
+
 /* Miscellaneous utilities */
 
 
diff -wruN orig/audacity/lib-src/portaudio-v19/src/common/pa_front.c audacity/lib-src/portaudio-v19/src/common/pa_front.c
--- orig/audacity/lib-src/portaudio-v19/src/common/pa_front.c	2006-09-04 14:05:59.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/common/pa_front.c	2006-09-04 05:30:19.000000000 -0500
@@ -1327,8 +1327,10 @@
                                   hostApiInputParametersPtr, hostApiOutputParametersPtr,
                                   sampleRate, framesPerBuffer, streamFlags, streamCallback, userData );
 
-    if( result == paNoError )
+    if( result == paNoError ) {
         AddOpenStream( *stream );
+        PA_STREAM_REP(*stream)->hostApiType = hostApi->info.type;
+    }
 
 
 #ifdef PA_LOG_API_CALLS
@@ -1915,6 +1917,33 @@
 }
 
 
+PaHostApiTypeId Pa_GetStreamHostApiType( PaStream* stream )
+{
+    PaError error = PaUtil_ValidateStreamPointer( stream );
+    PaHostApiTypeId result;
+
+#ifdef PA_LOG_API_CALLS
+    PaUtil_DebugPrint("Pa_GetStreamHostApiType called:\n" );
+    PaUtil_DebugPrint("\tPaStream* stream: 0x%p\n", stream );
+#endif
+
+    if( error == paNoError )
+    {
+        result = PA_STREAM_REP(stream)->hostApiType;
+    }
+    else
+    {
+        result = (PaHostApiTypeId) error;
+    }
+
+#ifdef PA_LOG_API_CALLS
+    PaUtil_DebugPrint("Pa_GetStreamHostApiType returned:\n" );
+    PaUtil_DebugPrint("\tPaError: %d ( %s )\n\n", result, Pa_GetErrorText( result ) );
+#endif
+
+    return result;
+}
+
 PaError Pa_GetSampleSize( PaSampleFormat format )
 {
     int result;
diff -wruN orig/audacity/lib-src/portaudio-v19/src/common/pa_stream.c audacity/lib-src/portaudio-v19/src/common/pa_stream.c
--- orig/audacity/lib-src/portaudio-v19/src/common/pa_stream.c	2006-09-04 14:05:59.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/common/pa_stream.c	2006-09-04 05:30:19.000000000 -0500
@@ -93,6 +93,8 @@
     streamRepresentation->streamInfo.inputLatency = 0.;
     streamRepresentation->streamInfo.outputLatency = 0.;
     streamRepresentation->streamInfo.sampleRate = 0.;
+
+    streamRepresentation->hostApiType = 0;
 }
 
 
diff -wruN orig/audacity/lib-src/portaudio-v19/src/common/pa_stream.h audacity/lib-src/portaudio-v19/src/common/pa_stream.h
--- orig/audacity/lib-src/portaudio-v19/src/common/pa_stream.h	2006-09-04 14:05:59.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/common/pa_stream.h	2006-09-04 05:30:19.000000000 -0500
@@ -152,6 +152,7 @@
     PaStreamFinishedCallback *streamFinishedCallback;
     void *userData;
     PaStreamInfo streamInfo;
+    PaHostApiTypeId hostApiType;
 } PaUtilStreamRepresentation;
 
 
</code></pre>

________________________________________________________________________________
Ticket #18 Comment 1
Note that recent discussions suggest a different approach involving adding two fields to PaStreamInfo:
{{{
PaHostApiIndex hostApiType;
void *hostApiSpecificStreamInfo;
}}}
See also #92

________________________________________________________________________________
Ticket #18 Comment 2
A new ticket has been introduced for this #169

________________________________________________________________________________
Ticket #18 Comment 3
superseded by #169

________________________________________________________________________________
Ticket #18 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #19 Description
[Trac: Originally reported by leland_lucius on 2006-09-14 16:00:48]

Refer to mailing list discussion on PortMixer and exposing devices for a full understanding of the changes:

<pre><code>
diff -wruN orig/audacity/lib-src/portaudio-v19/include/pa_win_ds.h audacity/lib-src/portaudio-v19/include/pa_win_ds.h
--- orig/audacity/lib-src/portaudio-v19/include/pa_win_ds.h	1969-12-31 18:00:00.000000000 -0600
+++ audacity/lib-src/portaudio-v19/include/pa_win_ds.h	2006-09-04 05:30:19.000000000 -0500
@@ -0,0 +1,69 @@
+#ifndef PA_WIN_DS_H
+#define PA_WIN_DS_H
+/*
+ * $Id: pa_win_ds.h 1013 2006-05-15 04:01:31Z rossb $
+ * PortAudio Portable Real-Time Audio Library
+ * DirectSound specific extensions
+ *
+ * Copyright (c) 1999-2000 Ross Bencina and Phil Burk
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files
+ * (the "Software"), to deal in the Software without restriction,
+ * including without limitation the rights to use, copy, modify, merge,
+ * publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * Any person wishing to distribute modifications to the Software is
+ * requested to send the modifications to the original developer so that
+ * they can be incorporated into the canonical version.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
+ * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+/** @file
+ @brief DirectSound-specific PortAudio API extension header file.
+*/
+
+
+#include "portaudio.h"
+
+#ifdef __cplusplus
+extern "C"
+{
+#endif /* __cplusplus */
+
+
+/** Retrieve the GUID of the input device.
+
+ @param stream The stream to query.
+
+ @return A pointer to the GUID, or NULL if none.
+*/
+LPGUID PaWinDS_GetStreamInputGUID( PaStream* s );
+
+
+/** Retrieve the GUID of the output device.
+
+ @param stream The stream to query.
+
+ @return A pointer to the GUID, or NULL if none.
+*/
+LPGUID PaWinDS_GetStreamOutputGUID( PaStream* s );
+
+#ifdef __cplusplus
+}
+#endif /* __cplusplus */
+
+#endif /* PA_WIN_DS_H */
diff -wruN orig/audacity/lib-src/portaudio-v19/src/hostapi/dsound/pa_win_ds.c audacity/lib-src/portaudio-v19/src/hostapi/dsound/pa_win_ds.c
--- orig/audacity/lib-src/portaudio-v19/src/hostapi/dsound/pa_win_ds.c	2006-09-04 14:05:59.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/hostapi/dsound/pa_win_ds.c	2006-09-04 05:30:19.000000000 -0500
@@ -198,6 +198,7 @@
 /* DirectSound specific data. */
 
 /* Output */
+    LPGUID               pOutputGuid;
     LPDIRECTSOUND        pDirectSound;
     LPDIRECTSOUNDBUFFER  pDirectSoundOutputBuffer;
     DWORD                outputBufferWriteOffsetBytes;     /* last write position */
@@ -213,6 +214,7 @@
     double               dsw_framesWritten;
     double               framesPlayed;
 /* Input */
+    LPGUID               pInputGuid;
     LPDIRECTSOUNDCAPTURE pDirectSoundCapture;
     LPDIRECTSOUNDCAPTUREBUFFER   pDirectSoundInputBuffer;
     INT                  bytesPerInputFrame;
@@ -1476,6 +1478,11 @@
                 goto error;
             }
 
+            stream->pOutputGuid = winDsHostApi->winDsDeviceInfos[outputParameters->device].lpGUID;
+            if( stream->pOutputGuid == NULL )
+            {
+               stream->pOutputGuid = (GUID *) &DSDEVID_DefaultPlayback;
+            }
 
             hr = paWinDsDSoundEntryPoints.DirectSoundCreate( winDsHostApi->winDsDeviceInfos[outputParameters->device].lpGUID,
                         &stream->pDirectSound, NULL );
@@ -1522,6 +1529,12 @@
                 goto error;
             }
 
+            stream->pInputGuid = winDsHostApi->winDsDeviceInfos[inputParameters->device].lpGUID;
+            if( stream->pInputGuid == NULL )
+            {
+               stream->pInputGuid = (GUID *)&DSDEVID_DefaultCapture;
+            }
+
             hr = paWinDsDSoundEntryPoints.DirectSoundCaptureCreate( winDsHostApi->winDsDeviceInfos[inputParameters->device].lpGUID,
                         &stream->pDirectSoundCapture,   NULL );
             if( hr != DS_OK )
@@ -2183,4 +2196,19 @@
 }
 
 
+/***********************************************************************************/
+LPGUID PaWinDS_GetStreamInputGUID( PaStream* s )
+{
+    PaWinDsStream *stream = (PaWinDsStream*)s;
 
+   return stream->pInputGuid;
+}
+
+
+/***********************************************************************************/
+LPGUID PaWinDS_GetStreamOutputGUID( PaStream* s )
+{
+    PaWinDsStream *stream = (PaWinDsStream*)s;
+
+    return stream->pOutputGuid;
+}
</code></pre>

________________________________________________________________________________
Ticket #19 Comment 1
A new ticket handling this has been added #169

________________________________________________________________________________
Ticket #19 Comment 2
superseded by #169

________________________________________________________________________________
Ticket #19 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #20 Description
[Trac: Originally reported by leland_lucius on 2006-09-14 16:02:36]

Refer to mailing list discussion on PortMixer and exposing devices for a full understanding of the changes:

<pre><code>
diff -wruN orig/audacity/lib-src/portaudio-v19/include/pa_mac_core.h audacity/lib-src/portaudio-v19/include/pa_mac_core.h
--- orig/audacity/lib-src/portaudio-v19/include/pa_mac_core.h	2006-09-04 14:05:58.000000000 -0500
+++ audacity/lib-src/portaudio-v19/include/pa_mac_core.h	2006-09-04 05:30:19.000000000 -0500
@@ -58,14 +58,7 @@
 
 /* Use this function to initialize a paMacCoreStreamInfo struct
    using the requested flags. */
-void paSetupMacCoreStreamInfo( paMacCoreStreamInfo *data, unsigned long flags )
-{
-   bzero( data, sizeof( paMacCoreStreamInfo ) );
-   data->size = sizeof( paMacCoreStreamInfo );
-   data->hostApiType = paCoreAudio;
-   data->version = 0x01;
-   data->flags = flags;
-}
+void paSetupMacCoreStreamInfo( paMacCoreStreamInfo *data, unsigned long flags );
 
 /*
  * The following flags alter the behaviour of PA on the mac platform.
@@ -76,20 +69,20 @@
  * which allows for much lower latency, but might disrupt the device
  * if other programs are using it, even when you are just Querying
  * the device. */
-const unsigned long paMacCore_ChangeDeviceParameters      = 0x01;
+#define paMacCore_ChangeDeviceParameters        (0x01)
 
 /* In combination with the above flag,
  * causes the stream opening to fail, unless the exact sample rates
  * are supported by the device. */
-const unsigned long paMacCore_FailIfConversionRequired    = 0x02;
+#define paMacCore_FailIfConversionRequired      (0x02)
 
 /* These flags set the SR conversion quality, if required. The wierd ordering
  * allows Maximum Quality to be the default.*/
-const unsigned long paMacCore_ConversionQualityMin    = 0x0100;
-const unsigned long paMacCore_ConversionQualityMedium = 0x0200;
-const unsigned long paMacCore_ConversionQualityLow    = 0x0300;
-const unsigned long paMacCore_ConversionQualityHigh   = 0x0400;
-const unsigned long paMacCore_ConversionQualityMax    = 0x0000;
+#define paMacCore_ConversionQualityMin          (0x0100)
+#define paMacCore_ConversionQualityMedium       (0x0200)
+#define paMacCore_ConversionQualityLow          (0x0300)
+#define paMacCore_ConversionQualityHigh         (0x0400)
+#define paMacCore_ConversionQualityMax          (0x0000)
 
 /*
  * Here are some "preset" combinations of flags (above) to get to some
@@ -98,15 +91,32 @@
  */
 /*This is the default setting: do as much sample rate conversion as possible
  * and as little mucking with the device as possible. */
-const unsigned long paMacCorePlayNice = 0x00;
+#define paMacCorePlayNice                       (0x00)
 /*This setting is tuned for pro audio apps. It allows SR conversion on input
   and output, but it tries to set the appropriate SR on the device.*/
-const unsigned long paMacCorePro      = 0x01;
+#define paMacCorePro                            (0x01)
 /*This is a setting to minimize CPU usage and still play nice.*/
-const unsigned long paMacCoreMinimizeCPUButPlayNice = 0x0100;
+#define paMacCoreMinimizeCPUButPlayNice         (0x0100)
 /*This is a setting to minimize CPU usage, even if that means interrupting the device. */
-const unsigned long paMacCoreMinimizeCPU = 0x0101;
+#define paMacCoreMinimizeCPU                    (0x0101)
+
+/*
+ * Retrieve the AudioDeviceID of the input device assigned to an open stream
+ *
+ * @param s The stream to query.
+ *`
+ * @return A valid AudioDeviceID, or NULL if an error occurred.
+ */
+AudioDeviceID PaMacCore_GetStreamInputDevice( PaStream* s );
 
+/*
+ * Retrieve the AudioDeviceID of the output device assigned to an open stream
+ *
+ * @param s The stream to query.
+ *
+ * @return A valid AudioDeviceID, or NULL if an error occurred.
+ */
+AudioDeviceID PaMacCore_GetStreamOutputDevice( PaStream* s );
 
 #ifdef __cplusplus
 }
diff -wruN orig/audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/pa_mac_core.c audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/pa_mac_core.c
--- orig/audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/pa_mac_core.c	2006-09-04 14:05:58.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/pa_mac_core.c	2006-09-04 05:30:19.000000000 -0500
@@ -2038,3 +2038,30 @@
 
     return PaUtil_GetCpuLoad( &stream->cpuLoadMeasurer );
 }
+
+/* Use this function to initialize a paMacCoreStreamInfo struct
+   using the requested flags. */
+void paSetupMacCoreStreamInfo( paMacCoreStreamInfo *data, unsigned long flags )
+{
+   bzero( data, sizeof( paMacCoreStreamInfo ) );
+   data->size = sizeof( paMacCoreStreamInfo );
+   data->hostApiType = paCoreAudio;
+   data->version = 0x01;
+   data->flags = flags;
+}
+
+AudioDeviceID PaMacCore_GetStreamInputDevice( PaStream* s )
+{
+    PaMacCoreStream *stream = (PaMacCoreStream*)s;
+    VVDBUG(("PaMacCore_GetStreamInputHandle()\n"));
+
+    return ( stream->inputDevice );
+}
+
+AudioDeviceID PaMacCore_GetStreamOutputDevice( PaStream* s )
+{
+    PaMacCoreStream *stream = (PaMacCoreStream*)s;
+    VVDBUG(("PaMacCore_GetStreamOutputHandle()\n"));
+
+    return ( stream->outputDevice );
+}
</code></pre>

________________________________________________________________________________
Ticket #20 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #21 Description
[Trac: Originally reported by leland_lucius on 2006-09-14 16:03:54]

[Trac: Originally assigned to none]

Refer to mailing list discussion on PortMixer and exposing devices for a full understanding of the changes:

<pre><code>
diff -wruN orig/audacity/lib-src/portaudio-v19/include/pa_unix_oss.h audacity/lib-src/portaudio-v19/include/pa_unix_oss.h
--- orig/audacity/lib-src/portaudio-v19/include/pa_unix_oss.h	1969-12-31 18:00:00.000000000 -0600
+++ audacity/lib-src/portaudio-v19/include/pa_unix_oss.h	2006-09-04 05:30:19.000000000 -0500
@@ -0,0 +1,52 @@
+#ifndef PA_UNIX_OSS_H
+#define PA_UNIX_OSS_H
+
+/*
+ * $Id: pa_unix_oss.h 1013 2006-05-15 04:01:31Z rossb $
+ * PortAudio Portable Real-Time Audio Library
+ * OSS-specific extensions
+ *
+ * Copyright (c) 1999-2000 Ross Bencina and Phil Burk
+ *
+ * Permission is hereby granted, free of charge, to any person obtaining
+ * a copy of this software and associated documentation files
+ * (the "Software"), to deal in the Software without restriction,
+ * including without limitation the rights to use, copy, modify, merge,
+ * publish, distribute, sublicense, and/or sell copies of the Software,
+ * and to permit persons to whom the Software is furnished to do so,
+ * subject to the following conditions:
+ *
+ * The above copyright notice and this permission notice shall be
+ * included in all copies or substantial portions of the Software.
+ *
+ * Any person wishing to distribute modifications to the Software is
+ * requested to send the modifications to the original developer so that
+ * they can be incorporated into the canonical version.
+ *
+ * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
+ * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
+ * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
+ * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
+ * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
+ * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
+ * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
+ *
+ */
+
+/** @file
+ * OSS-specific PortAudio API extension header file.
+ */
+
+#ifdef __cplusplus
+extern "C" {
+#endif
+
+const char *PaOSS_GetStreamInputDevice( PaStream *s );
+
+const char *PaOSS_GetStreamOutputDevice( PaStream *s );
+
+#ifdef __cplusplus
+}
+#endif
+
+#endif
diff -wruN orig/audacity/lib-src/portaudio-v19/src/hostapi/oss/pa_unix_oss.c audacity/lib-src/portaudio-v19/src/hostapi/oss/pa_unix_oss.c
--- orig/audacity/lib-src/portaudio-v19/src/hostapi/oss/pa_unix_oss.c	2006-09-04 14:05:58.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/hostapi/oss/pa_unix_oss.c	2006-09-04 05:30:19.000000000 -0500
@@ -1933,3 +1933,26 @@
     return (PaOssStreamComponent_BufferSize( stream->playback ) - delay) / PaOssStreamComponent_FrameSize( stream->playback );
 }
 
+const char *PaOSS_GetStreamInputDevice( PaStream* s )
+{
+    PaOssStream *stream = (PaOssStream*)s;
+
+    if( stream->capture )
+    {
+      return stream->capture->devName;
+    }
+
+   return NULL;
+}
+
+const char *PaOSS_GetStreamOutputDevice( PaStream* s )
+{
+    PaOssStream *stream = (PaOssStream*)s;
+
+    if( stream->playback )
+    {
+      return stream->playback->devName;
+    }
+
+   return NULL;
+}
</code></pre>

________________________________________________________________________________
Ticket #21 Comment 1
A new ticket handling this has been added #169

________________________________________________________________________________
Ticket #21 Comment 2
superseded by #169

________________________________________________________________________________
Ticket #21 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #22 Description
[Trac: Originally assigned to somebody]

This new branch inculdes new PA_DEBUG macro log redirectibility.

________________________________________________________________________________
Ticket #22 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #23 Description
[Trac: Originally reported by leland_lucius on 2006-09-24 08:39:53]

This is the same patch I posted to the list on Sept. 9th.  I just wanted to put it here as well so it doesn't get lost.

<pre><code>
--- orig/configure.in	2006-09-04 23:37:11.000000000 -0500
+++ pa2/configure.in	2006-09-04 23:31:18.000000000 -0500
@@ -136,10 +136,11 @@
 	dnl Mac OS X configuration
 
 	AC_DEFINE(PA_USE_COREAUDIO)
-	OTHER_OBJS="src/os/mac_osx/pa_mac_hostapis.o src/os/unix/pa_unix_util.o src/hostapi/coreaudio/pa_mac_core.o";
+	CFLAGS="$CFLAGS -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.3";
+	OTHER_OBJS="src/os/mac_osx/pa_mac_hostapis.o src/os/unix/pa_unix_util.o src/hostapi/coreaudio/pa_mac_core.o src/hostapi/coreaudio/pa_mac_core_blocking.o src/hostapi/coreaudio/pa_mac_core_utilities.o src/hostapi/coreaudio/ringbuffer.o";
 	LIBS="-framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework Carbon";
 	PADLL="libportaudio.dylib";
-	SHARED_FLAGS="-framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework Carbon -dynamiclib";
+	SHARED_FLAGS="-framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework Carbon -dynamiclib  -arch i386 -arch ppc -isysroot /Developer/SDKs/MacOSX10.4u.sdk -mmacosx-version-min=10.3";
         if [[ $with_macapi = "asio" ]] ; then
             if [[ $with_asiodir ]] ; then
               ASIODIR="$with_asiodir";
</code></pre>

________________________________________________________________________________
Ticket #23 Comment 1
fixed in revision 1191.

________________________________________________________________________________
Ticket #23 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #24 Description
[Trac: Originally reported by leland_lucius on 2006-09-24 17:38:36]

In pa_jack.c/BuildDeviceList(), regex_pattern and tmp_client_name are allocated from the deviceInfoMemory group when the routine is entered.  But, they are freed when the PaUtil_FreeAllAllocations() is executed a few statements later causing memory overlays.

The attached patch corrects this:

<pre><code>
--- /orig/pa_jack.c	2006-09-23 02:04:42.000000000 -0500
+++ pa_jack.c	2006-09-24 02:23:39.000000000 -0500
@@ -466,12 +466,12 @@
 
     const char **jack_ports = NULL;
     char **client_names = NULL;
-    char *regex_pattern = MALLOC( jack_client_name_size() + 3 );
+    char *regex_pattern = NULL;
     int port_index, client_index, i;
     double globalSampleRate;
     regex_t port_regex;
     unsigned long numClients = 0, numPorts = 0;
-    char *tmp_client_name = MALLOC( jack_client_name_size() );
+    char *tmp_client_name = NULL;
 
     commonApi->info.defaultInputDevice = paNoDevice;
     commonApi->info.defaultOutputDevice = paNoDevice;
@@ -484,6 +484,9 @@
      * associated with the previous list */
     PaUtil_FreeAllAllocations( jackApi->deviceInfoMemory );
 
+    regex_pattern = MALLOC( jack_client_name_size() + 3 );
+    tmp_client_name = MALLOC( jack_client_name_size() );
+
     /* We can only retrieve the list of clients indirectly, by first
      * asking for a list of all ports, then parsing the port names
      * according to the client_name:port_name convention (which is
</code></pre>

________________________________________________________________________________
Ticket #24 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #25 Description
[Trac: Originally reported by leland_lucius on 2006-09-24 19:33:15]

The attached patch adds support for using Jack under Mac OSX.  It includes a fix for memory overlays in pa_jack.c and fixes building CoreAudio and Jack at the same time.

There was a problem with duplicate symbols due to CoreAudio haveing its own version of pablio/ringbuffer.c and the way pa_jack.c included the same file.  So, I took the ringbuffer.c|h files from the hostapi/coreaudio directory, added the Linux memory barriers, and moved it back to the pablio directory.

Now, CoreAudio and Jack use the same ringbuffer code and CoreAudio doesn't have to have its own copy.

<pre><code>
diff -wruN orig/audacity/lib-src/portaudio-v19/configure.in audacity/lib-src/portaudio-v19/configure.in
--- orig/audacity/lib-src/portaudio-v19/configure.in	2006-09-23 13:42:43.000000000 -0500
+++ audacity/lib-src/portaudio-v19/configure.in	2006-09-23 22:39:16.000000000 -0500
@@ -136,10 +136,12 @@
 	dnl Mac OS X configuration
 
 	AC_DEFINE(PA_USE_COREAUDIO)
-	OTHER_OBJS="src/os/mac_osx/pa_mac_hostapis.o src/os/unix/pa_unix_util.o src/hostapi/coreaudio/pa_mac_core.o";
+	OTHER_OBJS="src/os/mac_osx/pa_mac_hostapis.o src/os/unix/pa_unix_util.o src/hostapi/coreaudio/pa_mac_core.o src/hostapi/coreaudio/pa_mac_core_blocking.o src/hostapi/coreaudio/pa_mac_core_utilities.o pablio/ringbuffer.o";
 	LIBS="-framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework Carbon";
 	PADLL="libportaudio.dylib";
 	SHARED_FLAGS="-framework CoreAudio -framework AudioToolbox -framework AudioUnit -framework Carbon -dynamiclib";
+	CFLAGS="$CFLAGS -I\$(top_srcdir)/pablio"
+
         if [[ $with_macapi = "asio" ]] ; then
             if [[ $with_asiodir ]] ; then
               ASIODIR="$with_asiodir";
@@ -152,6 +154,14 @@
             CFLAGS="$CFLAGS -I\$(top_srcdir)/pa_asio -I$ASIDIR/host/mac -I$ASIODIR/common";
             CXXFLAGS="$CFLAGS";
         fi
+
+        if [[ $have_jack = "yes" ] && [ $with_jack != "no" ]] ; then
+           DLL_LIBS="$DLL_LIBS $JACK_LIBS"
+           CFLAGS="$CFLAGS $JACK_CFLAGS"
+           OTHER_OBJS="$OTHER_OBJS src/hostapi/jack/pa_jack.o pablio/ringbuffer.o"
+                     AC_DEFINE(PA_USE_JACK)
+        fi
+     
 	;;
 
   mingw* )
@@ -271,7 +281,7 @@
 	if [[ $have_jack = "yes" ] && [ $with_jack != "no" ]] ; then
 		DLL_LIBS="$DLL_LIBS $JACK_LIBS"
 		CFLAGS="$CFLAGS $JACK_CFLAGS"
-		OTHER_OBJS="$OTHER_OBJS src/hostapi/jack/pa_jack.o"
+		OTHER_OBJS="$OTHER_OBJS src/hostapi/jack/pa_jack.o pablio/ringbuffer.o"
                 AC_DEFINE(PA_USE_JACK)
 	fi
 
diff -wruN orig/audacity/lib-src/portaudio-v19/pablio/ringbuffer.c audacity/lib-src/portaudio-v19/pablio/ringbuffer.c
--- orig/audacity/lib-src/portaudio-v19/pablio/ringbuffer.c	2006-09-23 13:42:46.000000000 -0500
+++ audacity/lib-src/portaudio-v19/pablio/ringbuffer.c	2006-09-24 04:20:24.000000000 -0500
@@ -1,9 +1,14 @@
 /*
- * $Id: ringbuffer.c,v 1.4 2006/09/23 18:42:46 llucius Exp $
+ * $Id: ringbuffer.c,v 1.3 2006/09/23 18:42:49 llucius Exp $
  * ringbuffer.c
  * Ring Buffer utility..
  *
  * Author: Phil Burk, http://www.softsynth.com
+ * modified for SMP safety on Mac OS X by Bjorn Roche
+ * modified for SMP safety on Linux by Leland Lucius
+ * also, allowed for const where possible
+ * Note that this is safe only for a single-thread reader and a
+ * single-thread writer.
  *
  * This program uses the PortAudio Portable Audio Library.
  * For more information see: http://www.portaudio.com
@@ -40,12 +45,53 @@
  * license above.
  */
 
+/**
+ @file
+ @ingroup hostapi_src
+*/
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
 #include "ringbuffer.h"
 #include <string.h>
 
+/****************
+ * First, we'll define some memory barrier primitives based on the system.
+ * right now only OS X, FreeBSD, and Linux are supported. In addition to providing
+ * memory barriers, these functions should ensure that data cached in registers
+ * is written out to cache where it can be snooped by other CPUs. (ie, the volatile
+ * keyword should not be required)
+ *
+ * the primitives that must be defined are:
+ *
+ * FullMemoryBarrier()
+ * ReadMemoryBarrier()
+ * WriteMemoryBarrier()
+ *
+ ****************/
+
+#if defined(__APPLE__) || defined(__FreeBSD__)
+#   include <libkern/OSAtomic.h>
+    /* Here are the memory barrier functions. Mac OS X and FreeBSD only provide
+       full memory barriers, so the three types of barriers are the same.
+       The asm volatile may be redundant with the memory barrier, but
+       until I have proof of that, I'm leaving it. */
+#   define FullMemoryBarrier()  do{ asm volatile("":::"memory"); OSMemoryBarrier(); }while(false)
+#   define ReadMemoryBarrier()  do{ asm volatile("":::"memory"); OSMemoryBarrier(); }while(false)
+#   define WriteMemoryBarrier() do{ asm volatile("":::"memory"); OSMemoryBarrier(); }while(false)
+#   define MPSAFE
+#elif defined(__linux__)
+#   include <asm/system.h>
+    /* Here are the memory barrier functions. */
+#   define FullMemoryBarrier()  do{ asm volatile("":::"memory"); smp_mb(); }while(false)
+#   define ReadMemoryBarrier()  do{ asm volatile("":::"memory"); smp_rmb(); }while(false)
+#   define WriteMemoryBarrier() do{ asm volatile("":::"memory"); smp_wmb(); }while(false)
+#   define MPSAFE
+#else
+#   warning Memory barriers not defined on this system or system unknown
+#endif
+
 /***************************************************************************
  * Initialize FIFO.
  * numBytes must be power of 2, returns -1 if not.
@@ -64,12 +110,16 @@
 ** Return number of bytes available for reading. */
 long RingBuffer_GetReadAvailable( RingBuffer *rbuf )
 {
+#ifdef MPSAFE
+    ReadMemoryBarrier();
+#endif
     return ( (rbuf->writeIndex - rbuf->readIndex) & rbuf->bigMask );
 }
 /***************************************************************************
 ** Return number of bytes available for writing. */
 long RingBuffer_GetWriteAvailable( RingBuffer *rbuf )
 {
+    /* Since we are calling RingBuffer_GetReadAvailable, we don't need an aditional MB */
     return ( rbuf->bufferSize - RingBuffer_GetReadAvailable(rbuf));
 }
 
@@ -119,7 +169,13 @@
 */
 long RingBuffer_AdvanceWriteIndex( RingBuffer *rbuf, long numBytes )
 {
+#ifdef MPSAFE
+    /* we need to ensure that previous writes are seen before we update the write index */
+    WriteMemoryBarrier();
     return rbuf->writeIndex = (rbuf->writeIndex + numBytes) & rbuf->bigMask;
+#else
+    return rbuf->writeIndex = (rbuf->writeIndex + numBytes) & rbuf->bigMask;
+#endif
 }
 
 /***************************************************************************
@@ -159,12 +215,18 @@
 */
 long RingBuffer_AdvanceReadIndex( RingBuffer *rbuf, long numBytes )
 {
+#ifdef MPSAFE
+    /* we need to ensure that previous writes are always seen before updating the index. */
+    WriteMemoryBarrier();
+    return rbuf->readIndex = (rbuf->readIndex + numBytes) & rbuf->bigMask;
+#else
     return rbuf->readIndex = (rbuf->readIndex + numBytes) & rbuf->bigMask;
+#endif
 }
 
 /***************************************************************************
 ** Return bytes written. */
-long RingBuffer_Write( RingBuffer *rbuf, void *data, long numBytes )
+long RingBuffer_Write( RingBuffer *rbuf, const void *data, long numBytes )
 {
     long size1, size2, numWritten;
     void *data1, *data2;
diff -wruN orig/audacity/lib-src/portaudio-v19/pablio/ringbuffer.h audacity/lib-src/portaudio-v19/pablio/ringbuffer.h
--- orig/audacity/lib-src/portaudio-v19/pablio/ringbuffer.h	2006-09-23 13:42:46.000000000 -0500
+++ audacity/lib-src/portaudio-v19/pablio/ringbuffer.h	2006-09-24 04:20:48.000000000 -0500
@@ -6,11 +6,15 @@
 #endif /* __cplusplus */
 
 /*
- * $Id: ringbuffer.h,v 1.4 2006/09/23 18:42:46 llucius Exp $
+ * $Id: ringbuffer.h,v 1.3 2006/09/23 18:42:49 llucius Exp $
  * ringbuffer.h
  * Ring Buffer utility..
  *
  * Author: Phil Burk, http://www.softsynth.com
+ * modified for SMP safety on OS X by Bjorn Roche.
+ * also allowed for const where possible.
+ * Note that this is safe only for a single-thread reader
+ * and a single-thread writer.
  *
  * This program is distributed with the PortAudio Portable Audio Library.
  * For more information see: http://www.portaudio.com
@@ -47,6 +51,11 @@
  * license above.
  */
 
+/**
+ @file
+ @ingroup hostapi_src
+*/
+
 #include <stdio.h>
 #include <stdlib.h>
 #include <math.h>
@@ -77,7 +86,7 @@
 /* Return number of bytes available for read. */
 long RingBuffer_GetReadAvailable( RingBuffer *rbuf );
 /* Return bytes written. */
-long RingBuffer_Write( RingBuffer *rbuf, void *data, long numBytes );
+long RingBuffer_Write( RingBuffer *rbuf, const void *data, long numBytes );
 /* Return bytes read. */
 long RingBuffer_Read( RingBuffer *rbuf, void *data, long numBytes );
 
diff -wruN orig/audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.c audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.c
--- orig/audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.c	2006-09-23 13:42:49.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.c	1969-12-31 18:00:00.000000000 -0600
@@ -1,266 +0,0 @@
-/*
- * $Id: ringbuffer.c,v 1.3 2006/09/23 18:42:49 llucius Exp $
- * ringbuffer.c
- * Ring Buffer utility..
- *
- * Author: Phil Burk, http://www.softsynth.com
- * modified for SMP safety on Mac OS X by Bjorn Roche
- * also, alowed for const where possible
- * Note that this is safe only for a single-thread reader and a
- * single-thread writer.
- *
- * This program uses the PortAudio Portable Audio Library.
- * For more information see: http://www.portaudio.com
- * Copyright (c) 1999-2000 Ross Bencina and Phil Burk
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files
- * (the "Software"), to deal in the Software without restriction,
- * including without limitation the rights to use, copy, modify, merge,
- * publish, distribute, sublicense, and/or sell copies of the Software,
- * and to permit persons to whom the Software is furnished to do so,
- * subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
- * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
- * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-/*
- * The text above constitutes the entire PortAudio license; however, 
- * the PortAudio community also makes the following non-binding requests:
- *
- * Any person wishing to distribute modifications to the Software is
- * requested to send the modifications to the original developer so that
- * they can be incorporated into the canonical version. It is also 
- * requested that these non-binding requests be included along with the 
- * license above.
- */
-
-/**
- @file
- @ingroup hostapi_src
-*/
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <math.h>
-#include "ringbuffer.h"
-#include <string.h>
-
-/*
- * We can undefine this, to turn off memory barriers, but that
- * is only useful if we know we don't need to be MP safe or
- * we are interested in doing some kind of tests.
- */
-#define MPSAFE
-
-/****************
- * First, we'll define some memory barrier primitives based on the system.
- * right now only OS X and FreeBSD are supported. In addition to providing
- * memory barriers, these functions should ensure that data cached in registers
- * is written out to cache where it can be snooped by other CPUs. (ie, the volatile
- * keyword should not be required)
- *
- * the primitives that must be defined are:
- *
- * FullMemoryBarrier()
- * ReadMemoryBarrier()
- * WriteMemoryBarrier()
- *
- ****************/
-
-#if defined(__APPLE__) || defined(__FreeBSD__)
-#   include <libkern/OSAtomic.h>
-    /* Here are the memory barrier functions. Mac OS X and FreeBSD only provide
-       full memory barriers, so the three types of barriers are the same.
-       The asm volatile may be redundant with the memory barrier, but
-       until I have proof of that, I'm leaving it. */
-#   define FullMemoryBarrier()  do{ asm volatile("":::"memory"); OSMemoryBarrier(); }while(false)
-#   define ReadMemoryBarrier()  do{ asm volatile("":::"memory"); OSMemoryBarrier(); }while(false)
-#   define WriteMemoryBarrier() do{ asm volatile("":::"memory"); OSMemoryBarrier(); }while(false)
-#else
-#   error Memory Barriers not defined on this system or system unknown
-#endif
-
-/***************************************************************************
- * Initialize FIFO.
- * numBytes must be power of 2, returns -1 if not.
- */
-long RingBuffer_Init( RingBuffer *rbuf, long numBytes, void *dataPtr )
-{
-    if( ((numBytes-1) & numBytes) != 0) return -1; /* Not Power of two. */
-    rbuf->bufferSize = numBytes;
-    rbuf->buffer = (char *)dataPtr;
-    RingBuffer_Flush( rbuf );
-    rbuf->bigMask = (numBytes*2)-1;
-    rbuf->smallMask = (numBytes)-1;
-    return 0;
-}
-/***************************************************************************
-** Return number of bytes available for reading. */
-long RingBuffer_GetReadAvailable( RingBuffer *rbuf )
-{
-#ifdef MPSAFE
-    ReadMemoryBarrier();
-#endif
-    return ( (rbuf->writeIndex - rbuf->readIndex) & rbuf->bigMask );
-}
-/***************************************************************************
-** Return number of bytes available for writing. */
-long RingBuffer_GetWriteAvailable( RingBuffer *rbuf )
-{
-    /* Since we are calling RingBuffer_GetReadAvailable, we don't need an aditional MB */
-    return ( rbuf->bufferSize - RingBuffer_GetReadAvailable(rbuf));
-}
-
-/***************************************************************************
-** Clear buffer. Should only be called when buffer is NOT being read. */
-void RingBuffer_Flush( RingBuffer *rbuf )
-{
-    rbuf->writeIndex = rbuf->readIndex = 0;
-}
-
-/***************************************************************************
-** Get address of region(s) to which we can write data.
-** If the region is contiguous, size2 will be zero.
-** If non-contiguous, size2 will be the size of second region.
-** Returns room available to be written or numBytes, whichever is smaller.
-*/
-long RingBuffer_GetWriteRegions( RingBuffer *rbuf, long numBytes,
-                                 void **dataPtr1, long *sizePtr1,
-                                 void **dataPtr2, long *sizePtr2 )
-{
-    long   index;
-    long   available = RingBuffer_GetWriteAvailable( rbuf );
-    if( numBytes > available ) numBytes = available;
-    /* Check to see if write is not contiguous. */
-    index = rbuf->writeIndex & rbuf->smallMask;
-    if( (index + numBytes) > rbuf->bufferSize )
-    {
-        /* Write data in two blocks that wrap the buffer. */
-        long   firstHalf = rbuf->bufferSize - index;
-        *dataPtr1 = &rbuf->buffer[index];
-        *sizePtr1 = firstHalf;
-        *dataPtr2 = &rbuf->buffer[0];
-        *sizePtr2 = numBytes - firstHalf;
-    }
-    else
-    {
-        *dataPtr1 = &rbuf->buffer[index];
-        *sizePtr1 = numBytes;
-        *dataPtr2 = NULL;
-        *sizePtr2 = 0;
-    }
-    return numBytes;
-}
-
-
-/***************************************************************************
-*/
-long RingBuffer_AdvanceWriteIndex( RingBuffer *rbuf, long numBytes )
-{
-#ifdef MPSAFE
-    /* we need to ensure that previous writes are seen before we update the write index */
-    WriteMemoryBarrier();
-    return rbuf->writeIndex = (rbuf->writeIndex + numBytes) & rbuf->bigMask;
-#else
-    return rbuf->writeIndex = (rbuf->writeIndex + numBytes) & rbuf->bigMask;
-#endif
-}
-
-/***************************************************************************
-** Get address of region(s) from which we can read data.
-** If the region is contiguous, size2 will be zero.
-** If non-contiguous, size2 will be the size of second region.
-** Returns room available to be written or numBytes, whichever is smaller.
-*/
-long RingBuffer_GetReadRegions( RingBuffer *rbuf, long numBytes,
-                                void **dataPtr1, long *sizePtr1,
-                                void **dataPtr2, long *sizePtr2 )
-{
-    long   index;
-    long   available = RingBuffer_GetReadAvailable( rbuf );
-    if( numBytes > available ) numBytes = available;
-    /* Check to see if read is not contiguous. */
-    index = rbuf->readIndex & rbuf->smallMask;
-    if( (index + numBytes) > rbuf->bufferSize )
-    {
-        /* Write data in two blocks that wrap the buffer. */
-        long firstHalf = rbuf->bufferSize - index;
-        *dataPtr1 = &rbuf->buffer[index];
-        *sizePtr1 = firstHalf;
-        *dataPtr2 = &rbuf->buffer[0];
-        *sizePtr2 = numBytes - firstHalf;
-    }
-    else
-    {
-        *dataPtr1 = &rbuf->buffer[index];
-        *sizePtr1 = numBytes;
-        *dataPtr2 = NULL;
-        *sizePtr2 = 0;
-    }
-    return numBytes;
-}
-/***************************************************************************
-*/
-long RingBuffer_AdvanceReadIndex( RingBuffer *rbuf, long numBytes )
-{
-#ifdef MPSAFE
-    /* we need to ensure that previous writes are always seen before updating the index. */
-    WriteMemoryBarrier();
-    return rbuf->readIndex = (rbuf->readIndex + numBytes) & rbuf->bigMask;
-#else
-    return rbuf->readIndex = (rbuf->readIndex + numBytes) & rbuf->bigMask;
-#endif
-}
-
-/***************************************************************************
-** Return bytes written. */
-long RingBuffer_Write( RingBuffer *rbuf, const void *data, long numBytes )
-{
-    long size1, size2, numWritten;
-    void *data1, *data2;
-    numWritten = RingBuffer_GetWriteRegions( rbuf, numBytes, &data1, &size1, &data2, &size2 );
-    if( size2 > 0 )
-    {
-
-        memcpy( data1, data, size1 );
-        data = ((char *)data) + size1;
-        memcpy( data2, data, size2 );
-    }
-    else
-    {
-        memcpy( data1, data, size1 );
-    }
-    RingBuffer_AdvanceWriteIndex( rbuf, numWritten );
-    return numWritten;
-}
-
-/***************************************************************************
-** Return bytes read. */
-long RingBuffer_Read( RingBuffer *rbuf, void *data, long numBytes )
-{
-    long size1, size2, numRead;
-    void *data1, *data2;
-    numRead = RingBuffer_GetReadRegions( rbuf, numBytes, &data1, &size1, &data2, &size2 );
-    if( size2 > 0 )
-    {
-        memcpy( data, data1, size1 );
-        data = ((char *)data) + size1;
-        memcpy( data, data2, size2 );
-    }
-    else
-    {
-        memcpy( data, data1, size1 );
-    }
-    RingBuffer_AdvanceReadIndex( rbuf, numRead );
-    return numRead;
-}
diff -wruN orig/audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.h audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.h
--- orig/audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.h	2006-09-23 13:42:49.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/hostapi/coreaudio/ringbuffer.h	1969-12-31 18:00:00.000000000 -0600
@@ -1,117 +0,0 @@
-#ifndef _RINGBUFFER_H
-#define _RINGBUFFER_H
-#ifdef __cplusplus
-extern "C"
-{
-#endif /* __cplusplus */
-
-/*
- * $Id: ringbuffer.h,v 1.3 2006/09/23 18:42:49 llucius Exp $
- * ringbuffer.h
- * Ring Buffer utility..
- *
- * Author: Phil Burk, http://www.softsynth.com
- * modified for SMP safety on OS X by Bjorn Roche.
- * also allowed for const where possible.
- * Note that this is safe only for a single-thread reader
- * and a single-thread writer.
- *
- * This program is distributed with the PortAudio Portable Audio Library.
- * For more information see: http://www.portaudio.com
- * Copyright (c) 1999-2000 Ross Bencina and Phil Burk
- *
- * Permission is hereby granted, free of charge, to any person obtaining
- * a copy of this software and associated documentation files
- * (the "Software"), to deal in the Software without restriction,
- * including without limitation the rights to use, copy, modify, merge,
- * publish, distribute, sublicense, and/or sell copies of the Software,
- * and to permit persons to whom the Software is furnished to do so,
- * subject to the following conditions:
- *
- * The above copyright notice and this permission notice shall be
- * included in all copies or substantial portions of the Software.
- *
- * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
- * EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
- * MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
- * IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR
- * ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF
- * CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION
- * WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
- */
-
-/*
- * The text above constitutes the entire PortAudio license; however, 
- * the PortAudio community also makes the following non-binding requests:
- *
- * Any person wishing to distribute modifications to the Software is
- * requested to send the modifications to the original developer so that
- * they can be incorporated into the canonical version. It is also 
- * requested that these non-binding requests be included along with the 
- * license above.
- */
-
-/**
- @file
- @ingroup hostapi_src
-*/
-
-#include <stdio.h>
-#include <stdlib.h>
-#include <math.h>
-#include "ringbuffer.h"
-#include <string.h>
-
-typedef struct
-{
-    long   bufferSize; /* Number of bytes in FIFO. Power of 2. Set by RingBuffer_Init. */
-    long   writeIndex; /* Index of next writable byte. Set by RingBuffer_AdvanceWriteIndex. */
-    long   readIndex;  /* Index of next readable byte. Set by RingBuffer_AdvanceReadIndex. */
-    long   bigMask;    /* Used for wrapping indices with extra bit to distinguish full/empty. */
-    long   smallMask;  /* Used for fitting indices to buffer. */
-    char * buffer;
-}
-RingBuffer;
-/*
- * Initialize Ring Buffer.
- * numBytes must be power of 2, returns -1 if not.
- */
-long RingBuffer_Init( RingBuffer *rbuf, long numBytes, void *dataPtr );
-
-/* Clear buffer. Should only be called when buffer is NOT being read. */
-void RingBuffer_Flush( RingBuffer *rbuf );
-
-/* Return number of bytes available for writing. */
-long RingBuffer_GetWriteAvailable( RingBuffer *rbuf );
-/* Return number of bytes available for read. */
-long RingBuffer_GetReadAvailable( RingBuffer *rbuf );
-/* Return bytes written. */
-long RingBuffer_Write( RingBuffer *rbuf, const void *data, long numBytes );
-/* Return bytes read. */
-long RingBuffer_Read( RingBuffer *rbuf, void *data, long numBytes );
-
-/* Get address of region(s) to which we can write data.
-** If the region is contiguous, size2 will be zero.
-** If non-contiguous, size2 will be the size of second region.
-** Returns room available to be written or numBytes, whichever is smaller.
-*/
-long RingBuffer_GetWriteRegions( RingBuffer *rbuf, long numBytes,
-                                 void **dataPtr1, long *sizePtr1,
-                                 void **dataPtr2, long *sizePtr2 );
-long RingBuffer_AdvanceWriteIndex( RingBuffer *rbuf, long numBytes );
-
-/* Get address of region(s) from which we can read data.
-** If the region is contiguous, size2 will be zero.
-** If non-contiguous, size2 will be the size of second region.
-** Returns room available to be written or numBytes, whichever is smaller.
-*/
-long RingBuffer_GetReadRegions( RingBuffer *rbuf, long numBytes,
-                                void **dataPtr1, long *sizePtr1,
-                                void **dataPtr2, long *sizePtr2 );
-
-long RingBuffer_AdvanceReadIndex( RingBuffer *rbuf, long numBytes );
-
-#ifdef __cplusplus
-}
-#endif /* __cplusplus */
-#endif /* _RINGBUFFER_H */
diff -wruN orig/audacity/lib-src/portaudio-v19/src/hostapi/jack/pa_jack.c audacity/lib-src/portaudio-v19/src/hostapi/jack/pa_jack.c
--- orig/audacity/lib-src/portaudio-v19/src/hostapi/jack/pa_jack.c	2006-09-23 13:42:50.000000000 -0500
+++ audacity/lib-src/portaudio-v19/src/hostapi/jack/pa_jack.c	2006-09-24 02:23:39.000000000 -0500
@@ -68,7 +68,7 @@
 #include "pa_process.h"
 #include "pa_allocation.h"
 #include "pa_cpuload.h"
-#include "../pablio/ringbuffer.c"
+#include "ringbuffer.h"
 
 static int aErr_;
 static PaError paErr_;     /* For use with ENSURE_PA */
@@ -466,12 +466,12 @@
 
     const char **jack_ports = NULL;
     char **client_names = NULL;
-    char *regex_pattern = MALLOC( jack_client_name_size() + 3 );
+    char *regex_pattern = NULL;
     int port_index, client_index, i;
     double globalSampleRate;
     regex_t port_regex;
     unsigned long numClients = 0, numPorts = 0;
-    char *tmp_client_name = MALLOC( jack_client_name_size() );
+    char *tmp_client_name = NULL;
 
     commonApi->info.defaultInputDevice = paNoDevice;
     commonApi->info.defaultOutputDevice = paNoDevice;
@@ -484,6 +484,9 @@
      * associated with the previous list */
     PaUtil_FreeAllAllocations( jackApi->deviceInfoMemory );
 
+    regex_pattern = MALLOC( jack_client_name_size() + 3 );
+    tmp_client_name = MALLOC( jack_client_name_size() );
+
     /* We can only retrieve the list of clients indirectly, by first
      * asking for a list of all ports, then parsing the port names
      * according to the client_name:port_name convention (which is
</code></pre>

________________________________________________________________________________
Ticket #25 Comment 1
According to Stephane Letz, this patch is not required:

	From: 	  letz@grame.fr
	Subject: 	[Portaudio] PA 19 working with JackOSX
	Date: 	May 25, 2006 9:50:54 AM EDT
	To: 	  portaudio@techweb.rfa.org

Hi,

Just let you know that PA 19 is working correctly when used with JackOSX (www.jackosx.com) on OSX.

Thus a PortAudio based application using the CoreAudio backend, will became a Jack client (using the JackRouter driver part of the JackOSX package)
This was not working with PA 18. I've not tested the direct PortAudio ==> Jack backend on OSX. but this should work also

Best Regards

Stephane Letz
_______________________________________________
Portaudio mailing list
Portaudio@techweb.rfa.org
http://techweb.rfa.org/mailman/listinfo/portaudio

________________________________________________________________________________
Ticket #25 Comment 2
This patch is no longer valid against the current code, but the core-aduio related changes should be taken care of. This ticket should be reassigned to the Jack Person, but I don;t know who that is.

________________________________________________________________________________
Ticket #25 Comment 3
[Trac: Originally commented by leland_lucius on 2006-09-24 19:33:15]

Stephane is correct.  As-is, portaudio does indeed work when using the Jack router.  But, the patch also adds native (or direct) Jack support.  This removes the need to have the router running and is akin to the support in Linux.

Let me break down the patch as suggested by Ross and then let's see what Jack-specific stuff is left.  I'll be working on that this evening.


Leland

________________________________________________________________________________
Ticket #25 Comment 4
[Trac: Originally commented by leland_lucius on 2006-09-24 19:33:15]

Bjorn,

I've attached a new Jack patch that has all of the ringbuffer stuff stripped out.  If you and Ross approve those changes, then this new patch is all that is needed to include native Jack support on OSX.

Leland
{{{
diff -ruN orig/v19-devel/configure v19-devel/configure
--- orig/v19-devel/configure	2006-11-25 01:19:53.000000000 -0600
+++ v19-devel/configure	2006-11-25 01:19:24.000000000 -0600
@@ -20528,6 +20528,17 @@
             CFLAGS="$CFLAGS -I\$(top_srcdir)/pa_asio -I$ASIDIR/host/mac -I$ASIODIR/common";
             CXXFLAGS="$CFLAGS";
         fi
+
+        if [ $have_jack = "yes" ] && [ $with_jack != "no" ] ; then
+           DLL_LIBS="$DLL_LIBS $JACK_LIBS"
+           CFLAGS="$CFLAGS $JACK_CFLAGS"
+           OTHER_OBJS="$OTHER_OBJS src/hostapi/jack/pa_jack.o"
+           cat >>confdefs.h <<\_ACEOF
+#define PA_USE_JACK 1
+_ACEOF
+
+        fi
+
 	;;
 
   mingw* )
diff -ruN orig/v19-devel/configure.in v19-devel/configure.in
--- orig/v19-devel/configure.in	2006-11-25 01:19:53.000000000 -0600
+++ v19-devel/configure.in	2006-11-25 01:19:14.000000000 -0600
@@ -152,6 +152,14 @@
             CFLAGS="$CFLAGS -I\$(top_srcdir)/pa_asio -I$ASIDIR/host/mac -I$ASIODIR/common";
             CXXFLAGS="$CFLAGS";
         fi
+
+        if [[ $have_jack = "yes" ] && [ $with_jack != "no" ]] ; then
+           DLL_LIBS="$DLL_LIBS $JACK_LIBS"
+           CFLAGS="$CFLAGS $JACK_CFLAGS"
+           OTHER_OBJS="$OTHER_OBJS src/hostapi/jack/pa_jack.o"
+           AC_DEFINE(PA_USE_JACK)
+        fi
+     
 	;;
 
   mingw* )
}}}

________________________________________________________________________________
Ticket #25 Comment 5
fixed in revision 1191

________________________________________________________________________________
Ticket #25 Comment 6
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #26 Description
[Trac: Originally assigned to somebody]

Leonard Writter wrote:
> one of my users today noted that pa_endianness.h doesn't seem to detect
> correctly for amd64 on linux. i'm for now setting PA_LITTLE_ENDIAN
> manually. (i compile the code into a library)

Does anyone know a good way to autodetect this using the preprocessor (or perhaps its a bug in the configure script?)

________________________________________________________________________________
Ticket #26 Comment 1
Fixed in pa_endianness.h.

________________________________________________________________________________
Ticket #26 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #27 Description
!PaAsio provides an extension to only open a subset of channels on a multichannel device (leaving other channels available to other applications for example). A similar feature has been requested for !PaCore.

For now, if users want to open channels n to m on a given device, them must open channels 0 to m on that device and pass zeros to channels 0 to (n-1). It has been suggested that apple provides an API for doing this more efficiently (channel mapping) and that API should be available. A simmilar API is available for ASIO, and that API should be mimicked if possible. This feature is often requested.

As suggested by Olivar Tristan, the following code may also be used for getting the channel names:

Hi,

I use this in my code.

 struct PaUtilHostApiRepresentation *hostApi;
 PaError err;
 err = PaUtil_GetHostApiRepresentation( &hostApi, (PaHostApiTypeId)m_APIId);
 assert(err == paNoError);
 PaMacCoreHostApiRepresentation *macCoreHostApi = (PaMacCoreHostApiRepresentation*)hostApi;
 AudioDeviceID hostApiDevice = macCoreHostApi->devIds[m_Id];
 char channelName[256];
 UInt32 dataSize = sizeof(channelName);
 OSStatus error = AudioDeviceGetProperty( hostApiDevice, index + 1, false, kAudioDevicePropertyChannelName, &dataSize, &channelName );
 if (error == noErr)
 {
    return String(channelName);
 }

Where index is the channel id (zero based) and APIId the API id (only 1 on mac)

Also, see

http://lists.apple.com/archives/coreaudio-api/2006/Nov/msg00162.html

to figure out whether that is the right property or if instead you have to use kAudioDevicePropertyChannelNameCFString. I only skimmed the thread, but it looks to me like you might have to try both for best compatibility.


See:

 * [http://developer.apple.com/documentation/MusicAudio/Conceptual/CoreAudioOverview/ARoadmaptoCommonTasks/chapter_5_section_3.html CoreAudio Overview]
 * [http://developer.apple.com/technotes/tn2002/tn2091.html#CHANNELMAPPING Technote 2091]

________________________________________________________________________________
Ticket #27 Comment 1
Corrected typo in summary

________________________________________________________________________________
Ticket #27 Comment 2
For now, if users want to open channels n to m on a given device, them must open channels 0 to m on that device and pass zeros to channels 0 to (n-1). It has been suggested that apple provides an API for doing this more efficiently (channel mapping) and that API should be available. A simmilar API is available for ASIO, and that API should be mimicked if possible. This feature is often requested.

See:

 * [http://developer.apple.com/documentation/MusicAudio/Conceptual/CoreAudioOverview/ARoadmaptoCommonTasks/chapter_5_section_3.html CoreAudio Overview]
 * [http://developer.apple.com/technotes/tn2002/tn2091.html#CHANNELMAPPING Technote 2091]

________________________________________________________________________________
Ticket #27 Comment 3
added notes about channel naming.

________________________________________________________________________________
Ticket #27 Comment 4
Resolved in revision 1189.

________________________________________________________________________________
Ticket #27 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #28 Description
Oliver Tristan wrote:
quick patch to fix a problem with ASIO Digidesign driver.
The ASIO Digidesign driver is PACE protected so it quits the debugger if 
you try to debug a PortAudio application while having Protools installed.
This patch blacklist the digi driver when the debugger is launched.

________________________________________________________________________________
Ticket #28 Comment 1
Committed modified version of patch as r1164 
I look up IsDebuggerPresent() dynamically because it doesn't seem to be defined on Win95.

________________________________________________________________________________
Ticket #28 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #29 Description
WAVERFORMATEXTENSIBLE provides support for >2 channels and >16 bit with DirectSound. It should be used wherever possible/necessary with a fallback to WAVERFORMATEX if it fails. Richard Dobson has code for this. There are patches in the mailing list archive, or he should be pinged for the latest version.

________________________________________________________________________________
Ticket #29 Comment 1
Some progress has been made on this. PA/DSound now uses WAVEFORMATEXTENSIBLE for multichannel, and contains code (commented out, but which is almost there) for doing non-16 bit. The main work left to do is to handle renegotiation of sample format if the requested format fails (ie if 24 bit is requested, but dsound fails, we need to fall back to 16 bit).

See changesets r1268 r1258 for recent progress on this issue.

________________________________________________________________________________
Ticket #29 Comment 2
See also ticket #54

________________________________________________________________________________
Ticket #29 Comment 3
retired ticket since this issue is now covered by ticket #54 

________________________________________________________________________________
Ticket #29 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #30 Description
Axel Roebel wrote:
PortAudio crashes in Pa_OpenDefaultStream if the
device is busy. The fix I applied to solve this problem
is attached as well. (There are some more changes
in this patch to prevent compiler warnings).

________________________________________________________________________________
Ticket #30 Comment 1
Applied Axel's patch, it was a simple clean fix. r1139

________________________________________________________________________________
Ticket #30 Comment 2
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #30 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #31 Description
PortAudio/ALSA doesn't support dmix so you can't share the audio device between a PortAudio application and any other -- of course sometimes this is what you want, but sometimes it isn't.

________________________________________________________________________________
Ticket #31 Comment 1
I've attached the most recent patch from Phuah Yee Keat for this (PortAudio mailing list 3rd November). An earlier patch used snd_pcm_drain but this was found to deadlock. The current version uses snd_pcm_drop.

________________________________________________________________________________
Ticket #31 Comment 2
I'm not I understand the rationale for all these changes.
1. The patch doesn't only enable the "dmix" device but also the "default" device.
2. Why always try twice to open a busy device, sleeping inbetween? Is this something the client wants in all cases?
3. Why implement Pa_StopStream through snd_pcm_drop instead of snd_pcm_drain in AlsaStop, since the latter reflects the purpose of Pa_StopStream?

________________________________________________________________________________
Ticket #31 Comment 3
[Trac: Originally commented by leland_lucius on 2006-11-22 15:01:48]

Reply from Phuah:
{{{
1. the default device lets portaudio knows what the default device is,
currently portaudio always set the default to the first device that it
probes, and that's usually not the correct default value. So any users
who tries to use "default" in portaudio is actually not using the
default. I did this because on most systems, according to the alsa set
up, the default IS the dmix device. It can be configured otherwise using
alsa, system-wide.

2. Refer to this:
https://bugtrack.alsa-project.org/alsa-bug/view.php?id=1184
Especially the last comment:
--- quote ---
Well, the dmix resource manager keeps the device allocated for a while
(up to 0.5sec). This has nothing related to audio bufferring. It would
be better to check for -EBUSY error code and keep trying to reopen audio
device about one or two seconds in xine-lib before giving up.
--- end quote ---
That's what solved the problem for xine.
Please note that because of the current implementation of portaudio's
Pa_Initialize, there's no chance that the retry can be done at user's
side. As the device are opened in quick succession to each other, not to
mention on most of Linux systems, the OSS devices are emulated using
ALSA interface as well.

3. Refer to this:
http://packages.debian.org/changelogs/pool/main/e/esound/esound_0.2.36-3/changelog
--- quote ---
* audio_alsa09.c: Disable snd_pcm_drain() call for now since it
sometimes triggers a race condition in the ALSA kernel driver which
causes the esd process to hang. This is not a proper bug fix, but at
least makes all those broken Colony installations out there work again.
(Ubuntu #12276)
---- end quote ----
Yes, I do realize "this is not a proper bug fix", but it enables dmix,
which to me is a deal breaker.
}}}

________________________________________________________________________________
Ticket #31 Comment 4
I've submitted changes that should address all of these concerns. Hopefully this resolves the matter.

________________________________________________________________________________
Ticket #31 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #32 Description
Functions should not be defined in header files. Also see ticket #16 (naming conventions).

________________________________________________________________________________
Ticket #32 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #33 Description
changed /home/svnroot/portaudio/post-commit

created /home/svnroot/portaudio/commit-email.pl

Created an ezmlm mail list called svn at portaudio.com to receive the emails.

________________________________________________________________________________
Ticket #33 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #34 Description
[Trac: Originally assigned to none]

Basic steps to perform:

For each tutorial page at:
http://www.portaudio.com/trac/wiki/TutorialDir/TutorialStart

- copy the content of the page to a new .dox file in /doc/src (perhaps create a /doc/src/tutorial subdirectory). You might want to experiment with copying the rendered HTML rather than the raw Wiki source -- not sure which will be easier to convert
- contents of each file should be wrapped in <pre><code>/** */</code></pre>
- include a @page page_name Page Title entry on first line
- mark up headings using @section tag
- other markup using doxygen markup (see http://www.stack.nl/~dimitri/doxygen/)

doc/src/mainpage.dox and doc/src/api_overview.dox may serve as a basic examples to get started with doxygen markup. You'll need to work out how to insert lists and floating indexes etc.

To regenerate the documentation, in portaudio root dir type
<pre><code> doxygen Doxyfile </code></pre>

By default new pages will be listed on: doc/html/pages.html



________________________________________________________________________________
Ticket #34 Comment 1
Moving this out of V19-RC1. It would be nice to have but we would ship without it. It would be good to have all documentation in doxygen format though -- that way it ships with the release.

________________________________________________________________________________
Ticket #34 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #34 Comment 3
Done. Comitted in r1808, r1809, r1810, r1811

________________________________________________________________________________
Ticket #35 Description
Conversion functions in src/common/pa_converters.c copy audio data between PortAudio native buffers and host buffers.

https://www.assembla.com/code/portaudio/subversion/nodes/1930/portaudio/trunk/src/common/pa_converters.c

Some conversion functions are marked IMPLEMENT ME and do not pass any audio, some are marked REVIEW and may not currently work as expected.

All IMPLEMENT_ME functions are dithered variants of existing non-dither functions, so the non-dithered versions can be used as a starting point.

See also /test/patest_converters.c

________________________________________________________________________________
Ticket #35 Comment 1
removed assignment, i'm not taking responsibility for this, but i'll help if i can

________________________________________________________________________________
Ticket #35 Comment 2
I havn't volunteered to fix this, but I have been working on some code to test the converters if anyone is interested please email me or the list.

________________________________________________________________________________
Ticket #35 Comment 3
converter test code is in /test/patest_converters.c

________________________________________________________________________________
Ticket #35 Comment 4
This ticket will be greatly simplified once we decide on this one:

#112 -- require clipping for dithering sample conversion functions?

________________________________________________________________________________
Ticket #35 Comment 5
I implemented the Float32 to UInt8 conversions so that the loopback test would pass. The loopback test uses Float32 as its primary internal data type. Still more to go.

________________________________________________________________________________
Ticket #35 Comment 6
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #36 Description
[Trac: Originally assigned to none]

Mickael Magnusson submitted this:

Yan Morin wrote:
Hi, is there a way to compile cpp bindings (v19) on:
- Mac OS X (with a different --prefix for portaudio)
- Fedora Core 6 (they removed every .la files in each library, including
alsa-lib-devel and don't use libtool anymore)

Hi,

I have made a patch which use pkg-config to detect compilation and linking parameters instead of linking directly to libportaudio.la.
I have added portaudio-2.0-uninstalled.pc.in which will be used when building the cpp bindings.

After applying the patch, you need to run autoconf in both the portaudio root directory and in bindings/cpp sub directory.

Mikael
Index: configure.in
===================================================================
--- configure.in	(revision 1140)
+++ configure.in	(arbetskopia)
@@ -308,4 +308,4 @@
 AC_SUBST(ENABLE_CXX_TRUE)
 AC_SUBST(ENABLE_CXX_FALSE)
 
-AC_OUTPUT([Makefile portaudio-2.0.pc])
+AC_OUTPUT([Makefile portaudio-2.0.pc portaudio-2.0-uninstalled.pc])
Index: portaudio-2.0-uninstalled.pc.in
===================================================================
--- portaudio-2.0-uninstalled.pc.in	(revision 0)
+++ portaudio-2.0-uninstalled.pc.in	(revision 0)
@@ -0,0 +1,12 @@
+abs_top_builddir=@abs_top_builddir@
+abs_top_srcdir=@abs_top_srcdir@
+libdir=${abs_top_builddir}/lib
+includedir=${abs_top_srcdir}/include
+
+Name: PortAudio
+Description: Portable audio I/O
+Requires:
+Version: 19
+
+Libs: -L${libdir} -lportaudio @LIBS@
+Cflags: -I${includedir} @THREAD_CFLAGS@
Index: bindings/cpp/configure.ac
===================================================================
--- bindings/cpp/configure.ac	(revision 1140)
+++ bindings/cpp/configure.ac	(arbetskopia)
@@ -37,6 +37,11 @@
 AC_LIBTOOL_WIN32_DLL
 AC_PROG_LIBTOOL
 
+export PKG_CONFIG_PATH="`pwd`/${PORTAUDIO_ROOT}:${PKG_CONFIG_PATH}"
+
+PKG_CHECK_MODULES(PORTAUDIO,[portaudio-2.0])
+
+
 # Transfer these variables to the Makefile
 AC_SUBST(DEFAULT_INCLUDES)
 AC_SUBST(PORTAUDIO_ROOT)
Index: bindings/cpp/lib/Makefile.am
===================================================================
--- bindings/cpp/lib/Makefile.am	(revision 1140)
+++ bindings/cpp/lib/Makefile.am	(arbetskopia)
@@ -2,11 +2,11 @@
 
 lib_LTLIBRARIES = libportaudiocpp.la
 
+AM_CPPFLAGS = $(PORTAUDIO_CFLAGS)
 LDADD = libportaudiocpp.la
 
 libportaudiocpp_la_LDFLAGS = -version-info $(LT_VERSION_INFO) -no-undefined
-
-libportaudiocpp_la_LIBADD = $(top_builddir)/$(PORTAUDIO_ROOT)/lib/libportaudio.la
+libportaudiocpp_la_LIBADD = $(PORTAUDIO_LIBS)
 libportaudiocpp_la_SOURCES = \
        $(SRCDIR)/BlockingStream.cxx \
        $(SRCDIR)/CallbackInterface.cxx \

________________________________________________________________________________
Ticket #36 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #37 Description
The special CoreAudio header should be bracketted by something of the form
#ifdef ----------
#defin ----------


.....


#endif /* ------- */

________________________________________________________________________________
Ticket #37 Comment 1
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #37 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #38 Description
Axel Roebel said:

I would like to jump in here. I recently tried portaudio cvs on linux with
frames per buffer == 4096 and this worked fine. Compiling the same application
with the same settings on mac os x I've got a lot of clicks.
It is a simple file player, so latency is not a problem.
After having investigated the code in portaudio it seems
that the mac os x implementation does not like large values of
frames per buffer? Have you any comments on that?

Ross:
Well I can't comment on why the OSX version behaves that way, but I can say that PortAudio should, wherever practical, be able to handle large user buffer sizes... perhaps PA is limiting the host buffer size? (erroneously) or perhaps CoreAudio places some upper limit on the host buffer size -- in the latter case the fix is more complicated.

Bjorn:
Axel, Sorry I missed your original posting. Yes, I have seen problems with using a value for FramesPerBuffer that is significantly larger than the native block-size of the device on Mac OS X. There is nothing in the PA code (as far as I know) that causes this -- I believe it is an issue with CoreAudio. CoreAudio, which is pretty much designed for low-latency all the time operation, only works with two buffers, one for the sound card, and one for the application, so if your buffer is too big for the sound card to swallow in one bite, you're in trouble. This could be worked around internally by breaking up the buffers, or using a ring-buffer, but I don't think the extra work, computation, and latency would be worth it.

ross:
In general I think it should be considered a bug in PortAudio if making the buffer size bigger creates instability. That said, with the current ASIO implementation you would probably see the same thing if the driver limited the buffer size to a small value, and you used a bigger host buffer -- the only solution I can think of is an extra processing thread, which seems like a reasonable (if more complex) solution... but one that hasn't been implemented as far as I know.

bjorn:
I agree it's a bug, but I'm not sure the solution is worth it. I created a ticket so at least there's a record.

________________________________________________________________________________
Ticket #38 Comment 1
As has been noted for some time in the core audio notes file, Latency settings are often ignored. This is a bug in it's own right, but it might help resolve this issue to have additional buffering when higher latencies are requested. This will be non-trivial because CA itself provides no buffering beyond it's two-buffer system. See this thread for a discussion:

http://techweb.rfa.org/pipermail/portaudio/2007-August/007439.html

________________________________________________________________________________
Ticket #38 Comment 2
Small buffer sizes should also be handled better in the Core Audio implementation. At the moment, I believe the device buffer size is always matched to the requested buffer size, which may be too small for the system. A larger buffer size could be used, calculated based on the sample rate and the latency of the system, and smaller packets sent to the user, but that's not done ATM.

________________________________________________________________________________
Ticket #38 Comment 3
See also ticket 85

________________________________________________________________________________
Ticket #38 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #39 Description
	From: 	  meyer@mesw.de
	Subject: 	Re: [Portaudio] Sample Rate and FrameCount
	Date: 	November 28, 2006 1:08:17 PM EST
	To: 	  Axel.Roebel@ircam.fr
	Cc: 	  portaudio@techweb.rfa.org, bjorn@xowave.com

We use paFramesPerBufferUnspecified, but set a higher output latency
>(because default output latency will lead to bad pops at least on
>ALSA/v19 -- this has been reported by a number of people already.) >The
>API will then calculate a reliable buffer size for you automatically. >No
>problems with this strategy so far.

Markus

META TICKET: #97 [META] Some PA recommended deviceInfo->default*Latency values are bad or unimplemented

________________________________________________________________________________
Ticket #39 Comment 1
Default output latency should not lead to bad pops. This is a bug. The fact that multiple people have reported it means that it is not an isolated issue. The fix would be to determine safe default values for most or all systems (by trial and error or test program) and commit them.

________________________________________________________________________________
Ticket #39 Comment 2
A lot of work has been done on latencies for Linux PA. I have run lots of tests and am not hearing pops. I think this is fixed.

________________________________________________________________________________
Ticket #39 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #40 Description
!PortAudio currently does not support OS X 10.3. The dependence on 10.4 is due to Memory barriers which are more reliable in 10.4 than they are in 10.3.  It might be possible to use weak linking to support 10.3, albeit without memory barriers, but the situation is not clear. Other options have been discussed on the mailing list.

________________________________________________________________________________
Ticket #40 Comment 1
A bit more:

There are known bugs in the hardware implementation of asm volatile("sync":::"memory"), which OSMemoryBarrier (only available in OS 10.4) works around.

Assuming OSMemoryBarrier() is weak linked, the correct solution (supporting the best memory barriers available at runtime), including optimization for OS X 10.4, is probably to use something like this:

{{{
#      define PaUtil_FullMemoryBarrier() do { __biultin_expect(OSMemoryBarrier != NULL, true) ? OSMemoryBarrier() : asm volatile("sync":::"memory") } while(false)
#      define PaUtil_ReadMemoryBarrier()  do { __biultin_expect(OSMemoryBarrier != NULL, true) ? OSMemoryBarrier() : asm volatile("sync":::"memory") } while(false)
#      define PaUtil_WriteMemoryBarrier() do { __biultin_expect(OSMemoryBarrier != NULL, true)  ? OSMemoryBarrier() : asm volatile("sync":::"memory") } while(false)
}}}

This could be compiled on OS X 10.4 and should run on 10.3, provided the makefile was changed in a few ways:

Define minimum deployment level of 10.2 so that weak linking is supported:

        MACOSX_DEPLOYMENT_TARGET:=10.2
        export MACOSX_DEPLOYMENT_TARGET


Other things may be required as described here:

http://developer.apple.com/documentation/MacOSX/Conceptual/BPFrameworks/Concepts/WeakLinking.html

________________________________________________________________________________
Ticket #40 Comment 2
According to some stats taken in 2008, only 0.2% of users are below 10.4.
There would be even fewer now. I think we can safely drop 10.3 support.

________________________________________________________________________________
Ticket #40 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #41 Description
Mac OS X supports what it calls the "default audio device", which is different from the device that happens to be the default. The "Default Audio Device" may change if a device is plugged or unplugged. For example, this behavior can be seen in !iTunes: if you use the control panel to set the default device to a USB device and then unplug the device, !iTunes will keep playing, but switches to another device.

!CoreAudio probably takes care of most of the troubling stuff in this transition, but it isn't clear what happens when the number of channels changes, or what other things need to be handled by he !CoreAudio client. Certainly any converters the client is responsible for (such as input SR conversion) would need to be changed. Another thing that's unclear is how this device should be presented to !PortAudio clients. Should it be another device, or should it be used whenever the user selects the device that happens to be the default? or calls !OpenDefaultStream? Or should it only be reachable using platform specific calls, since this is not a normal behavior in !PortAudio?

________________________________________________________________________________
Ticket #41 Comment 1
I think this raises interesting questions for the future.. but for now I think having it as a new separate special device makes the most sense with regard to the current PortAudio API definition. 

The current PortAudio default device index model is based on the idea of providing a hint to the client as to which normal device is the default device. If that can change while a stream is open then I wouldn't expect portaudio to suddenly start playing out a different device. Same for Pa_OpenDefaultStream() -- which is really just a shortcut, nothing more.

________________________________________________________________________________
Ticket #41 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #42 Description
[Trac: Originally reported by bob_mcgwier on 2006-12-08 14:42:03]

The latest pa_alsa_linux,  svn revision 1158,  fails with "ret" failed in line 959 in pa_linux_alsa.c


________________________________________________________________________________
Ticket #42 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #43 Description
[Trac: Originally reported by bob_mcgwier on 2006-12-10 01:22:27]

The latest pa_alsa_linux, svn revision 1158, fails with "ret" failed in line 959 in pa_linux_alsa.c.  Running padevs is all that is required to see the failure.  I am using a Delta 44 sound card if that is relevant.

________________________________________________________________________________
Ticket #43 Comment 1
Hi Bob
I suspect this might be due to enabling dmix as discussed earlier on the list. Since PA now supports dmix it is opened for querying during initialization, and it probably causes other devices to enter a busy state for a short period. I've now made the change that PA ALSA retries opening a busy device for up to a second before it gives up, it seems that this helps on my system at least. 

Please let me know how it works for you.

________________________________________________________________________________
Ticket #43 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #44 Description
[Trac: Originally reported by bob_mcgwier on 2006-12-25 10:25:53]

Please take a look at what is happening on pa_init under Linux when jackd is running.  This is most easily done by starting jack and then running pa_dev.  It takes nearly forever for pa_devs to stopping looking for alsa and oss connections to hw:0,0 and to agree to look for jack.  The code works,  but it takes programs using portaudio and jack a very long time to start up.

________________________________________________________________________________
Ticket #44 Comment 1
Should be resolved now.

________________________________________________________________________________
Ticket #44 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #45 Description
At the moment, core audio asks the device for a buffer size that is the same as the buffer size requested by the user. This makes sense and works well as long as SR conversion is not taking place. In the presence of SR conversion, a sample frame on the device no longer corresponds to a user sample frame. It would be good if this could be adapted in a better way, if possible, as it would reduce the chances of dropouts, and possibly reduce the CPU usage a bit.

________________________________________________________________________________
Ticket #45 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #46 Description
On Jan 16, 2007, at 9:24 PM, Brant Sears wrote:

> Hi. I'm seeing an issue where when I plug headphones into my computer or remove them the results of Pa_GetStreamTime change - basically it causes the clock to reset on the stream.
> 
> I'm seeing this on a Dual Processor G5 PowerMac running MacOS X 10.4.8.
> 
> Has anyone else seen this? Am I doing something wrong?

I'm sorry to say this looks like a bug. I get similar results when I plug/unplug the headphones on my MacBook and I run patest_time.

It seems OS X doesn't just let the sound-card handle this changeover -- it has to intervene and treat the headphone output as a new device. I'm sure PortAudio could add a listener for this change and update it's own "startTime", but it seems it would be hard to guarantee that this change happened at the same time as the plug/unplug -- at least from the perspective of another thread. So the downside of this fix is that there could be a moment where there's a huge jump in time before it settles back to the right time.

The only workaround that seems like it would work, would be to use the timing information from the callback, which seems to stay on track. I have generally considered this info to be less up-to-date than the info coming from AudioDeviceGetCurrentTime, but it seems hard to create a high-latency situation on Mac OS X, so maybe it's good enough for most people.

________________________________________________________________________________
Ticket #46 Comment 1
r1537 and r1539 re-wrote the PaStreamCallbackTimeInfo implementation. This issue should be retested against the latest version.

________________________________________________________________________________
Ticket #46 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #47 Description
[Trac: Originally reported by bob_mcgwier on 2007-01-19 16:34:53]

#ifndef PA_NO_WDMKS
        PaWinWdm_Initialize,
#endif


should not be commented out in pa_win_hostapis.c since we have a functional wdmks.

________________________________________________________________________________
Ticket #47 Comment 1
Probably best done in combination with:

#132 -- switch pa_win_hostapis.c to use PA_USE_* #defines instead of PA_NO_*

________________________________________________________________________________
Ticket #47 Comment 2
This should be done once Wave-RT is integrated. At present rob doesn't think it's ready. Note that if/when we go ahead with #132 this task won't be needed.

________________________________________________________________________________
Ticket #47 Comment 3
resoved by r1606

________________________________________________________________________________
Ticket #47 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #48 Description
Hello,

I'm trying to get a portaudio application that runs on Windows to run on the Mac, and it seems like the registered streamFinishedCallback function does not get invoked when the stream is finished.  I grep'd through the source base (v19_061121) and I don't see any references to the streamFinsihedCallback in the src/hostapi/coreaudio directory or any other mac place. 

I'm pretty mac-ignorant, but the following patch seems to make it work.   Hopefully somebody with more mac knowledge then me can review it and make sure this it's doing the right thing.

Thanks.

    Scott


Index: pa_mac_core.c
===================================================================
--- pa_mac_core.c       (revision 17223)
+++ pa_mac_core.c       (working copy)
@@ -1851,6 +1851,8 @@
          AudioOutputUnitStop(stream->outputUnit);
       if( stream->inputUnit )
          AudioOutputUnitStop(stream->inputUnit);
+      if( stream->streamRepresentation.streamFinishedCallback )
+       stream->streamRepresentation.streamFinishedCallback( stream->streamRepresentation.userData );
       break;
    }

________________________________________________________________________________
Ticket #48 Comment 1
The patch seems reasonable, but since there's more than one way to stop the stream, I'll have to review it a bit to make sure. I'll also have to make sure it conforms to the spec.

________________________________________________________________________________
Ticket #48 Comment 2
This was resolved by adding a callback from the mac OS so no matter how playback stops, the callback should be called.

________________________________________________________________________________
Ticket #48 Comment 3
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #48 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #49 Description
From Eliot Blennerhassett:

If portaudio is built with support for  more than one API, and the default API 
has no devices (or is not installed), then Pa_GetDefault[Input|
Output]Device() returns an error paNoDevice, even if other APIs have 
available devices.

The following patch returns the first available device from any API if one 
isn't available from the default API.

(I guess this could be turned around, and ensure that the default API has at 
least one device!)

Index: pa_front.c
===================================================================
--- pa_front.c	(revision 1182)
+++ pa_front.c	(working copy)
@@ -747,6 +747,17 @@
     else
     {
         result = hostApis_[hostApi]->info.defaultInputDevice;
+        if (result == paNoDevice) 
+        {
+            hostApi=0;
+            while (hostApis_[hostApi])
+            {
+                result = hostApis_[hostApi]->info.defaultInputDevice;
+                if (result != paNoDevice)
+                    break;
+                hostApi++;
+            }
+        }
     }

 #ifdef PA_LOG_API_CALLS
@@ -775,6 +786,17 @@
     else
     {
         result = hostApis_[hostApi]->info.defaultOutputDevice;
+        if (result == paNoDevice) 
+        {
+            hostApi=0;
+            while (hostApis_[hostApi])
+            {
+                result = hostApis_[hostApi]->info.defaultOutputDevice;
+                if (result != paNoDevice)
+                    break;
+                hostApi++;
+            }
+        }
     }

 #ifdef PA_LOG_API_CALLS

________________________________________________________________________________
Ticket #49 Comment 1
The provided patch could result in default devices being from different host APIs. I don't think that's a good fix because it can result in full duplex failing for some cases where Pa reports separate default input and output devices.

The suggestion of requiring the default host API to have at least one device makes more sense. But it also changes the semantics of "default". Default is intended to imply expected lowest common denominator not "best working suggestion".

At this point I am inclined to close this as not-a-bug

________________________________________________________________________________
Ticket #49 Comment 2
Also consider that the reported default host api *should* contain the default devices (ie once a search for the default device has found it, that should be used to determine the host api).

________________________________________________________________________________
Ticket #49 Comment 3
Phil and I decided it should work this way:

API constraints:
- there is only one default host api
- both default input and outputdevices must belong to default host api

The default host API is the first API in the search order with a default input or output device.

This means that the fix is to search first for a default host api and then use it's devices. Not to search for devices as in Eliot's patch above.

Test case: run on a Linux machine without ALSA and find OSS devices as defaults.



________________________________________________________________________________
Ticket #49 Comment 4
Should be fixed in r1728

________________________________________________________________________________
Ticket #49 Comment 5
Phil to test for regressions on Linux before marking as fixed.

________________________________________________________________________________
Ticket #49 Comment 6
Marking as fixed. Changes from r1728 seem to work. Phil manually tested this on Linux. He had OSS with no devices available, so he switched the initialization to init OSS first, and the result was still ALSA as the default host API. Therefore we conclude that the defaulting mechanism now works.

________________________________________________________________________________
Ticket #49 Comment 7
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #50 Description
[Trac: Originally assigned to gordon_gidluck]

All,

Attached is a small patch to make PA build on CE.

cheers,
 -benny


-- 
Benny Prijono
http://www.pjsip.org
Index: src/os/win/pa_win_util.c
===================================================================
--- src/os/win/pa_win_util.c	(revision 1186)
+++ src/os/win/pa_win_util.c	(working copy)
@@ -138,6 +138,10 @@
     }
     else
     {
+#ifndef UNDER_CE
         return timeGetTime() * .001;
+#else
+	return GetTickCount() * .001;
+#endif
     }
 }
Index: src/hostapi/wmme/pa_win_wmme.c
===================================================================
--- src/hostapi/wmme/pa_win_wmme.c	(revision 1186)
+++ src/hostapi/wmme/pa_win_wmme.c	(working copy)
@@ -112,7 +112,9 @@
 #include <math.h>
 #include <windows.h>
 #include <mmsystem.h>
+#ifndef UNDER_CE
 #include <process.h>
+#endif
 #include <assert.h>
 /* PLB20010422 - "memory.h" doesn't work on CodeWarrior for PC. Thanks Mike Berry for the mod. */
 #ifndef __MWERKS__
@@ -131,7 +133,9 @@

 #include "pa_win_wmme.h"

-#if (defined(WIN32) && (defined(_MSC_VER) && (_MSC_VER >= 1200))) /* MSC version 6 and above */
+#if (defined(UNDER_CE))
+#pragma comment(lib, "Coredll.lib")
+#elif (defined(WIN32) && (defined(_MSC_VER) && (_MSC_VER >= 1200))) /* MSC version 6 and above */
 #pragma comment(lib, "winmm.lib")
 #endif

________________________________________________________________________________
Ticket #50 Comment 1
[Trac: Originally commented by gordon_gidluck on 2007-04-11 00:05:27]

Changes made 05/04/2007. Committed to SVN (in revision 1197)

________________________________________________________________________________
Ticket #50 Comment 2
[Trac: Originally commented by gordon_gidluck on 2007-04-11 00:05:27]

Missed a hash mark # on the #elif . Benny caught the problem and I checked in the fix.

________________________________________________________________________________
Ticket #50 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #51 Description
Signed-off-by: Eliot Blennerhassett <eblennerhassett@audioscience.com>

The attached patch updates asihpi hostapi to use new stream read write 
functions that first appeared in HPI version 3.05.05.
These apis are simpler to use, avoiding the use of HPI_DATA struct.

regards

--
Eliot Blennerhassett
AudioScience Inc.
?_______________________________________________
Portaudio mailing list
Portaudio@techweb.rfa.org
http://techweb.rfa.org/mailman/listinfo/portaudio

________________________________________________________________________________
Ticket #51 Comment 1
Patch committed in r1356

________________________________________________________________________________
Ticket #51 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #52 Description
The Mac OS configure.in script does not list all of the object files required to build the PA library on OS X.  The definition of the OTHER_OBJS variable can be changed as follows in order to get it working:

OTHER_OBJS="src/os/mac_osx/pa_mac_hostapis.o src/os/unix/pa_unix_util.o src/hostapi/coreaudio/pa_mac_core.o src/hostapi/coreaudio/pa_mac_core_blocking.o src/hostapi/coreaudio/pa_mac_core_utilities.o src/hostapi/coreaudio/ringbuffer.o";

________________________________________________________________________________
Ticket #52 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #53 Description
[Trac: Originally assigned to somebody]

In the top-level Makefile.in, there is sh syntax that prevents Solaris from completing the build in the three "recursive" targets at the end of that file.  The problem is the use of an empty variable ($SUBDIRS), so a possible solution would be to wrap the rule in an if conditional:

all-recursive:
    if [ "$(SUBDIRS)" ]; then for dir in "$(SUBDIRS)"; do make -C $$dir all; done ; fi

install-recursive:
    if [ "$(SUBDIRS)" ]; then for dir in "$(SUBDIRS)"; do make -C $$dir install; done ; fi

uninstall-recursive:
    if [ "$(SUBDIRS)" ]; then for dir in "$(SUBDIRS)"; do make -C $$dir uninstall; done ; fi

________________________________________________________________________________
Ticket #53 Comment 1
apparently this patch went in recently. and a different Solaris makefile problem was comitted in r1357. Pete Ross assures me this ticket is resolved now.

________________________________________________________________________________
Ticket #53 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #54 Description
Multichannel support is complete in DirectSound. This has been quite extensively tested. The remaining work pertains to >16 bit sample formats. Progress on this issue was made in changesets  r1268 r1258. See the checkin comments there.

At the moment input and output sample formats are hardwired to  16 bit in the two lines in pa_win_ds.c reading:
PaSampleFormat nativeInputFormats = paInt16;
It is possible to uncomment the following lines to support other sample formats:
PaSampleFormat nativeFormats = paUInt8 | paInt16 | paInt24 | paInt32 | paFloat32;

However this will make use of DS converters rather than using PortAudio converters to map to the best supported sample format. The main work left to do is to handle renegotiation of sample format if the requested format fails (ie if 24 bit is requested, but dsound fails, we need to fall back to 16 bit). 


The issue has been discussed on the mailing list:
http://techweb.rfa.org/pipermail/portaudio/2008-January/008175.html
http://techweb.rfa.org/pipermail/portaudio/2008-February/008195.html

There have been other discussions here on when/why to use WAVEFORMATEX instead of WAVEFORMATEXTENSIBLE:

For example, there are some very popular soundcards with bugs in their WAVEFORMATEXTENSIBLE support:
http://techweb.rfa.org/pipermail/portaudio/2008-February/008237.html


Alec originally wrote:
I have attached a modified version of portaudio/src/hostapi/dsound/pa_win_ds.c, which has been patched to allow multiple (more than two) channels, and sample formats other than paInt16.  This is achieved through the use of the WAVEFORMATEXTENSIBLE structure.  

Of note:
* I have coded away the PA sample format conversion, which is probably not in model for PortAudio.  This can be re-introduced by specifying desired sample formats in the call to PaUtil_SelectClosestAvailableFormat().
* The use of WAVEFORMATEXTENSIBLE requires us to define a channel mapping.  I have used the technique of 1 channel -> FrontCenterSpeaker, N channels -> FirstNSpeakers.  This makes sense to me, but be aware of the choice.

________________________________________________________________________________
Ticket #54 Comment 1
Some progress made, see also ticket #29

________________________________________________________________________________
Ticket #54 Comment 2
Renamed from "Enable multiple channels and different sample widths..." since multichannel has been implemented since r1268

________________________________________________________________________________
Ticket #54 Comment 3
Changed ticket description with more detail about current status of >16 bit support.

________________________________________________________________________________
Ticket #54 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #54 Comment 5
[[file:cOgTW8sjKr4zPjacwqjQWU]]

originally added to Trac by alec_rogers 5 years ago.

________________________________________________________________________________
Ticket #55 Description
The PortAudio DS callback scheduling is based on a polling timer with a fixed period. This could be improved by rescheduling the timer according to when the next callback is predicted to occurr (ie poll at shorter intervals as the callback deadline gets closer.

In DX8 and above there is also a IDirectSoundNotify8 interface:

http://msdn.microsoft.com/library/default.asp?url=/library/en-us/directx9_c/IDirectSoundNotify8.asp

seb@plogue says:
>>>
I did some quick tests with the dx sdk examples and it seems to be working 
fine : you set up a list of positions to be notified at inside the buffer, 
i.e. you can have a 64k buffer and ask to be notified every 4k, then you get 
called back when the driver is at that position

it's ds8 only (although that could be checked at runtime and still have the 
current implementation for non-ds8+)
<<<

________________________________________________________________________________
Ticket #55 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #56 Description
ReadStream, WriteStream, GetStreamReadAvailable and GetStreamWriteAvailable are not implemented.

One possible way to implement this would be to have ReadStream and WriteStream operate directly on the directsound ring buffers. If they needed to pause, they could block on an event which gets woken up by an MMTimer using the same timing rules the callback routine uses, every time they get woken up they could try to proceed until they had completed their work.

________________________________________________________________________________
Ticket #56 Comment 1
See also #55 "Directsound callback scheduling could be improved" should probably consider fixing both at once.

________________________________________________________________________________
Ticket #56 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #57 Description
ReadStream and WriteStream are not implemented for ASIO. It is necessary to set up separate ring buffers to implement this. If the Read or Write functions were blocked waiting to input or output data to the FIFOs the ASIO callback could set an event/condition variable to wake them up.

There is now a new ticket covering testing this:

#148 -- ASIO blocking i/o implementation needs testing

________________________________________________________________________________
Ticket #57 Comment 1
Sven Fischer from Institute of Hearing Technology and Audiology (IHA) http://www.hoertechnik-audiologie.de has sent in a patch for this (attached to this ticket). I'm working on merging it.

________________________________________________________________________________
Ticket #57 Comment 2
Progress made. I've just checked in a version of Sven's patch to allow the standard portaudio ringbuffer to handle multi-byte elements. see r1346

________________________________________________________________________________
Ticket #57 Comment 3
I have a final patch from Sven. I just need to merge and review it. No reason why this shouldn't go in before RC1

________________________________________________________________________________
Ticket #57 Comment 4
Checked in Sven Fischer's implementation of this in r1363

Still need to ensure we havn't broken the build systems too much. Waiting for some feedback and testing.

________________________________________________________________________________
Ticket #57 Comment 5
The following build files still need to be updated to included pa_ringbuffer.c

> File bindings\cpp\build\vc6\devs_example.dsp:
> SOURCE=..\..\..\..\pa_asio\pa_asio.cpp
> File bindings\cpp\build\vc6\sine_example.dsp:
> SOURCE=..\..\..\..\pa_asio\pa_asio.cpp
>
> File bindings\cpp\build\vc7_1\devs_example.vcproj:
>    RelativePath="..\..\..\..\src\hostapi\asio\pa_asio.cpp">
> File bindings\cpp\build\vc7_1\sine_example.vcproj:
>    RelativePath="..\..\..\..\src\hostapi\asio\pa_asio.cpp">
>
> File build\dev-cpp\Makefile-dll:
> ./pa_asio.o: ../../pa_asio/pa_asio.cpp
> $(CPP) -c ../../pa_asio/pa_asio.cpp -o ./pa_asio.o $(CXXFLAGS)
> File build\dev-cpp\Makefile-static:
> ./pa_asio.o: ../../pa_asio/pa_asio.cpp
> $(CPP) -c ../../pa_asio/pa_asio.cpp -o ./pa_asio.o $(CXXFLAGS)
>
> File build\dev-cpp\portaudio-dll.dev:
> FileName=..\..\pa_asio\pa_asio.cpp
> BuildCmd=$(CPP) -c pa_asio.cpp -o ./pa_asio.o $(CXXFLAGS)
> File build\dev-cpp\portaudio-static.dev:
> FileName=..\..\pa_asio\pa_asio.cpp
> BuildCmd=$(CPP) -c pa_asio.cpp -o ./pa_asio.o $(CXXFLAGS)

________________________________________________________________________________
Ticket #57 Comment 6
The blocking API needs to be estensively tested QAed.

Code review is needed for ReadStream, WriteStream, GetStreamReadAvailable, GetStreamWriteAvailable in pa_asio.cpp.

________________________________________________________________________________
Ticket #57 Comment 7
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #57 Comment 9
[[file:aMPyyUsjOr4AuhacwqjQYw]]

Original patch from Patch from Sven Fischer

________________________________________________________________________________
Ticket #58 Description
[Trac: Originally reported by jf_menard on 2007-09-07 04:33:35]

[Trac: Originally assigned to jf_menard]

Use a define for API calling convention.  This is required if static-linked with another calling convention.

Declare a struct packing in public headers.  Required to ensure consistent packing across projects (in VS2005).

We are reviewing this ticket on the mailing list. A summary of discussions is here:
http://www.portaudio.com/trac/wiki/StructPackingAndApiCallingConvention

________________________________________________________________________________
Ticket #58 Comment 1
[Trac: Originally commented by jf_menard on 2007-09-07 04:33:35]

Someone should commit this patch to SVN.

________________________________________________________________________________
Ticket #58 Comment 2
I'm not sure the PA_API_CC macro format used here is sufficent to cover calling conventions on all platforms. I've seen other calling convention macros that take the return types as parameters. Also need to resolve how this interacts with doxygen.

The question is not so much with whether we need what this patch does -- it's whether this patch does it the best way for all platforms.

Should review other code bases for guidance. (python libs?)

________________________________________________________________________________
Ticket #58 Comment 3
The patch included a number of unrelated doc comment typo corrections. These have now been committed as r1594.

________________________________________________________________________________
Ticket #58 Comment 4
Recent list discussion have identified the following issues and open questions (not sure this is exhaustive yet):
- how to wrap calling conventions? (need to accomodate {{{__declspec(import)}}} and calling convention). Python uses macros like PA_API_FUNC(RETURNTYPE) that can insert code before and after the return type.
- which calling convention to use on Windows? {{{__stdcall}}} is the defacto standard but we will need to explore name mangling issues.
- what amount of packing to use? (4 byte packing is standard for say VB, but we have 8-byte doubles in some structs so perhaps we want to combine manual padding and pragmas to give both 8 byte natural alignment and compatibility with 4 byte packing schemes)

________________________________________________________________________________
Ticket #58 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #58 Comment 6
[[file:bFPVPssjOr4zieacwqjQWU]]

Ticket58.patch   (26.8 KB) - added to Trac by jf_menard 4 years ago:
SVN patch for ticket #58

________________________________________________________________________________
Ticket #59 Description
The following problems exist with the specification of Stream Finished Callback (SFC) with Blocking Streams:

- There is no documentation saying whether it is permitted

- The SFC passes a userData ptr, but the specification for OpenStream() says that userData is ignored for blocking streams (need to update documentation)

* Need to clean up the documentation and write a new test to test this case.

- also the documentation should be cleaned up to indicte that only one stream callback function can be registered with a stream at a time.



See the following mailing list post for discussion
http://techweb.rfa.org/pipermail/portaudio/2007-September/007519.html

________________________________________________________________________________
Ticket #59 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #60 Description
Currently the directory name for the direct sound host API is dsound, and the source files have names like pa_win_ds.c, and the source code uses constants like paDirectSound

It would be nice if there was some consistency here..

________________________________________________________________________________
Ticket #60 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #61 Description
[Trac: Originally assigned to none]

Pa_GetDeviceInfo() returns NULL on error (usually an invalid device index is passed)

Many tests have code similar to:
Pa_GetDeviceInfo( Pa_GetDefaultOutputDevice() )->defaultLowOutputLatency;

Which will segfault if there is no default device (ie when Pa_GetDefaultOutputDevice() returns -1). 

All tests and code should be corrected to check for a valid pointer return from Pa_GetDeviceInfo(), and also for a positive result from GetDefault*Device().

________________________________________________________________________________
Ticket #61 Comment 1
Magnus Jonsson used the following technique to fix this in paqa_errs.c in r1368

+    info = Pa_GetDeviceInfo(Pa_GetDefaultInputDevice());
+    ipp.suggestedLatency          = info ? info->defaultLowInputLatency : 0.100;
+    info = Pa_GetDeviceInfo(Pa_GetDefaultOutputDevice());
+    opp.suggestedLatency          = info ? info->defaultLowOutputLatency : 0.100;

________________________________________________________________________________
Ticket #61 Comment 2
I don't really like Magnus Jonsson's solution, it masks an underlying bug (you shouldn't call Pa_GetDeviceInfo in such a way that it returns NULL).

To close this ticket you'd need to:

1. check the use of Pa_GetDeviceInfo in every file in the /tests directory to identify the tests that have the problem.

2. Fix the tests (preferably by bailing with an error message if Pa_GetDeviceInfo returns null). eg:

const PaDeviceInfo *info = Pa_GetDeviceInfo( x );

if( !info ){

 Pa_Terminate();

 fprintf(stderr, "PaGetDeviceInfo returned NULL");

 exit(-1);
}

Usually the bug is encountered because there is no input (or output) device. The test should probably check this as a pre-condition before calling Pa_GetDeviceInfo().








________________________________________________________________________________
Ticket #61 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #62 Description
[Trac: Originally reported by jf_menard on 2007-11-15 03:14:00]

[Trac: Originally assigned to jf_menard]

I realized WASAPI would crash my application (Access violation reading...) if I did the following quick sequence:
 * Pa_OpenStream(...)
 * Pa_StartStream(...)
 * Pa_StopStream(...)
 * Pa_CloseStream(...)

The issue arise when Stop and Close are called before the !ProcThread is started by Windows.  In this case, the new thread encounters a released pointer and crashes.  To obtain a reliable behavior, I think we should consider that Stop and Close could be called anywhere between the start of !ProcThread and the while (!stream->closeRequest).

________________________________________________________________________________
Ticket #62 Comment 1
[Trac: Originally commented by jf_menard on 2007-11-15 03:14:00]

This is a working fix for me.  I have not evaluated all the impacts but at least it does not systematically crash.  I also fixed some non 2-channels issues.

________________________________________________________________________________
Ticket #62 Comment 2
[Trac: Originally commented by jf_menard on 2007-11-15 03:14:00]

Someone should commit this patch to SVN.

________________________________________________________________________________
Ticket #62 Comment 3
All multi-threading issues are fixed in WASAPI's re-implementation. The patch is outdated and has no use for current version.

________________________________________________________________________________
Ticket #62 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #63 Description
jf menard writes:

I realized WASAPI would crash my application (Access violation reading...) if I did the following quick sequence:
- Pa_OpenStream(...)
- Pa_StartStream(...)
- Pa_StopStream(...)
- Pa_CloseStream(...)

The issue arise when Stop and Close are called before the !ProcThread is started by Windows.  In this case, the new thread encounters a released pointer and crashes.  To obtain a reliable behavior, I think we should consider that Stop and Close could be called anywhere between the start of !ProcThread and the while (!stream->closeRequest).

Also, could someone verify if there is a "stream->running = false;" missing from Pa_AbortStream(...) because the actual version crashes.

Thanks,

J-F

________________________________________________________________________________
Ticket #63 Comment 1
duplicate of 62. Oops.

________________________________________________________________________________
Ticket #63 Comment 2
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #63 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #64 Description
When I try to open multiple output streams simultaneously with the same device, I get an error in this call:

#if 0
    /* -- add listener for dropouts -- */
    ERR_WRAP( AudioDeviceAddPropertyListener( *audioDevice,
                   0,
                   outStreamParams ? false : true,
                   kAudioDeviceProcessorOverload,
                   xrunCallback,
                   (void *)stream) );
#endif

which apparently was a fairly recent addition. With that code commented out, I can open multiple simultaneous streams and they mix perfectly.


________________________________________________________________________________
Ticket #64 Comment 1
The issue here is probably that coreAudio doesn't like having the same listener applied multiple times to the same device. A check will have to be added for that and some sort of multiplexing will be needed so each stream can be notified of xrun conditions when they are detected.

________________________________________________________________________________
Ticket #64 Comment 2
Brenton Partridge asked:

More long-term, not knowing that much about the CoreAudio code, could we just add the dropout
listener for the first stream opened to the device, and automatically not listen for dropouts on
subsequent streams to the device?


To which I replied:

If you think about it for a moment the problem is a bit more complex. Say the user opens a stream on device 1. Okay, so PortAudio puts a listener on device 1. Next, say the user opens another stream on device 1. At this point, we can't add another listener to device 1, because the OS will get upset (That's the error everyone's seeing). We have to keep track ourselves. Now if the user closes a stream, we have to know how many streams are left on a given device, so that when the last stream on a given device is closed we can stop listening, so we don't get spurious messages about a device under/overrunning. Also, we need to make sure that our one listener per device manages to distribute xrun messages to all streams that are using the device, because that is what the API calls for. A simple linked list or resizable array will solve the issue, I think, but it'll take time to write it and test it. This is not a feature that seems critical to anyone -- especially with an easy workaround when it causes real problems -- so I haven't made it a priority. Again, I'm happy to accept patches.

________________________________________________________________________________
Ticket #64 Comment 3
Should be fixed in revision 1316, though still needs thorough testing.

________________________________________________________________________________
Ticket #64 Comment 4
Milestone V19-PREVIEW1 deleted

________________________________________________________________________________
Ticket #64 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #65 Description
patest_in_overflow, at least on the mac, must be built without optimization in order to work. this is because, as far as I can tell, the compiler is smart enough to realize that the sin calculations it's being asked to compile are never used, so the CPU utilization never goes very high. Also, the code seems to assume that the CPU utilization will always be a linear function of the number of sines, which is probably not true as soon as you have dropouts.



________________________________________________________________________________
Ticket #65 Comment 1
How about adding the following to the end of the callback function?

{
 /* avoid the optimizer optimizing away our sine calculations
    by passing the resulting value to an external function */
 char s[50];
 sprintf(s, "%f", out);
}

________________________________________________________________________________
Ticket #65 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #66 Description
The current documentation for PaUtil_AllocateMemory reads:
>>Allocate size bytes, guaranteed to be aligned to a FIXME byte boundary <<

We should decide whether we want to make alignment guarantees. Recent discussions re the ringbufer imply that we should at least make some minimal guarantee (such as alignment to sizeof(int)).

It might be better to introduce PaUtil_AllocateAlignedMemory( size, alignment ) for larger alignments.

Also: Document and adhere to the alignment guarantees provided by PaUtil_AllocateMemory().

see:
http://www.portaudio.com/docs/v19-doxydocs/pa__util_8h.html

________________________________________________________________________________
Ticket #66 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #67 Description
[Trac: Originally assigned to none]

The closest thing we have at the moment is pa_devs.c

In general we could benefit from a test which is designed to validate the consistency of the API with the specification rather. Most of the current tests are functional tests.

________________________________________________________________________________
Ticket #67 Comment 1
need to review paqa_devs.c for this.

________________________________________________________________________________
Ticket #67 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #68 Description
There are a number of #defines which can be set to configure PortAudio configuration options. Some examples are: PA_USE_C99_LRINTF, PA_TRACE_REALTIME_EVENTS, PA_LOG_API_CALLS

For the most part, these defines are documented in the doxygen documentation, however there is no global grouping of these, and the listing of PA_* defines includes many unrelated non-configuration defines, see:
http://www.portaudio.com/docs/v19-doxydocs/globals_defs_0x70.html#index_p

One resolution would be to see if doxygen provides a way for us to tag important #defines and have them listed on a special doxygen page.



________________________________________________________________________________
Ticket #68 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #69 Description
[DONE] Create a wiki page to document our coding standards. Start with this: http://www.portaudio.com/docs/proposals/014-StyleGuide.html
(Note that there are some display errors in http://www.portaudio.com/docs/proposals/014-StyleGuide.html since it embeds &gt; and &lt; without escaping them.)

New Wiki coding stanards page is here: [[ImplementationStyleGuidelines]]

[?DONE?] We currently have no standard for the formatting of comments.
 * Wiki now says C-Style comments. Do we need guidelines for multi-line comments?

[?DONE?] We have no documented or agreed standard for use of SVN (creating branches rather than breaking the trunk, etc).
Actually we now have:
 * [[DeveloperGuidelines]]
 * [[RulesForSvnCommitters]]
 * [[HowToUseCodeReview]]



________________________________________________________________________________
Ticket #69 Comment 1
Marked as STARTER. This would be a cut and paste job to a new Wiki page followed by application of wiki formatting to get it back to a similar format to the old pages. 

________________________________________________________________________________
Ticket #69 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #69 Comment 4
The content from the old page http://www.portaudio.com/docs/proposals/014-StyleGuide.html has been moved to a new page with Assembla.
The page can be accessed here https://www.assembla.com/spaces/portaudio/wiki/ImplementationStyleGuidelines

I have done some small changes (added a reference to C-style comments, and fixed the name of the file where PA_DEBUG macro are located).  Plus all code-related stuff has been inserted as inline code.  Therefore all the text that was lost in the original page due to unescaped lt and gt should now be visible.

Maybe some additional information could be added with the minimum amount of Doxygen information required for each file??

________________________________________________________________________________
Ticket #69 Comment 5
@wspinelli Thank you! I have made a few minor edits and added a section on Doxygen comments. Would you mind taking a look at the Doxygen section and let me know what you think?

It would be nice if we could automate the formatting conformance and naming guidelines. I'm imagining something like:

* Work out the exact astyle parameters that match our current formatting style. Run astyle and generate a diff.
* Use doxygen to generate a symbol dumb (xml output mode) then slurp this into python and run a check for our naming rules.

Any thoughts?

________________________________________________________________________________
Ticket #69 Comment 6
Missing doxygen tags are documented here:

https://www.assembla.com/spaces/portaudio/tickets/71

________________________________________________________________________________
Ticket #69 Comment 7
Restructured wiki heirarchy and added links to RulesForSvnCommitters and HowToUseCodeReview to DeveloperGuidelines.

________________________________________________________________________________
Ticket #69 Comment 8
Created #237, #238, #239, that should cover the fallout from adhering the style guidelines. The only remaining question is around how to handle multi-line comments.

________________________________________________________________________________
Ticket #69 Comment 9
The multi-line format that you propose is good.  I have added it to the Wiki page.

I had already checked the astyle command in fixfile.bat.  I have seen the the style=ansi option is deprecated in the latest version of astyle avaiable

I will have a look at the astyle syntax to see how we can match the proposed coding style.

________________________________________________________________________________
Ticket #70 Description
There is great documentation in pa_ma_core.h but it isn't being outputted, see:
http://www.portaudio.com/docs/v19-doxydocs/pa__mac__core_8h.html

It is missing an extra * at the first line of each doxygen comment I think. Eg should be:

/<pre><code>*</code></pre><pre><code>*</code></pre>

<pre><code>*</code></pre>/

________________________________________________________________________________
Ticket #70 Comment 1
You'll need to install doxygen to make sure your changes work. The doxygen configuration file is called Doxyfile in the root of the portaudio distribution. All you need to do to run it is 

> doxygen Doxyfile

________________________________________________________________________________
Ticket #70 Comment 2
patch submitted by chris share and applied in r1698

________________________________________________________________________________
Ticket #70 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #71 Description
[Trac: Originally assigned to none]

running the portaudio/doc/utils/checkfiledocs.py reports numerous missing doxygen tags. The most significant ones are listed below. The brief tags and ingroup tags are important because they significantly assist in navigating the doxygen generated documentation.

See also ticket #12 it is closely related and has more info.

c:\PortAudio\pa_trunk\doc\utils>python checkfiledocs.py
c:\PortAudio\pa_trunk\src\common\pa_debugprint.h :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\common\pa_memorybarrier.h :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\common\pa_ringbuffer.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\common\pa_svnrevision.h :
        ! no doxygen /** block
        ! no doxygen @file tag
        ! no doxygen @brief tag
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\hostapi\alsa\pa_linux_alsa.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\asio\iasiothiscallresolver.cpp :
        ! no doxygen /** block
        ! no doxygen @file tag
        ! no doxygen @brief tag
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\hostapi\asio\iasiothiscallresolver.h :
        ! no doxygen /** block
        ! no doxygen @file tag
        ! no doxygen @brief tag
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\hostapi\asio\pa_asio.cpp :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\coreaudio\pa_mac_core_blocking.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\coreaudio\pa_mac_core_blocking.h :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\coreaudio\pa_mac_core_old.c :
        ! no doxygen /** block
        ! no doxygen @file tag
        ! no doxygen @brief tag
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\hostapi\coreaudio\pa_mac_core_utilities.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\coreaudio\pa_mac_core_utilities.h :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\dsound\pa_win_ds.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\dsound\pa_win_ds_dynlink.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\dsound\pa_win_ds_dynlink.h :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\jack\pa_jack.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\oss\pa_unix_oss.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\hostapi\oss\recplay.c :
        ! no doxygen @file tag
        ! no doxygen @brief tag
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\os\unix\pa_unix_hostapis.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\os\unix\pa_unix_util.c :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\os\unix\pa_unix_util.h :
        ! no doxygen @brief tag
c:\PortAudio\pa_trunk\src\os\win\pa_win_waveformat.c :
        ! no doxygen /** block
        ! no doxygen @file tag
        ! no doxygen @brief tag
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\os\win\pa_win_wdmks_utils.c :
        ! no doxygen /** block
        ! no doxygen @file tag
        ! no doxygen @brief tag
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\os\win\pa_win_wdmks_utils.h :
        ! no doxygen @ingroup tag
c:\PortAudio\pa_trunk\src\os\win\pa_x86_plain_converters.c :
        ! no doxygen @brief tag

________________________________________________________________________________
Ticket #71 Comment 1
Marked as STARTER. If someone wants to rerun the script and email me (rossb) a current list of missing brief descriptions I can reel them off quickly. The main job would be pasting them into the source files in the correct format (for reference many already have them), running Doxygen locally and rechecking them.

________________________________________________________________________________
Ticket #71 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #71 Comment 3
Updated with latest list of missing doxygen tags.

________________________________________________________________________________
Ticket #72 Description
[Trac: Originally assigned to none]

see thread:
http://techweb.rfa.org/pipermail/portaudio/2007-July/007320.html

In summary:
1. People want a way to detect which host APIs are available when compiling PA
2. People want a way to detect which host APIs are compiled-in at runtime
3. People want a way to look up function-pointers for host-API extensions

These are in part separate issues.

Issue 1 is related to the configuration (how PA is built/configured). As noted below we would need to agree on some standard preprocessor symbols, and then they would need to be used on different platforms.

It has been noted that 2 can be addressed by changing the specification such that all compiled-in host APIs are always reported by PA, even those with no devices, or who returned an error during initialization.

Issue 3 can be handled in a number of different ways... possibly without the help of PortAudio if issues 1 and 2 are resolved.

Arve wrote:
Tim Blechmann made a valid point regarding the use of host-API specific  
PortAudio extensions: These should be exposed to client code in some  
standard manner. He maintains we should install these headers in a  
"portaudio" directory, (e.g. include/portaudio), and then advertise which  
are available through macros such as PA_HAVE_JACK (or PA_USE_JACK?) etc in  
a generated header portaudio/config.h. He also suggested that these  
headers be automatically included via portaudio.h when available, but I'm  
unsure whether convention dictates to let the client include such headers  
himself (depending on PA_HAVE_* macros).

________________________________________________________________________________
Ticket #72 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #73 Description
The doxygen @todo feature has been used to document unresolved issues which should be listed as track tickets:
http://www.portaudio.com/docs/v19-doxydocs/todo.html

Resolution involves resolving the issues or moving the items into trac tickets.

We should probably have a policy of not using @todo except for making short-term notes.

________________________________________________________________________________
Ticket #73 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #74 Description
The PaStreamCallback documentation for timeInfo.currentTime reads:

"the time in seconds when the stream callback was called"

At the moment the buffer processor may call the stream callback multiple times without intervention from the calling host API, so what is currently happening is:

"the time the portaudio buffer processor started processing the host buffer which the callback is involved with filling".

I think an accurate "current time" should be passed to the callback when possible. This was the reason ticket #3 existed.

One resolution would be to change the buffer processor to return after each call to PaStreamCallback so the host api implementation could update the currentTime field.

________________________________________________________________________________
Ticket #74 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #75 Description
ReadStream and WriteStream are not implemented for DirectSound. DirectSound already provides ring buffers, and methods for querying their current state, so the main thing which is needed is to set up a timer to wake up the ReadStream() and WriteStream() functions when they are blocking.

One way to do this would be to write a high-precision sleep function which sets up a multimedia timer to signal an Event object, and then to block on the even object (also use a timeout to ensure the event object doesn't block forever). ReadStream/WriteStream would sleep for long enough that they whole buffer space they are hoping to fill gets filled (or perhaps some fraction of the ringbuffer size.

________________________________________________________________________________
Ticket #75 Comment 1
duplicate of #56

________________________________________________________________________________
Ticket #75 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #76 Description
We currently use the C interface layer of the ASIO SDK (defined in asio.cpp) which only allows one driver to be loaded at a time. This is an artificial limitation which can be avoided by talking to the driver directly instead of calling the functions in asio.cpp.

The end goal would be to remove the following global reference from the code:
extern AsioDrivers* asioDrivers;
And the implicit use of the global SDK variable theAsioDriver;

More research is required to determine exactly what needs to be done. Ideally we would like to avoid re-writing the whole ASIO sdk.

________________________________________________________________________________
Ticket #76 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #77 Description
There is no test for this case either.

See mailing list discussion thread 19/2/2008:
Re: [Portaudio] ASIO Blocking I/O Patch Implementation (a ring buffercontaining frames, not bytes)


> So I took a look at pa_mac_core_blocking.c, what I noticed is:
>
> - It doesn't seem to use the buffer processor
>
> - It doesn't appear to handle non-interleaved calls to ReadStream/ 
> WriteStream (shall I create a ticket for that?). This particular  
> case is one of the reasons why Sven is using the buffer processor on  
> the ReadStream()/WriteStream() side of the queue.
>

Yes, since that sounds like a major issue and I won't be able to  
address that anytime soon. Is there a test for it?

[nope]

There is a ticket to implement the test: #83

________________________________________________________________________________
Ticket #77 Comment 1
Moved half of this to a separate ticket targetting the buffer processor.

________________________________________________________________________________
Ticket #77 Comment 2
A long time ago Roman M. Shulakov wrote:
I believe there might be a bug in a MacOS part when playing audio from separate non-interleaved buffers using blocking API. If I got it right, one needs to
OR 'paNonInterleaved' flag with a sample format in use when describing PA stream parameters.
After this Pa_WriteStream() will take an array of (void *) pointers to separate buffers, one per channel, instead of a pointer to one large interleaved buffer. This works nicely on Linux. On OSX however,  Pa_WriteStream() never returns. I traced it down to internal ring buffer having size of zero thus never being ready to accept a single byte of data. This condition seems to be caused by 'computeSampleSizeFromFormat()' and 'computeSampleSizeFromFormatPow2()' procs in 'pa_mac_core_blocking.c' not expecting any extra flags OR'ed with a sample format.

Next I tried to help it by changing lines 79 and 94 from:

switch( format ) {

to:

switch( format & (~paNonInterleaved) ) {

This gave an internal ring buffer a reasonable size, however it also caused a memory corruption in CoreAudo RT thread (I think). Any ideas?

________________________________________________________________________________
Ticket #77 Comment 3
I verified Roman's analysis of the computeSampleSizeFromFormat() error.

________________________________________________________________________________
Ticket #77 Comment 4
It looks like the fix is non-trivial. The implementation uses the ringbuffer to write data to CoreAudio. We probably need to interleave the data as it is written to the ringbuffer and then make the back iend run in interleaved mode.

For now I just added code to detect paNonInterleaved and return paSampleFormatNotSupported. I also fixed the switch statements that return sample size.

________________________________________________________________________________
Ticket #77 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #78 Description
A number of changes have been identified which should go into the V19 release which require us to break binary compatibility with existing clients. These include:

- removal of struct version numbers
- global version number API
- add hostApiType field to stream info structure
- make the host api type a bitfield rather than a sequence

These will be made together soon and the API version number will be bumped to 2.1


________________________________________________________________________________
Ticket #78 Comment 1
This is really a meta-ticket. Each of the items listed here should be broken out into a separate ticket for review. I also need to go back and link into list discussions on these points. I will do this.

I note that adding hostApiType to the stream info structure is happening as part of the PortMixer patch merge.

________________________________________________________________________________
Ticket #78 Comment 2
related to:

#10 Pa_SetHostApiInitializationMask to determine which host APIs will be initialized at startup

________________________________________________________________________________
Ticket #78 Comment 3
Regarding structVersion fields: currently half our structs have them and half don't, so something needs to change. Need to track down mailing list discussion that recommended removing them.

________________________________________________________________________________
Ticket #78 Comment 4
Ticket closed. All issues it referred to are now split out into separate tickets:
- removal of struct version numbers: #172
- global version number API #173
- add hostApiType field to stream info structure #169
- make the host api type a bitfield rather than a sequence (in doubt, but covered by #10)

________________________________________________________________________________
Ticket #78 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #79 Description
[Trac: Originally assigned to none]

Some PA blocking i/o immplementations (at least CoreAudio and ASIO, possibly others) are implemented by writing an internal portaudio callback which copies data beetween the buffers passed to the callback and FIFO ring buffers. This is sub-optimal in that there is an implied double-copying of the data: Rather than the Buffer Processor converting the data directly from host buffer into the FIFO it converts it in-place, or into its temporary buffer then the host API implementations copy the data into the FIFO.

The buffer processor needs to be enhanced to easily support copying data from host buffers directy to/from FIFOs. One possibility is to introduce specific calls into the buffer processor for handling ring buffers -- that would make the implementations consistent -- however it remains to be seen how easy this would be given that there is a need to handle out of band data (underflow/overflow information) and setting synchronisation objects.



________________________________________________________________________________
Ticket #79 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #80 Description
The defaults were copied from the V18 code. We could probably do some tests and do better now.

Test results have been gathered using patest_wmme_find_best_latency_params.c They are attached to ticket #185. There was also a public call for people to run the tests:
http://music.columbia.edu/pipermail/portaudio/2011-July/012789.html

See also:

META TICKET: #97 [META] Some PA recommended deviceInfo->default*Latency values are bad or unimplemented

________________________________________________________________________________
Ticket #80 Comment 1
Based on preliminary results from ticket #185 (see pdf attached to that ticket) I'm going to set default output latency to 90ms for XP, Vista, Win7. There may be some scope for reducing this on WinXP and Win7 if we can show that high latencies are due to Vista (not sure at this stage, need more data).

________________________________________________________________________________
Ticket #80 Comment 2
The test has been written and some results have been collected. A call for additional testers is here: http://music.columbia.edu/pipermail/portaudio/2011-July/012789.html

I'm leaving this ticket open for now since we would like more results.

________________________________________________________________________________
Ticket #80 Comment 3
Resolving as fixed by changeset r1731. I've reduced the default latency on WinXP, Vista and Win7 down to 90ms based on interim results from ticket #185. I feel that we could probably have lower defaults for WinXP and Win7 if we could perform a more extensive survey.

________________________________________________________________________________
Ticket #80 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #81 Description
[Trac: Originally assigned to none]

pa_jack.c doesn't seem to support non-interleaved sample buffers in the BlockingReadStream and BlockingWriteStream calls. BlockingBegin also looks like it forces the stream to 2-channel (and perhaps floats?) line 314:

    /* <FIXME> */
    stream->samplesPerFrame = 2;
    stream->bytesPerFrame = sizeof(float) * stream->samplesPerFrame;
    /* </FIXME> */


There is a ticket to implement a test for non-interleaved blocking i/o: #83



________________________________________________________________________________
Ticket #81 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #82 Description
pablio is not supported in V19. We have mostly-working blocking i/o implementations for all OSes (not quite all APIs yet).

________________________________________________________________________________
Ticket #82 Comment 1
AudioAnecdotes uses PABLIO. There may be other old apps as well.  I can port it to V19.

________________________________________________________________________________
Ticket #82 Comment 2
Current plan is to wrap the V19 blocking read/write calls with the PABLIO API.

________________________________________________________________________________
Ticket #82 Comment 3
Removed LIST-REVIEW status. Phil has indicated he will reimplement using V19 read/write. Changed ticket summary to reflect this.

________________________________________________________________________________
Ticket #82 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #83 Description
There is no test which excercises non-interleaved blocking i/o. Some Host API implementations do not support non-interleaved blocking (eg Jack and CoreAudio) -- in part because there is no test.

Non-interleaved blocking i/o is accomplished by ORing the paNonInterleaved with the sample format passed to Pa_OpenStream, and by passing an array of buffer pointers to Pa_ReadStream and Pa_WriteStream rather than a single buffer pointer. 

The test would need to test both input and output.

Some host APIs currently implement interleaved blocking i/o (WMME, ASIO).

Some apparently don't:

#77 -- CoreAudio implementation doesn't support non-interleaved ReadStream and WriteStream

#148, #57 -- ASIO blocking i/o needs more testing and depends on this test.

And the status of the rest are unknown at this time (someone could check).

________________________________________________________________________________
Ticket #83 Comment 1
For reference, the following tests test paNoInterleaved for callback streams:

patest_multi_sine.c
patest_wire.c

________________________________________________________________________________
Ticket #83 Comment 2
I'm marking this as a blocker because JACK and CoreAudio are broken and fixing them is dependent on having this test.

________________________________________________________________________________
Ticket #83 Comment 3
Added test/patest_write_sine_nonint.c to test the write. Still need a test for read.

________________________________________________________________________________
Ticket #83 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #84 Description
[Trac: Originally reported by gordon_gidluck on 2008-08-28 12:56:54]

[Trac: Originally assigned to gordon_gidluck]

submitted by bodo.maass@sygyt.com on 08/22/2008

SUMMARY[[BR]][[BR]]
All C Run-time functions except the signal() function work correctly when used in threads that are created by the CreateThread() function. However, depending on what CRT functions are called, there may be a small memory leak when threads are terminated. Calling strlen(), for example, does not trigger the allocation of the CRT thread data-block, and calling malloc(), fopen(), _open(), strtok(), ctime(), or localtime() causes allocation of a CRT per-thread data-block, which may cause a memory leak.

details are here:
http://support.microsoft.com/default.aspx/kb/104641

This defect also applies to wdmks and wasapi portAudio api's.

The solution is to use _beginthreadex() instead of CreateThread() and also _endthreadex() instead of ExitThread() .


  

________________________________________________________________________________
Ticket #84 Comment 1
[Trac: Originally commented by gordon_gidluck on 2008-08-28 12:56:54]

Changed CreateThread to _beginthreadex in pa_win_wdmks.c and pa_win_wmme.c . Changed ExitThread to _endthreadex. Ran into an issue with pa_win_wasapi.cpp . Will turn that over to David Viens to review before recommitting a change.

________________________________________________________________________________
Ticket #84 Comment 2
[Trac: Originally commented by gordon_gidluck on 2008-08-28 12:56:54]

cygwin compile reported broken by sb-lst@enotty.net

________________________________________________________________________________
Ticket #84 Comment 3
[Trac: Originally commented by gordon_gidluck on 2008-08-28 12:56:54]

Changed the call to _beginthreadex or CreateThread based upon whether or not __CYGWIN__ is defined.

{{{
/* use CreateThread for CYGWIN, _beginthreadex for all others */
#ifndef __CYGWIN__
#define CREATE_THREAD (HANDLE)_beginthreadex( 0, 0, ProcessingThreadProc, stream, 0, &stream->processingThreadId )
#else
#define CREATE_THREAD CreateThread( 0, 0, ProcessingThreadProc, stream, 0, &stream->processingThreadId )
#endif
}}}

Since wasapi is C++, I employed typecasting to handle the more strict type-checking of parameters. I found a good tutorial related to this subject here:[[BR]]
http://www.mtholyoke.edu/courses/dstrahma/cs322/lab3andproj.htm

{{{
#ifndef __CYGWIN__
#define CREATE_THREAD (HANDLE) _beginthreadex(NULL, 0, (unsigned (_stdcall *)(void *))ProcThread, (LPVOID) stream, 0, (unsigned *)&stream->dwThreadId)
#else
#define CREATE_THREAD CreateThread(NULL, 0, ProcThread, (LPVOID) stream, 0, &stream->dwThreadId)
#endif
}}}

wdmks referenced _endthreadex so this was handled using the same conditional statement.

{{{
#ifndef __CYGWIN__
#define EXIT_THREAD _endthreadex(0)
#else
#define EXIT_THREAD ExitThread(0)
#endif
}}}






________________________________________________________________________________
Ticket #84 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #85 Description
Gnaural reported trouble with porting to mac OS X (initially, there was lots of noise, described as sounding like an edian-ness issue). Here is a report on the workaround which indicates a bug in Mac OS X:

-----

Turned out that merely changing frames per buffer in Pa_OpenStream from 4096 to 1024 got rid of the problem! A little more experimentation showed that any value up through 3072 worked, anything over exhibited the bad behavior. 

BTW, paFramesPerBufferUnspecified also worked on the Mac, but I've had problems on Linux with that for some reason (which is why I had an arbitrary fixed value to begin with; changing it to 1024 now).

-------

My initial impression is that this should probably be addressed with ticket 38 because both will require additional buffering.

________________________________________________________________________________
Ticket #85 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #86 Description
http://music.columbia.edu/pipermail/portaudio/2009-April/009060.html

Philip Bennefall wrote
>>>
I had a bit of trouble with the DirectSound completion code, if you return complete from your callback and do not call AbortStream or StopStream immediately then the last segment starts looping. I assume this is because the DirectSound secondary buffer is still full of the old audio, and so my solution was to insert some extra 
silence the size of the buffer in the end and then stop.
<<<

________________________________________________________________________________
Ticket #86 Comment 1
resolved by r1443

________________________________________________________________________________
Ticket #86 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #87 Description
See TODO in the code

________________________________________________________________________________
Ticket #87 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #88 Description
Users of 64-bit MacOS are running into the following assertion:

assertion error:
Assertion failed: (sizeof( UInt32 ) == sizeof( long )), function ringBufferIOProc, file src /../../../portaudio/src/hostapi/coreaudio/
pa_mac_core.c, line 1722.


A fairly simple patch (although it is not a "true" fix, because it is still casting a long value to a uint32) is the following:

--- portaudio_20071207/src/hostapi/coreaudio/pa_mac_core.c	2007-11-13 16:22:56.000000000 -0500
+++ portaudio/src/hostapi/coreaudio/pa_mac_core.c	2009-04-07 10:14:41.020332000 -0400
@@ -1700,29 +1700,29 @@
 #define RING_BUFFER_EMPTY (1000)
 
 static OSStatus ringBufferIOProc( AudioConverterRef inAudioConverter, 
-                             UInt32*ioDataSize, 
+                             UInt32* ioDataSize, 
                              void** outData, 
-                             void*inUserData )
+                             void* inUserData )
 {
-   void *dummyData;
-   long dummySize;
+   void *dummyData = NULL;
+   long dummySize = 0;
+   long dataSize = (long) *ioDataSize;
    PaUtilRingBuffer *rb = (PaUtilRingBuffer *) inUserData;
 
    VVDBUG(("ringBufferIOProc()\n"));
 
-   assert( sizeof( UInt32 ) == sizeof( long ) );
    if( PaUtil_GetRingBufferReadAvailable( rb ) == 0 ) {
       *outData = NULL;
       *ioDataSize = 0;
       return RING_BUFFER_EMPTY;
    }
-   PaUtil_GetRingBufferReadRegions( rb, *ioDataSize,
-                                    outData, (long *)ioDataSize, 
+   PaUtil_GetRingBufferReadRegions( rb, dataSize,
+                                    outData, &dataSize, 
                                     &dummyData, &dummySize );
-      
-   assert( *ioDataSize );
-   PaUtil_AdvanceRingBufferReadIndex( rb, *ioDataSize );
-
+   
+   assert( dataSize );
+   PaUtil_AdvanceRingBufferReadIndex( rb, dataSize );
+   *ioDataSize = (UInt32) dataSize;
    return noErr;
 }

________________________________________________________________________________
Ticket #88 Comment 1
Excuse me if this is a duplicate, but there seemed to be some doubt if a similar change had made it into the repository or not.

________________________________________________________________________________
Ticket #88 Comment 2
Added to LIST-REVIEW. We need to chase this up.

________________________________________________________________________________
Ticket #88 Comment 3
Forgot to mark this as fixed a while ago. Sorry.

________________________________________________________________________________
Ticket #88 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #89 Description
[Trac: Originally assigned to somebody]

Numerous small changes have been made to the WDM-KS host API in order to fix several issues.  A more significant change allowed this API to share the waveformatextensible channel mapping now used by the DirectSound API.

I am not clear if this is under very active development, since its use was commented out, but I wanted to submit a diff for those people who were using this API in case it could be of help.

________________________________________________________________________________
Ticket #89 Comment 1
Alec Rogers skrev 2011-02-02 22:07:
> There are a few notable things in that set of patches:
>
> 1) Use of the waveformatextensible: this is related to "pa_win_waveformat.h".
> We have a fallback strategy to waveformatex.
>
> 2) The define FALLBACK_TO_OTHER_FORMATS is something you will want to remove.
> For the MathWorks use of that file, we wanted hard failure when the device could not support a particular audio format.
>
> 3) There are several changes to a critical run loop at the end of that file.
> 3.1) set state to KSSTATE_PAUSE before KSSTATE_RUN
> 3.2) patch things so that we can run with just an output or input (see the use of the flag syncInOut)
> 3.3) We had a ten second abort, because some device drivers failed to notify us with the appropriate events.
>
> If you have specific questions, let me know and I will scratch my head some more...

________________________________________________________________________________
Ticket #89 Comment 2
I'm closing this ticket. Robert Bielik says all the relevant stuff from here stuff is now merged into wdmks_wavert branch.


________________________________________________________________________________
Ticket #89 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #90 Description
Blaise wrote:
I'm busy working with PortAudio and I've come across a problem when trying to debug in NetBeans. When running the debugger the system freezes on Pa_Initialize(). It works fine in gdb. I've tried compiling and installing portaudio with the "--enable-mac-debug" option and without. Setup is as follows:

OS - Mac OSX 10.6.4
NetBeans - 6.9
PortAudio - pa_snapshot.tgz created Thursday, 08-Jul-2010 21:37:03 PDT
I also tried the stable build but that didn't compile on Mac OS 10.6.4. 

To reproduce the problem, create an empty project with Pa_Intitalize() in the main function. Then run the program in debug mode in NetBeans. Note that the program works fine when running in gdb. I've attached an example project. I don't know if the same bug appears on other operating systems.

Many thanks,
Blaise Thomson

________________________________________________________________________________
Ticket #90 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #90 Comment 2
[[file:bJ0uCEsjKr4BXQacwqjQXA]]
 - added by philburk 19 months ago.

________________________________________________________________________________
Ticket #90 Comment 3
[[file:bJ3F7ssjKr4BXQacwqjQXA]]
 - added by philburk 19 months ago.

________________________________________________________________________________
Ticket #91 Description
Since Vista, a new WDM API for Kernel Streaming exists: WaveRT (see doc here: http://www.microsoft.com/whdc/device/audio/wavertport.mspx)

________________________________________________________________________________
Ticket #91 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #91 Comment 3
WaveRT branch merged.

________________________________________________________________________________
Ticket #92 Description
PaStreamParameters::hostApiSpecificStreamInfo should actually be named hostApiSpecificStreamParameters

This has become obvious because we are looking at adding a 
"hostApiSpecificStreamInfo" field to the PaStreamInfo structure.

________________________________________________________________________________
Ticket #92 Comment 1
Robert Bielik wrote:
> Mmm.. yeah :) To be honest, the name should change to hostApiSpecificStreamParameters even though it might break stuff, as it is a much more appropriate name for it.

________________________________________________________________________________
Ticket #92 Comment 2
Need to discuss with the list what the procedure for making these kind of backwards-incompatible changes should be.

My position is that we should just do it -- the sooner the better.

________________________________________________________________________________
Ticket #92 Comment 3
No objections on the list so far. 

Do this after SS2 is released.

Other things that need to change at the same time:

- add a page in the doxygen docs to note client-facing changes like this.

- rename all the host-specific structures too:

- PaWinMmeStreamInfo -> PaWinMmeStreamParameters
- PaWasapiStreamInfo -> PaWasapiStreamParameters
- PaWinDirectSoundStreamInfo-> PaWinDirectSoundStreamParameters
- PaMacCoreStreamInfo -> PaMacCoreStreamParameters
- PaMacCore_SetupStreamInfo -> PaMacCore_SetupStreamParameters
- PaAlsaStreamInfo -> PaAlsaStreamParameters
- PaAsioStreamInfo -> PaAsioStreamParameters

________________________________________________________________________________
Ticket #92 Comment 4
No objections during LIST-REVIEW. Assigned to V19-M1

________________________________________________________________________________
Ticket #92 Comment 5
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #93 Description
pa_asio.cpp SelectHostBufferSize() doesn't take the user's requested callback framesPerBuffer into account at all when computing the native ASIO buffer size.

It should attempt to conform the ASIO buffer size to the callback framesPerBuffer (or multiples of it). This is pretty nasty since it impacts available CPU time in the audio callback, but we've been living with it forever apparently...

Further: pa_asio.h provides a method to query for available buffer sizes (PaAsio_GetAvailableLatencyValues) but no host api specific extension to set i/o buffer sizes in frames. If the computation of the ASIO buffer size was based on framesPerBuffer there would be no need for such an extension.

In general, the algorithm used to select a host buffer size needs to prioritise (in this order):

1. ASIO buffer sizes permitted by the driver
2. multiples of the user requested framesPerBuffer
3. the user's requested latency


META TICKET: #98 [META] Harmonize Pa_OpenStream() suggestedLatency param to native buffer size calculations

________________________________________________________________________________
Ticket #93 Comment 1
Resolved by r1775

________________________________________________________________________________
Ticket #93 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #94 Description
Initialisation of streamInfo latency fields is incorrect -- failure to divide by SR to give seconds.

As reported here:
http://music.columbia.edu/pipermail/portaudio/2009-June/009203.html

> I've noticed that stream->streamRepresentation.streamInfo.inputLatency
> and outputLatency are set incorrectly on some host APIs. For some host
> APIs the return value of PaUtil_GetBufferProcessorInputLatency (which
> is in # of frames) has not been divided by sample rate to convert to
> seconds. This is particularly noticable in the case of duplex adapting
> buffer processors where initialFramesInTempInputBuffer /
> initialFramesInTempOutputBuffer is not 0.
>
> Correctly implemented are pa_asio and pa_win_mme.
> Incorrect are pa_skeleton, pa_linux_alsa and pa_win_ds.
>
> In pa_linux_alsa.c for example:
>
>        stream->streamRepresentation.streamInfo.inputLatency =
> inputLatency + PaUtil_GetBufferProcessorInputLatency(
>                &stream->bufferProcessor );
>
> should be
>
>        stream->streamRepresentation.streamInfo.inputLatency =
> inputLatency + ((PaTime)PaUtil_GetBufferProcessorInputLatency(
>                &stream->bufferProcessor ) / sampleRate) ;
>
> since inputLatency is in seconds and
> PaUtil_GetBufferProcessorInputLatency() is in frames.

This was since fixed in ALSA I think. 

Similar problem exists in DSound -- need to re-review others.

________________________________________________________________________________
Ticket #94 Comment 1
DirectSound fixed in r1599. I reviewed all implementations. There was a bug in the ASIHPI one too fixed in r1598. pa_skeleton.c also had a the same bug fixed in r1600

________________________________________________________________________________
Ticket #94 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #95 Description
According to the report here:
http://music.columbia.edu/pipermail/portaudio/2009-June/009205.html

Yann writes:

I'm not familiar with the details of CoreAudio but from a quick code
inspection, it looks like the CoreAudio latency calculation for
streamRepresentation.streamInfo.inputLatency / outputLatency doesn't
take into account the latency portion attributable to the driver (i.e.
at minimum I would have thought it would include the capture/playback
buffer latency). There are some comments in the code which question
the way the latency is calculated.

For more info about computing CoreAudio latency values see the comments in ticket #175 PA/CoreAudio recommended deviceInfo->default*Latency is 0

META TICKET: #181 [META] ensure reported streamInfo->input/ouputLatency values are correct

________________________________________________________________________________
Ticket #95 Comment 1
CoreAudio provides quite detailed latency information to the client, so I agree that this should be fixed.

________________________________________________________________________________
Ticket #95 Comment 2
PA now queries the device and system latencies. These are taken into account when handling suggestedLatency. Reported input and output latencies are now based on the sum of multiple latencies. The actual latencies still need to be verified by direct measurement.

________________________________________________________________________________
Ticket #95 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #96 Description
The documentation should be extended to indicate that where possible, PA implementations will make best efforts to ensure 100% CPU availability to the callback. In other words: the callback's deadline for returning full output buffers is nominally the callback entry time plus the duration of the buffer less any system jitter.

We should also document that there are exceptional cases where this isn't actually possible (ie ASIO buffer size adaption).

________________________________________________________________________________
Ticket #96 Comment 1
Assigning to M1 since it's closely related to what's in the latency wiki page

________________________________________________________________________________
Ticket #96 Comment 2
Done in r1745

________________________________________________________________________________
Ticket #96 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #97 Description
The recommended latencies reported in the !PaDeviceInfo structure for some host APIs are 0 or unimplemented.

!PaDeviceInfo docs:
http://www.portaudio.com/docs/v19-doxydocs/structPaDeviceInfo.html

A minimal fix would be to hard code known safe values (although safe values tend to change for different OS versions) A better approach would be to research safe values using a test app that tests different buffer sizes (say using a guided binary search).

Close when these are all closed: #201, #202, #203, #205 (see Resolution criteria below)

Related tickets:

WMME - see Ticket #80
> #80 PA/WMME PA recommended deviceInfo->default*Latency values need review

DirectSound - see Ticket #122
> #122 PA/!DirectSound recommended deviceInfo->default*Latency values are (higher than necessary)

WASAPI - Dmitry says OK

ALSA - see Ticket #39, Dmitry says OK, check and maybe close it.
> #39 PA/ALSA PA recommended deviceInfo->defaultOutputLatency will lead to bad pops

!CoreAudio - see Ticket #175
> #175 PA/CoreAudio recommended deviceInfo->default*Latency is 0

What about other host APIs?

Note that the default latency values may interact with the way internal native buffer sizes are chosen. So this ticket is related to ticket #98 concerning harmonising native buffer calculations. 

See also: BufferingLatencyAndTimingImplementationGuidelines

=== QA notes ===

examples/pa_devs.c can be used to list the default*Latency values. As a first step we should run this on all platforms and collate the results. This will allow us to confirm that all host APIs are reporting sane values.

The loopback test should have a mode where it tests each default latency value and ensures that audio operates with no glitches (possibly with a range of buffer sizes and sample rates).

Providing "better" default values on some platforms is dependent on conducting a broad survey of workable latency values. Possibly using a loopback automated test instead of the manual test procedure used for WMME in ticket #185, DirectSound #186. See #204

Testing considerations:
	- defaults could be too high
	- defaults could be too low (glitches)
	- defaults could be different with different hardware / os version / user-configured topology
	- testing could be done at at different CPU loads

We can test whether the values are non-zero. 
	- we can audit the code to see how the values are derived. if they're hardwired they're always going to be non-zero
	- we can always test on specific machines

On specific machines and host APIs we can test whether the default values cause glitches
	- output can be tested manually by user audition
	- input can be reliably tested with loopback test	

We can manually inspect the default latencies for value (perhaps by graphing them) and from this make an assessment about whether the values are valid.


=== Resolution criteria ===

This ticket will be closed when the following three conditions are met:

1. All host APIs return non-zero values for deviceInfo->default*Latency (Covered by tickets #201, #202)
2. Default latency values produce non-glitching audio with each host API on some set of machines. At a minimum on our developer machines, ideally on a more broadly tested set of machines. Minimum coverage would be all host APIs and all target OSes. For output this requires listening, for input it requires loopback. (Covered by ticket #203)
3. A code review of each host API indicates that the default latency values are computed sanely. Make sure there are no fixmes, comments or other source-level indications that things are incomplete. Ensure that default latency computations take into account our algorithm (which needs to be concisely specified for the code review). The method employed to determine default latencies for each host API should be documented on the wiki page as part of the code review. (Covered by ticket #205)

Ideally we would also fulfil this criteria, but we won't:

- Default latencies are in line with a large scale survey of workable latencies on each platform where the latency is not system supplied. There is now a ticket for this task #204. It isn't scheduled.

________________________________________________________________________________
Ticket #97 Comment 1
We need status on this issue for all host APIs.

I (rossb) will test WMME, DSound and ASIO. Someone else will need to test the others.

A test that checks that suggested latencies are non-zero would help.

________________________________________________________________________________
Ticket #97 Comment 2
Dmitry says:
> 2. Returning sane values in the recommended latency device info fields.
> WASAPI - ok, Alsa - ok, will check Jack.
http://music.columbia.edu/pipermail/portaudio/2010-September/010906.html

________________________________________________________________________________
Ticket #97 Comment 3
Phil to review which host APIs have issues

________________________________________________________________________________
Ticket #97 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #97 Comment 5
Raspberry Pi (ALSA) has default latency too low, #246

________________________________________________________________________________
Ticket #98 Description
Different host APIs interpret Pa_OpenStream suggestedLatency values differently. To some extent this is OK because it reflects the differences in buffering mechanisms. However, as much as possible we have decided that all host APIs should use similar calculations.

Close when #205 is closed. (see Resolution criteria below)

This is discussed in detail here: BufferingLatencyAndTimingImplementationGuidelines

Earlier discussion between Dmitry and Ross is archived here:
http://music.columbia.edu/pipermail/portaudio/2010-July/010681.html

Ross is reviewing WMME, DS and ASIO with regard to this ticket.

The current ASIO computations may be incorrect (see ticket #93)
> #93 PA/ASIO !SelectHostBufferSize() doesn't take user framesPerBuffer into account

This ticket is also related to the way default latency values are computed (see ticket #97)

This ticket is related to the way suggestedLatency==0 is interpreted (ticket #99)

ALSA, !CoreAudio etc will need to be reviewed once further progress is made on this ticket.

#182 PA/CoreAudio ignores Pa_OpenStream() suggestedLatency param

=== Resolution criteria ===

This ticket will be closed when the following two conditions are met:

- A review of native buffer size computation code has been undertaken, and the method used to compute host buffer sizes is concisely summarised on the wiki page for each host API.
- A visual inspection of the graphs created by patest_suggested_vs_streaminfo_latency appears consistent with our expectations (using WMME and DS as a guide).

Both of these tasks are part of code review ticket #205.


________________________________________________________________________________
Ticket #98 Comment 1
after a quick re-test with WMME it seems like it's better to use at least 3 buffers if possible (total latency with 2 buffers is higher than with 3 to get stable results).

I'm working on some code that tests different buffer values to see what works best.

here's a page that says KMixer uses 10ms buffers internally:
http://msdn.microsoft.com/en-us/library/ff536484(VS.85).aspx

http://www.microsoft.com/whdc/device/audio/default.mspx

________________________________________________________________________________
Ticket #98 Comment 2
Dmitry says:
> 3. Computation of buffering/buffer sizes based on suggested latency.
> For my application WASAPI and Alsa operate ok.

________________________________________________________________________________
Ticket #98 Comment 3
r1744 mostly resolves this for DirectSound, however in the case of full-duplex streams with fixed userFramesPerBuffer, the buffer adapter adds extra output latency equal to userFramesPerBuffer -- this extra latency is not taken into account when interpreting suggestedLatency. Therefore full duplex output currently reports userFramesPerBuffer more latency than requested.

________________________________________________________________________________
Ticket #98 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #99 Description
Some host APIs clamp the lowest latency to the low default latency or some other artificially high or safe value -- this make it impossible for the user to tweak down to the lowest technically achievable latency.

This ticket is about removing all such clamps. It is related to ticket #98 concerning computing buffer sizes from suggestedLatency values.

Close when these are all closed: #98, #205(see Resolution criteria below)

We decided that a 0 suggestedLatency means "use minimum implementable 
latency (i.e. double-buffer at framesPerBuffer or similar)." Note that this 
allows setting latency below the recommended low latency reported by the 
device in get device info

See: http://music.columbia.edu/pipermail/portaudio/2010-July/010681.html

Fixing this means making sure that implementations don't artificially clamp 
buffer sizes to recommended values, or any other tweaks like that. DS used to do this, now it is fixed. Ross will also review WMME and ASIO to make sure 
they conform. Someone(s) else will need to review the other implementations.

#182 PA/CoreAudio ignores Pa_OpenStream() suggestedLatency param

See also: BufferingLatencyAndTimingImplementationGuidelines


=== QA notes ===

One way to test this would be by reviewing the results form the patest_suggested_vs_streaminfo_latency test. When suggestedLatency is 0, reported stream latency (for output) should be duration(framesPerBuffer) + fixedLatency. The results from the test should be able to be automatically analysed to determine the fixed latency component and check that results for larger latencies are consistent with that.


=== Resolution criteria ===

This ticket will be closed when the following three conditions are met:

1. A code review has made a review of the codepaths involved in interpreting suggestedLatency and has established that there is no artificail clamping. This is part of the review criteria for #98 as well. See code review ticket #205
2. The code review and wiki method descriptions from ticket #98 make it clear that there is no systemic block to lowest latency. The summary of each algorithm should document what technical constraints in the algorithm determine the lowest achievable latency.
3. The results of the patest_suggested_vs_streaminfo_latency graphs are in line with the expected documented constraints from the previous point. Specifically: with an very small client framesPerBuffer (say 16  frames), latency should not usually be constrained at much higher than 16 frames. This check should be part of #205







________________________________________________________________________________
Ticket #99 Comment 1
I'm working  on WMME, DS and ASIO. I'm reviewing the code to see if the clamps are present.

________________________________________________________________________________
Ticket #99 Comment 2
Dmitry says:
> 1. Handling of 0 suggestedLatency value.
> WASAPI - ok, Alsa - ok, will check Jack.
http://music.columbia.edu/pipermail/portaudio/2010-September/010906.html

________________________________________________________________________________
Ticket #99 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #100 Description
Currently, PortAudio's int<->float<->int sample conversion functions maximize dynamic range before clipping. This has the result that they are not bit-perfect when passing input to output. This is the result of a necessary trade off between clipping full range values, and transparancy. We last discussed it here:
http://music.columbia.edu/pipermail/portaudio/2009-December/009683.html

Bjorn wrote two blog posts about it:
http://blog.bjornroche.com/2009/12/int-float-int-its-jungle-out-there.html
http://blog.bjornroche.com/2009/12/linearity-and-dynamic-range-in-int.html

Basically: different software does it differently, and we are not alone in our approach.

That said, for audio i/o, the bit-transparent approach taken by CoreAudio may make more sense. We could also consider providing a flag to select the preferred scaling factor (although I'm not sure it's worth it).

We need to decide on this.






________________________________________________________________________________
Ticket #100 Comment 1
#35 is blocked waiting for this

________________________________________________________________________________
Ticket #100 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #101 Description
Currenty PA/DirectSound evaluates audio callbacks inside a Windows multimedia timer callback. This can create problems in some situations because Windows serialises all timer callbacks onto one thread. 

The attached patch from Dmitry (diff against 23/09/2010) provides the option to use a separate thread triggered by an Event object instead of doing PA callbacks in the MM timer thread.

________________________________________________________________________________
Ticket #101 Comment 1
resolved by r1683

________________________________________________________________________________
Ticket #101 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #102 Description
PA/CoreAudio doesn't handle sample rate change notifications correctly while streams are running. Especially if it's using a sample rate converter object.

Correct CoreAudio usage is discussed here:
http://osdir.com/ml/coreaudio-api/2010-09/msg00010.html

________________________________________________________________________________
Ticket #102 Comment 1
"Crash" should be described a bit. What exactly happens?

________________________________________________________________________________
Ticket #102 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #103 Description
Blocking i/o buffer size computations in OpenStream() don't take account of the user framesPerBuffer as a hint (they always use the ASIO default buffer size).

If our ring buffer allowed non-power-of-two sizes we could more closely match blocking i/o latency with the user suggested latency.

This is a refinement to the work done to implement ASIO blocking i/o (Ticket #57)

________________________________________________________________________________
Ticket #103 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #104 Description
PA/ASIO IsFormatSupported doesn't validate input/outputParameters->hostApiSpecificStreamInfo

API-specific parameters can be passed but the implementation doesn't validate them. It should. And return errors if there's a problem.

________________________________________________________________________________
Ticket #104 Comment 1
just call ValidateAsioSpecificStreamInfo?

________________________________________________________________________________
Ticket #104 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #105 Description
In many cases should be performing the following mappings from ASIO error codes to PortAudio error codes:

ASE_NoMemory => paInsufficientMemory
ASE_NotPresent => paDeviceUnavailable

and possibly:

ASE_HWMalfunction => paDeviceUnavailable

________________________________________________________________________________
Ticket #105 Comment 1
You can find all the ASIO functions in pa_asio.c for searching for the ones that start with ASIO (all caps). Mostly you'll see the code maps them to paUnanticipatedHostApiError. Probably a helper function should be used to map the error codes and set up the host-specific error text where necessary.

________________________________________________________________________________
Ticket #105 Comment 2
There is some contention about whether this is a defect or an enhancment. It is really non-conformance to the specification. In practical terms it is much better if host APIs avoid returning paUnanticipatedHostApiError where ever possible -- it allows clients to return much more user friendly error messages.

________________________________________________________________________________
Ticket #105 Comment 3
Reduced priority to the same as the DSound ticket

________________________________________________________________________________
Ticket #105 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #106 Description
It is possible for an ASIO device to soecify different sample formats for different audio channels (for example a device may have 24 bit analog i/o and 16 bit SPDIF i/o).

PortAudio currently assumes that all channel sample formats are the same as the first channel. This is a reasonable assumption for most but not all hardware. Need to find hardware that does have multiple sample formats to test this.

Fixing this may require the block processor to maintain per-channel conversion functions - could get nasty.

________________________________________________________________________________
Ticket #106 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #107 Description
The ASIO native callback function has a "processNow" aka "directProcess" boolean parameter indicating whether the client should process buffers immediately or defer processing to a separate thread.

PortAudio ignores this parameter and always performs processing in the ASIO buffer switch callback. It is unclear whether this is always appropriate.

________________________________________________________________________________
Ticket #107 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #108 Description
The following ASIO driver notifications are ignored in asioMessages() in pa_asio.cpp:

- kAsioBufferSizeChange
- kAsioResetRequest
- kAsioResyncRequest
- kAsioLatenciesChanged

There have recently been reports on the mailing list of hangs after kAsioResetRequest so we should review whether we should be taking specific action in any of these callbacks.

________________________________________________________________________________
Ticket #108 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #109 Description
ASIOInit takes a "systemSpecific" parameter that's a Window handle on Windows. PaAsio_ShowControlPanel() allows the caller to specify the window handle, while Pa_OpenStream() always passes GetDesktopWindow() on Windows. This means that stream has to be closed and reopened to call PaAsio_ShowControlPanel() with the correct parameter.

One fix for this would be to allow a host-api-specific stream parameter for passing a window handle to Pa_OpenStream(). As the comment in PaAsio_ShowControlPanel says:

 /*
        In theory we could proceed if the currently open device was the same
        one for which the control panel was requested, however  because the
        window pointer is not available until this function is called we
        currently need to call ASIOInit() again here, which of course can't be
        done safely while a stream is open.
    */

________________________________________________________________________________
Ticket #109 Comment 1
Old TODO item was:  provide an asio-specific method for setting the systems specific value (aka main window handle) - check that this matches the value passed to PaAsio_ShowControlPanel, or remove it entirely from PaAsio_ShowControlPanel. - this would allow PaAsio_ShowControlPanel to be called for the currently open stream (at present all streams must be closed).

________________________________________________________________________________
Ticket #109 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #110 Description
The PA/ASIO implementation doesn't have a working mechanism to detect buffer slip conditions. There are a number of #ifdefed-out attempts at a solution in the buffer swap callback but none of them have proved effective in all cases.

We're open to suggestions on how to improve this.

________________________________________________________________________________
Ticket #110 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #111 Description
No reason for this function to be named differently from the ASIO api version. Also usually when PA talks about latencies they are measured in seconds, not frames. This function returns frames.


________________________________________________________________________________
Ticket #111 Comment 1
Fixed in changeset r1667

________________________________________________________________________________
Ticket #111 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #112 Description
Consider whether functions which dither but don't clip should exist, V18 automatically enabled clipping whenever dithering was selected. Perhaps we should do the same.

This would have the advantage that it would eliminate many of the unimplemented converters in ticket #35

________________________________________________________________________________
Ticket #112 Comment 1
Related to:

#35 -- some conversion functions are not implemented in pa_converters.c

________________________________________________________________________________
Ticket #112 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #113 Description
[Trac: Originally assigned to none]

The CPU load smoothing filter used by PA uses hard coded coefficients. This means that the amount of smoothing varies depending on the callback buffer size.

Dynamically calculate the coefficients used to smooth the CPU Load Measurements over time to provide a uniform characterisation of CPU Load independent of rate at which PaUtil_BeginCpuLoadMeasurement / PaUtil_EndCpuLoadMeasurement are called.

________________________________________________________________________________
Ticket #113 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #114 Description
[Trac: Originally assigned to none]

Pa_GetErrorText currently returns a generic error message "Unanticipated host error" when the host api returns paUnanticipatedHostError. More detailed info is available in Pa_GetLastHostErrorInfo() but we could return the host error string from Pa_GetErrorText too. It would improve usability and ease debugging.

________________________________________________________________________________
Ticket #114 Comment 1
The only problem I can think of with this is that it makes Pa_GetErrorText non-reentrant. However we don't make threading guarantees and Pa_GetLastHostErrorInfo() already has this problem.

________________________________________________________________________________
Ticket #114 Comment 2
Use a static char buffer inside Pa_GetErrorText to assemble an error message that includes the host error. Something like:

Untested code, Pa_GetErrorText() in pa_front.c

{{{#!C

case paUnanticipatedHostError:

const PaHostErrorInfo *hostErrorInfo = Pa_GetLastHostErrorInfo();
if( hostErrorInfo ){
	PaHostApiIndex hostApiIndex = Pa_HostApiTypeIdToHostApiIndex(hostErrorInfo->hostApiType);
	if( hostApiIndex >= 0 ){
		const PaHostApiInfo *hostApiInfo = Pa_GetHostApiInfo( hostApiIndex );
		if( hostApiInfo ){

			static s[1000]; /* static so it persists after we return */
			snprintf( s, 1000, "Unanticipated host error: %s (%d): %s",
					hostApiInfo->name, hostErrorInfo->errorText, hostErrorInfo->errorCode );
			result = s;
			break;
		}
	}
}

/* if any of the above fails, we just return a generic message */
result = "Unanticipated host error";
break;

}}}

Of course you also need to work out how to test it properly :-)


 

________________________________________________________________________________
Ticket #114 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #115 Description
Review whether?Pa_CloseStream()?should call the host API implementation's CloseStream function if aborting the stream returns an error code.

At the moment the tear down semantics are underdefined and an error in an AbortStream function could leave things in a bad state.

This is the usual cleanup error handling business similar to  throwing exceptions from C++ destructors -- you shouldn't do it. We need to have a clear policy on this.

________________________________________________________________________________
Ticket #115 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #116 Description
Currently calls to Pa_ReadStream() and Pa_WriteStream() with frames=0 just return paNoError. There is a case to say that these calls should return an underflow or overflow error if it has occurred.

________________________________________________________________________________
Ticket #116 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #117 Description
The following is in pa_win_wmme.c

ReadStream()
REVIEW: consider what to do if the input overflows. do we requeue all of the buffers? should we be running a thread to make sure they are always queued?

WriteStream()
REVIEW: consider what to do if the output underflows. do we requeue all the existing buffers with zeros? should we run a separate thread to keep the buffers enqueued at all times?

________________________________________________________________________________
Ticket #117 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #118 Description
[Trac: Originally assigned to none]

The buffer processor functions on pa_process.c do the work of moving data from callback buffers to the host. The code here has not been extensively optimised or benchmarked.

Possibly optimisations include:

- Consider cache tilings for intereave<->deinterleave.

- don't allocate temp buffers for blocking streams unless they are needed. At the moment they are needed, but perhaps for host APIs where the implementation passes a buffer to the host they could be used.

- bypass conversions alltogether when channels are known to be zero.


________________________________________________________________________________
Ticket #118 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #119 Description
One of the things that pa_process does is adapt a single host callback to multiple user callbacks when buffer size constraints dictate. Stream flag events such as underflow and overflow occur at the host buffer level and it is unspecified how such events should map to user callbacks when there is not a one-to-one correspondence. this needs to be fixed.

In summary: Specify and implement some kind of logical policy for handling the underflow and overflow stream flags when the underflow/overflow overlaps        multiple user buffers/callbacks.

________________________________________________________________________________
Ticket #119 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #120 Description
Provide support for priming the buffers with data from the callback. The client interface is implemented through PaUtil_SetNoInput() which sets bp->hostInputChannels[0][0].data to zero. However this is currently only implemented in NonAdaptingProcess() so host APIs that need buffer size adaption can't currently implement paPrimeOutputBuffersUsingStreamCallback correctly.

It shouldn't be needed for AdaptingInputOnlyProcess() (no priming should ever be requested for AdaptingInputOnlyProcess()).
        
Not sure if additional work should be required to make it work with AdaptingOutputOnlyProcess, but it definitely is required for AdaptingProcess.

________________________________________________________________________________
Ticket #120 Comment 1
Do any implementations actually need this functionality? I'm not sure ASIO or CoreAudio could support buffer priming anyway. Moved out of RC1

________________________________________________________________________________
Ticket #120 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #121 Description
- timeInfo.inputBufferAdcTime is not implemented at all. It is always zero.
- timeInfo.outputBufferDacTime calculation uses an "outputLatency" value that is only computed when the stream takes input (!)

________________________________________________________________________________
Ticket #121 Comment 1
resolved by r1774

________________________________________________________________________________
Ticket #121 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #122 Description
in pa_win_ds.c:
deviceInfo->defaultLowInputLatency etc used to all return zero. r1744 fixed that.

deviceInfo->defaultLowInputLatency etc now report rather high latencies that were last reviewed a long time ago. Ticket #186 proposes to resolve this by running tests on a variety of machines to determine workable latency settings.

META TICKET: #97 [META] Some PA recommended deviceInfo->default*Latency values are bad or unimplemented

________________________________________________________________________________
Ticket #122 Comment 1
Updated to reflect that r1744 fixed the defect with all DS default latency values returning zero.

________________________________________________________________________________
Ticket #122 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #123 Description
The DirectSound implementation of IsFormatSupported contains a comment noting that a number of checks are unimplemented. This may result in DirectSound reporting that formats are supported that aren't actually supported by the hardware.

This includes:

- checking that sample rate is supported
- checking that channel counts are supported (can be implemented now that we have WDM based channel-count info)

The code should be reviewed and any unimplemented checks or assumptions clearly documented. At present the code simply has a generic "IMPLEMENT ME" list from the skeleton code.

________________________________________________________________________________
Ticket #123 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #124 Description
If you return paAbort from a DirectSound PA callback the buffers will still be flushed before the stream deactivates, as if paComplete had been used.

________________________________________________________________________________
Ticket #124 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #125 Description
The PA_DS_SET_LAST_DIRECTSOUND_ERROR macro defined in pa_win_ds.c doesn't get an error string from the operating system. It just calls PaUtil_SetLastHostErrorInfo with "DirectSound error".

This should be implemented with DXGetErrorString() see:
http://msdn.microsoft.com/en-us/library/microsoft.directx_sdk.errorhandling.dxgeterrorstring(VS.85).aspx
http://www.eggheadcafe.com/software/aspnet/29501886/howto-use-formatmessage-for-wmsdk-error-codes.aspx

There is code in pa_win_wmme.c that calls PaUtil_SetLastHostErrorInfo that may be a useful basis.

________________________________________________________________________________
Ticket #125 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #126 Description
PA/DirectSound currently uses "Primary Sound Capture Driver" and "Primary Sound Driver" as the default input and output devices respectively. These are the devices with NULL GUIDs and are presumably also the devices configured in the system control panel.

Code has been added to PA/WMME that retrieves the preferred devices from the system. We could use the same mechanism in DirectSound.

We can retrieve default devices using the DRVM_MAPPER_PREFERRED_GET functions used in the wmme api these wave device ids can be aligned with the directsound devices either by retrieving the system interface device name using DRV_QUERYDEVICEINTERFACE or by using the wave device id retrieved in KsPropertySetEnumerateCallback.

________________________________________________________________________________
Ticket #126 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #127 Description
PA/DSound doesn't map HRESULT return values from system functions to PaErrors very often, usually it just returns paUnanticipatedHostError. For things like out of memory conditions and cases where the documentation for an API indicates that errors can be returned we should be mapping hresults correctly.

audit handling of DirectSound result codes - in many cases we could convert a HRESULT into a native portaudio error code. Standard DirectSound result codes are documented at msdn.

________________________________________________________________________________
Ticket #127 Comment 1
Everywhere a HRESULT is used you can check to see if it is translated into a portaudio error. If so, review the MSDN documentation for the API function and consider whether there are possible errors that need to be mapped to PortAudio errors. Things like devices being unavailable and out-of-memory conditions are obvious candidates.

________________________________________________________________________________
Ticket #127 Comment 2
Assigned to RC1 (like the ASIO one already is).

________________________________________________________________________________
Ticket #127 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #128 Description
According to comments in pa_win_ds we shouldn't be calling CoUninitialize under some conditions. pa_asio (for example) doesn't follow the rules. We should probably move COM initialization to global functions in pa_win_util.c and call them from all implementations. pa_win_ds.c says:

/*
    If COM is already initialized CoInitialize will either return
    FALSE, or RPC_E_CHANGED_MODE if it was initialised in a different
    threading mode. In either case we shouldn't consider it an error
    but we need to be careful to not call CoUninitialize() if 
    RPC_E_CHANGED_MODE was returned.
*/

HRESULT hr = CoInitialize(NULL);
if( FAILED(hr) && hr != RPC_E_CHANGED_MODE )
    return paUnanticipatedHostError;

if( hr != RPC_E_CHANGED_MODE )
    comWasInitialized = 1;

________________________________________________________________________________
Ticket #128 Comment 1
review of current status:

pa_asio.cpp just calls CoInitialize(0) without checking for errors. call is are made withenver an ASIO driver is loaded. Uninitialization ignores result of CoInitialize.

pa_win_ds.c checks error results of CoInitialize(0). call is made during host API initialization. doesn't call CoUninitialize() if the result is RPC_E_CHANGED_MODE

pa_win_wasapi.c calls CoInitializeEx(NULL, COINIT_APARTMENTTHREADED) (same thing as CoInitialize) during host API initialization. It doesn't call CoUninitialize() if the result is RPC_E_CHANGED_MODE

COM documentation implies that CoUninitialize should only be called with CoInitialize() succeeds. It's not clear how this is supposed to work with CoInitialize returns RPC_E_CHANGED_MODE

A comment posted here (doc for CoInitializeEx()):
http://msdn.microsoft.com/en-us/library/ms695279(VS.85).aspx

says: "Call CoUninitialize() if S_OK or S_FALSE is returned. Do not if any other error including RPC_E_CHANGED_MODE is returned."

________________________________________________________________________________
Ticket #128 Comment 2
An alternative resolution would be to add a global PaUtil_InitializeOs()/PaUtil_UninitializeOs() functions that are called by PA front.

________________________________________________________________________________
Ticket #128 Comment 3
r1679 resolves this:

Factored routines for COM initialisation out into a separate module. This fixes some bugs with ASIO COM uninitialization in corner cases and generally cleans things up.

This change introduces a new source file pa_win_coinitialize.c Until the build files are updated you'll need to manually add this to your projects.

Note that the changes may break existing code if PA/ASIO is called from multiple threads without initializing COM. PA requires that you initialize COM yourself on other threads if you call PA functions from a thread other than the one that called Pa_Initialize().

Is someone else able to handle this for the MSVC projects (Robert?) and configure/Makefile (?)

The following host APIs use these routines: DirectSound, ASIO, WASAPI

________________________________________________________________________________
Ticket #128 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #129 Description
implement host api specific extension to set i/o buffer sizes in frames

BLOCKS:

#186 make a patest_dsound_find_best_latency_params.c and use to gather viable default latency values

________________________________________________________________________________
Ticket #129 Comment 1
resolved by r1794

________________________________________________________________________________
Ticket #129 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #130 Description
There is code marked TODO to handle input buffer overflow. As a result, paInputOverflow flag is never set.

________________________________________________________________________________
Ticket #130 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #131 Description
This is related to not handling input overflow I think. See ticket #130

________________________________________________________________________________
Ticket #131 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #132 Description
Consider using PA_USE_WMME etc instead of PA_NO_WMME to enable API support in pa_win_hostapis.c. This is what the Unix version does, we should be consistent.

Making this change will close-out #47 too.

The change involves:
- renaming the preprocessor variables in pa_win_hostapis.c
- modifying all build files (msvc, configure) to use the new flag formulation (grep for the old flags and work out the correct list) 

________________________________________________________________________________
Ticket #132 Comment 1
Note how the tutorial defines how one has to turn off ASIO and other APIs.
http://www.portaudio.com/trac/wiki/TutorialDir/Compile/Windows

________________________________________________________________________________
Ticket #132 Comment 2
It seems like we have consensus to make the change to PA_USE_XXX. We just need to decide when (before/after SS2?)

________________________________________________________________________________
Ticket #132 Comment 3
Noted that making this change will close-out #47 too.

________________________________________________________________________________
Ticket #132 Comment 4
LIST-REVIEW results seem conclusive, we'll do it:
+1 from Robert Bielik and Thomas Blom
Phil points out:
> +1 Absolutely. I had to take special steps to disable ASIO when I wanted 
> a simple build.  This makes it harder for first time users.  Note how it 
> complicates this tutorial.

rossb says:
I think it's too risky to do this before SS2, so I've scheduled it for M1

________________________________________________________________________________
Ticket #132 Comment 5
removed STARTER tag now that Rob's accepted it.

________________________________________________________________________________
Ticket #132 Comment 6
Richard Ash wrote:
> I'll make sure the configure scripts cope if someone lets me know when
> this change is coming (and/or what the names end up being).

________________________________________________________________________________
Ticket #132 Comment 7
The new defines will be: PA_USE_ASIO, PA_USE_WMME, PA_USE_DIRECTSOUND, PA_USE_WASAPI and PA_USE_WDMKS. Also, to ease exclusion of ASIO, the compilation of ASIO SDK is wrapped in two added CPP files, so no change is required of the VS project settings other than removing PA_USE_ASIO. Also, a new project will be added (for static library) as well as a ReleaseMinDependency configuration that removes dependency on MS runtime libraries.

________________________________________________________________________________
Ticket #132 Comment 8
Dmitry Kostjuchenko wrote:

To my view this change will affect everybody who compiles PA in
non-standard way. To preserve compatibility I propose to do something
like this, in one of internal PA headers (pa_hostapi.h for example):

#ifdef PA_NO_SOMETHING
    #pragma message("PortAudio: using obsolete PA_NO_SOMETHING,
consider PA_USE_SOMETHING instead.")
    #undef PA_USE_SOMETHING
#else
    #define PA_USE_SOMETHING
#endif

So, when project still uses PA_NO_SOMETHING, during compilation
compiler will issue a message, like this in MSVC:

------------------
1>PortAudio: using obsolete PA_NO_SOMETHING, consider PA_USE_SOMETHING instead.
------------------

________________________________________________________________________________
Ticket #132 Comment 9
(The above) Will unfortunately be a problem with new projects (which do use PA_USE_SOMETHING): If you really don't want to use that SOMETHING, then
the above scheme will define PA_USE_SOMETHING (since PA_NO_SOMETHING is undefined), but since I didn't define PA_USE_SOMETHING from
the start, the end result will not be what I want.

The only way I see it is to enforce setting PA_USE_SOMETHING to a value of 0 or 1 always, i.e. (the code below would reside in pa_hostapi.h)

#ifdef PA_NO_SOMETHING
#pragma message("Portaudio: PA_NO_SOMETHING is deprecated")
#ifndef PA_USE_SOMETHING
#pragma message("Portaudio: PA_USE_SOMETHING not defined, using PA_USE_SOMETHING=0")
#define PA_USE_SOMETHING 0
#endif
#endif

#ifndef PA_USE_SOMETHING
#pragma message("Portaudio: PA_USE_SOMETHING not defined, using PA_USE_SOMETHING=1 (default)")
#define PA_USE_SOMETHING 1
#endif

Then where PA_USE_SOMETHING is used, we do:

#if PA_USE_SOMETHING

instead of

#ifdef PA_USE_SOMETHING 

________________________________________________________________________________
Ticket #132 Comment 10


Feedback on latest diff (pa_ticket_#132_cmake.diff)

- CMakeLists.txt should have instructions at top with how to run it.

- pa_hostapi.h: Not sure what's going on with PA_USE_SOMETHING since earlier diff (pa_ticket_#132.diff). you seem to be assuming that it's 0 or 1 (use of #if not #ifdef in impl files) but pa_hostapis.h diff no longer contains code to default it to zero if it's undefined.


- Comment on latest pa_ticket_#132.diff: Not sure we should be warning if PA_USE_SOMETHING is undefined. I don't think gcc has #pragma message() .. you could check. It has #warning though. 

- rename:
	src/hostapi/asio/pa_asiosdk_code1.cpp -> src/hostapi/asio/pa_asiosdk_asiolist.cpp
	src/hostapi/asio/pa_asiosdk_code2.cpp -> src/hostapi/asio/pa_asiosdk_asiodrivers.cpp

	move to /build/msvc too?


- build/msvc/readme.txt: 

- probably not worth saying "NOTE: MSVC6 support is dropped." in the readme. It's not like we're dropping support for building on msvc6, we're just not shipping a project file.

- processor pack reference i think needs to be annotated with "(for MSVC6)"

- probably best to add your name to the readme as well as davids.. if you feel like it. Or at least delete David's email address.


________________________________________________________________________________
Ticket #132 Comment 11
Replying to [comment:15 rossb]:
> 
> 
> Feedback on latest diff (pa_ticket_#132_cmake.diff)
> 
> - CMakeLists.txt should have instructions at top with how to run it.

Yes, will be included.

> - pa_hostapi.h: Not sure what's going on with PA_USE_SOMETHING since earlier diff (pa_ticket_#132.diff). you seem to be assuming that it's 0 or 1 (use of #if not #ifdef in impl files) but pa_hostapis.h diff no longer contains code to default it to zero if it's undefined.

Sorry, my bad, disappeared when reverting for doing the CMake file. Those are now back acc. to your idea.

> - Comment on latest pa_ticket_#132.diff: Not sure we should be warning if PA_USE_SOMETHING is undefined. I don't think gcc has #pragma message() .. you could check. It has #warning though. 

Hmm... I think we'll now settle on not warning, since its a bit cumbersome to do the compile warnings work on all platforms.

> - rename:
> 	src/hostapi/asio/pa_asiosdk_code1.cpp -> src/hostapi/asio/pa_asiosdk_asiolist.cpp
> 	src/hostapi/asio/pa_asiosdk_code2.cpp -> src/hostapi/asio/pa_asiosdk_asiodrivers.cpp
> 
> 	move to /build/msvc too?

With the CMake solution, those files are no longer needed.

> - build/msvc/readme.txt: 
> 
> - probably not worth saying "NOTE: MSVC6 support is dropped." in the readme. It's not like we're dropping support for building on msvc6, we're just not shipping a project file.
> 
> - processor pack reference i think needs to be annotated with "(for MSVC6)"

Oki.

> - probably best to add your name to the readme as well as davids.. if you feel like it. Or at least delete David's email address.

Ok, I'll add my name/email at bottom.

________________________________________________________________________________
Ticket #132 Comment 12
New CMake diff added which adds support for autoconfig of ASIO SDK and Direct X SDK if they are present + fixing the stuff Ross mentions above. The CMakeLists.txt file refers to a tutorial under http://www.portaudio.com/trac/wiki/TutorialDir/Compile/CMake which thus should be created when this patch is commited.

________________________________________________________________________________
Ticket #132 Comment 13


Two things:

1. comment at line 52 of src/common/pa_hostapi.h implies that the PA_USE_* macros need to be defined. They don't. I suggest:

{{{
/**
  The PA_NO_* host API macros are now deprecated in favor of PA_USE_* macros.
  PA_USE_* indicates whether a particular host API will be initialized by PortAudio.
  An undefined or 0 value indicates that the host API will not be used. A value of 1 
  indicates that the host API will be used. PA_USE_* macros should be left undefined 
  or defined to either 0 or 1.

  The code below ensures that PA_USE_* macros are always defined and have value
  0 or 1. Undefined symbols are defaulted to 0. Symbols that are neither 0 nor 1 
  are defaulted to 1.
*/
}}}


2. #error at  src/hostapi/dsound/pa_win_ds.c says "Portaudio: PA_USE_WMME=0/1 not defined". This should probably be revised to indicate that it's an internal error. Something like:

{{{
"Portaudio internal error: PA_USE_WMME=0/1 not defined. pa_hostapi.h should ensure that it is."
}}}

Aside from that it looks good to me.

________________________________________________________________________________
Ticket #132 Comment 14
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #133 Description
The Windows implementation of PaUtil_GetTime (used for a number of timing operations in PA, including stream time in some implementations) uses QueryPerformanceCounter() to provide high-resolution timing information.

There is a documented issue with QueryPerformanceCounter() skipping forward due to a hardware bug on some systems:
"Performance counter value may unexpectedly leap forward"
http://support.microsoft.com/kb/274323

The KB artilce above recommends a workaround that involves checking for skips using GetTickCount.

We should consider doing this (but possibly only for hardware where it is an issue).

There is some example code here:
http://www.koders.com/cpp/fidE7FAB1E8A146083D08E26073544DD864B0EAFA6E.aspx



________________________________________________________________________________
Ticket #133 Comment 1
Given that the KB article says the issue is only on some PCI-ISA bridge hardware, and nothing like that is manufactured today I'm not sure how important this issue is for us.

________________________________________________________________________________
Ticket #133 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #134 Description
pa_win_wmme.c:
AdvanceToNextInputBuffer() and AdvanceToNextOutputBuffer() functions are used by both blocking read-write streams and callback streams. Both functions use the PA_MME_SET_LAST_WAVE*_ERROR macros to set error text. However the error text should only be set when we're in the client's thread (ie for blocking read/write streams) not when we're in a callback thread.

One possible fix would be to pass a flag that indicates which thread context we're in.

The bug is only triggered if windows API functions waveInAddBuffer() or waveOutWrite() return an error (a relatively likely occurence).

________________________________________________________________________________
Ticket #134 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #135 Description
PA/WMME timeInfo.inputBufferAdcTime is not implemented

________________________________________________________________________________
Ticket #135 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #136 Description
If the paPrimeOutputBuffersUsingStreamCallback callback flag is used, PortAudio doesn't set the callback timeInfo at all.

This is an edge case, but PA really should handle this correctly.

inputBufferAdcTime -- always zero (there is not input buffer during stream priming)
currentTime -- time before invoking callback
outputBufferDacTime -- currentTime + anticipated latency?

It is difficult to accurately compute outputBufferDacTime because this is dependent on when PA actually starts the stream (which is done after all the buffers have been filled and is dependent on how long the client takes to fill the buffers). That means outputBufferDacTime would always be a guess -- perhaps we should just set it to zero?







________________________________________________________________________________
Ticket #136 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #137 Description
StartStream() doesn't seem to clean up after itself properly if there is an error. It needs to be reviewed to make sure the stream state is kept valid if an error condition is encountered. Also check for potential resource leaks.

All other functions in this module should be reviewed for the same type of errors -- since if there is one case of this there may be more.

________________________________________________________________________________
Ticket #137 Comment 1
You could study the StartStream functions in other implementations to understand how they keep track of what they've allocated and make sure they deallocate it at the end.

________________________________________________________________________________
Ticket #137 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #138 Description
If a client callback returns paComplete/paAbort while StartStream is priming the stream (because the user specified paPrimeOutputBuffersUsingStreamCallback) then it is unclear if paComplete/paAbort are handled correctly.

It looks like all host buffers are always filled in StartStream, and that the callback thread is started. This _will_ result in audio being played correctly if the stream priming callback returns paComplete. So the bug with paComplete is that PA will enqueue silence buffers: if the sound is very short, more than enough WMME buffers may be queued with the host.

The main issue is that paAbort will cause the same behavior (more or less) as paComplete, rather than StartStream returning immediately (possibly there should be an aborted error code).

________________________________________________________________________________
Ticket #138 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #139 Description
Currently PA/WMME always uses 16 bit host buffers internally.

InitializeWaveHandles() could be updated to try a preferred format and fall back to 16 bit if necessary (it already tries waveformatex before waveformat. it could try waveformatex(preferred) then waveformatex(16) then waveformat(16).

Not sure exactly what else would need to change to support other buffer formats.

We'd want to support linear integer formats. not sure we need to support float since we probably want to use our own floating point converters rather than windows ones.

________________________________________________________________________________
Ticket #139 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #140 Description
PA/WMME doesn't implement paInputUnderflow, paOutputOverflow streamCallback statusFlags.

________________________________________________________________________________
Ticket #140 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #141 Description
The PA specification is unclear about exactly what returning paAbort from a callback means. There are various possible interpretations/implementations. What is possible is often determined by the platform, so we will never have complete consistency, but abort should probably mean "abort as quickly as possible". Here are some options:

1. do the same as paComplete (ie play out all remaining data)
2. immediately stop queuing more data with the native api. mark the stream as finished/inactive.
3. as for (2) but also tell the native api to stop immediately/abort 

In PA/WMME we could call waveOutReset from the callback to effect (3). At present we don't.

________________________________________________________________________________
Ticket #141 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #142 Description
Places are marked in the code where paNeverDropInput could be actioned but it is not currently implemented.

________________________________________________________________________________
Ticket #142 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #143 Description
At present, if code in a PortAudio callback thread fails for some reason, there is no way for a host API implementation to report this condition to the user. The API design assumes PortAudio can never fail asynchronously in this way.

This issue can arise in any PA implementation that runs its own callback thread and calls system functions that can fail/return an error.

At present the state of a PA stream in such error conditions is undefined.

________________________________________________________________________________
Ticket #143 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #144 Description
r1537 added a new implementation of PaStreamCallbackTimeInfo

The implementation is incomplete:

1. inputBufferAdcTime is not computed correctly for all cases (eg full duplex with/without ring buffer). 

2. This patch needs to be reviewed for the case where device and AUHAL sample rates differ (ie SRC is used) and if input and output sample rates differ. 

See FIXMES in the patch:
http://www.portaudio.com/trac/changeset?reponame=&new=1537%40portaudio/trunk/src/hostapi/coreaudio/pa_mac_core.c&old=1483%40portaudio/trunk/src/hostapi/coreaudio/pa_mac_core.c

________________________________________________________________________________
Ticket #144 Comment 1
I think it would be a good idea to clean up / refactor the logic in the ioProc, possibly with separate io procs for different input/output duplex. At the moment there is a lot of interleaved and dependent if/else logic that makes things very hard to follow.

________________________________________________________________________________
Ticket #144 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #145 Description
We need someone to go through and run/compile each test on each platform and check that it runs correctly with each host API.

The comments below notes that the tests should be made on Linux with native ALSA hardware and also with ALSA/PulseAudio.
		
This ticket has a couple of purposes:
- Ensure that all of the tests compile and run
- Validate that all platform/host APIs have a certain baseline level of functionality and stability, which approximates that of V18 (since most of the tests have been around since V18 in some form).

=== Resolution criteria ===

This ticket will be closed when the following two conditions are met:

1. Each test and example compiles and executes on each platform with each applicable host API.
2. In every case, either the test must run correctly, or any issues found must be added as new TRAC tickets and listed in the table below.

When a ticket has been run successfully with a given host API put PASS in that cell. If there were issues, create a new ticket and put the ticket number in that cell. Tests that aren't relevant for a particular host API should be labled NA.

/examples

||= test name =||= 	alsa =||= 	asihpi =||= 	asio =||= 	coreaudio =||= 	dsound =||= 	jack =||= 	oss =||= 	wasapi =||= 	wdmks =||= 	wmme =||
|| pa_devs.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| pa_fuzz.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_pink.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_read_write_wire.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_record.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_saw.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_sine.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_wmme_ac3.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_write_sine.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_write_sine_nonint.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| paex_mono_asio_channel_select.c ||	NA	||		NA	||		?		||		NA		||	NA	||	NA		||	NA	||	NA	||	NA	||	NA	||
|| paex_wmme_surround.c ||	NA	||		NA	||		NA		||		NA		||	NA	||	NA		||	NA	||	NA	||	NA	||	?	||

/tests

||= test name =||= 	alsa =||= 	asihpi =||= 	asio =||= 	coreaudio =||= 	dsound =||= 	jack =||= 	oss =||= 	wasapi =||= 	wdmks =||= 	wmme =||
|| patest1.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_buffer.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_callbackstop.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_clip.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_converters.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_dither.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_dsound_find_best_latency_params.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_dsound_low_level_latency_params.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_dsound_surround.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_hang.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_in_overflow.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_jack_wasapi.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_latency.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_leftright.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_longsine.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_many.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_maxsines.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_mono.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_multi_sine.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_out_underflow.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_prime.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_read_record.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_ringmix.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_sine8.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_sine_channelmaps.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_sine_formats.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_sine_srate.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_sine_time.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_start_stop.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_stop.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_stop_playout.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_suggested_vs_streaminfo_latency.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_sync.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_timing.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_toomanysines.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_two_rates.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_underflow.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_wire.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_wmme_find_best_latency_params.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_wmme_low_level_latency_params.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||
|| patest_write_stop.c ||	?	||		?	||		?		||		?		||	?	||	?		||	?	||	?	||	?	||	?	||



________________________________________________________________________________
Ticket #145 Comment 1
Perhaps we need a new test harness to automate this? Perhaps some tests need to be reassigned.

________________________________________________________________________________
Ticket #145 Comment 2
Richard Ash noted on the mailing list:
> we should add to the
> platforms Linux/ALSA, which needs testing both as
> real-ALSA-with-real-hardware and fake-ALSA-provided-by-pulseaudio (the
> latter is a frequent cause of bugs as Ubuntu insist upon installing
> pulseaudio by default).

________________________________________________________________________________
Ticket #145 Comment 3
Phil thinks this code should never be closed

________________________________________________________________________________
Ticket #145 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #146 Description
[Trac: Originally reported by c319chris on 2011-02-03 11:00:36]

When recording with WASAPI in 16-bit stereo using the callback interface, there is an intermittent problem with garbage or no samples in the callback buffer.

________________________________________________________________________________
Ticket #146 Comment 1
Could not reproduce under Windows Vista x64 using WOW64 and Native mode. Most probably driver-specific issue. Will test on Windows 7. All my testing systems have Realtek audio codec and Realtek audio driver.

________________________________________________________________________________
Ticket #146 Comment 2
c319Chris reports that the problem went away when he added WAV headers to his test files. The problem cannot be reproduced.

________________________________________________________________________________
Ticket #146 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #146 Comment 4
Closing again, TRAC migration reopened it for some reason

________________________________________________________________________________
Ticket #147 Description
[Trac: Originally reported by c319chris on 2011-02-03 11:22:50]

Need to investigate possible issues with WASAPI in exclusive mode, particularly when "Give exclusive mode applications priority" box is checked in audio control panel. It may not be properly releasing the audio device.

________________________________________________________________________________
Ticket #147 Comment 1
Could not reproduce such behavior under Windows Vista x64 in WOW64 and Native modes. Test for Windows 7 although shall be done.

________________________________________________________________________________
Ticket #147 Comment 2
http://music.columbia.edu/pipermail/portaudio/2011-December/013212.html

Chris writes:
> I have been looking into the issue described in ticket #147. 
> I'm having trouble dependably replicating the described 
> behavior with my WASAPI application. The exclusive mode 
> problem has cropped up a few times but I cannot positively say 
> it was associated with anything to do with PortAudio. The 
> quick fix if the problem occurs is to go to a non-default 
> setting for WASAPI exclusive mode in Windows Control Panel -> 
> Sound, then restore the default settings, then put WASAPI into 
> whatever mode is needed.
> 
> After thinking this over, my suggestion is to close this 
> ticket due to the fact that the behavior cannot be dependably 
> reproduced, with the understanding that it can be reopened at 
> a later time if necessary.

Closing for now...

________________________________________________________________________________
Ticket #147 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #148 Description
ASIO blocking i/o has been implemented (see ticket #57)

It needs testing. This means compiling and testing all the blocking i/o related tests in /tests and running them against the ASIO device.

It would be a good idea to address this ticket first:
#83 -- There is no test which excercises non-interleaved blocking i/o

________________________________________________________________________________
Ticket #148 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #149 Description
Calculation of inputBufferAdcTime  for input-only streams is dependent on output sample rate:

<pre><code>#!C
timeInfo.inputBufferAdcTime = HOST_TIME_TO_PA_TIME(inTimeStamp->mHostTime) - stream->deviceInputLatencySamples_ioProcCopy * stream->recipricalOfActualOutputSampleRate_ioProcCopy; // FIXME should be using input sample rate here?
</code></pre>

Basically we need to add some code that gets the input sample rate in the same way that we get the output sample rate. That means:
o- add UpdateReciprocalOfActualInputSampleRateFromDeviceProperty, AudioDevicePropertyActualSampleRateListenerProc for input SR
o- register listener in OpenStream call ( if( stream->inputUnit )  branch should look like outputUnit branch.
o- add and use recipricalOfActualInputSampleRate_ioProcCopy at line 1910 in the code above 



________________________________________________________________________________
Ticket #149 Comment 1
I'd better fix this. --rossb

________________________________________________________________________________
Ticket #149 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #150 Description
[Trac: Originally assigned to none]

Currently only patest_buffer.c tests the paFramesPerBufferUnspecified  flag.

We need a test that exercises paFramesPerBufferUnspecified with:
- full duplex & half duplex streams
- with different suggested latencies (0,low and high suggested latencies, and something really high like 1 second).

________________________________________________________________________________
Ticket #150 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #151 Description
Linearity is broken when converting from int to float and back using these conversions:

float = (integer / 0x8000)

integer = float * 0x7FFF

http://blog.bjornroche.com/2009/12/int-float-int-its-jungle-out-there.html
http://blog.bjornroche.com/2009/12/linearity-and-dynamic-range-in-int.html

Dither does not correct this problem.

________________________________________________________________________________
Ticket #151 Comment 1
Duplicate of #100

________________________________________________________________________________
Ticket #151 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #152 Description
This could provide a better way to do full-duplex with multiple devices.

The following links provide information about creating aggregate devices in code:

http://osdir.com/ml/coreaudio-api/2009-04/msg00161.html

http://www.thismuchiknow.co.uk/?p=51

________________________________________________________________________________
Ticket #152 Comment 1
Stephane Letz suggested looking at the Jack CoreAudio "aggregate devices" which is here:

http://trac.jackaudio.org/browser/jack2/trunk/jackmp/macosx/coreaudio/JackCoreAudioDriver.cpp

________________________________________________________________________________
Ticket #152 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #153 Description
[Trac: Originally assigned to none]

ALSA portaudio has build failures on systems with an ALSA library version older than 1.0.16 into trunk. 

Ralph Irving offered the attached patch.

________________________________________________________________________________
Ticket #153 Comment 1
Fixed by aknudsen in r1691

________________________________________________________________________________
Ticket #153 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #153 Comment 4
[[file:aVIRSwsjKr4ylOacwqjQWU]]
alsalessthan1.0.16.patch   (535 bytes) - added by philburk 12 months ago.
patch for ALSA

________________________________________________________________________________
Ticket #154 Description
[Trac: Originally assigned to somebody]

We could add a PortAudio implementation for Android. This would have to work within the constraints of the NDK. It would need to work with pre-2.3 Anrdroid meaning that it would need to use AudioTrack via JNI interfaces pre-2.3 and OpenSL ES on Android 2.3 and later.

________________________________________________________________________________
Ticket #154 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #154 Comment 2
In Feb 2011, about 98% of the Android devices were running pre-2.3. In June 2016, only about 2% of Android devices are running pre-2.3.  So I think we no longer need to support the pre-2.3 AudioTrack/JNI API.

________________________________________________________________________________
Ticket #155 Description
streamInfo.inputLatency and streamInfo.outputLatency are specified to be in seconds.

This is a problem for a few reasons:

- Latency of a digital signal path is always going to be measured in samples (the signal path consists of one or more sample buffers)

- From the above: the most accurate raw data we have from the OS about latency is usually in samples (buffer sizes etc).

- Usually we don't know the real sample rate accurately enough to make a conversion from frames to seconds before the streams starts. On most platforms we only have the _nominal_ sample rate. Even if we were to implement clock-recovery of the actual sample rate we couldn't do it before the stream was running.

Fix might be to change these fields to:

streamInfo.inputLatency -> streamInfo.inputLatencyFrames
streamInfo.outputLatency -> streamInfo.outputLatencyFrames

If there are host APIs that report some latency in wall time we could add extra fields to capture approximate extra buffering:

streamInfo.inputLatencyApproxExtraSeconds
streamInfo.outputLatencyApproxExtraSeconds

The client would compute latency in seconds as:


latencySeconds = ((double)streamInfo.outputLatencyFrames * sampleRate) + streamInfo.outputLatencyApproxExtraSeconds;


For a rough conversion like what PA does on most platforms at the moment, sampleRate would just be (streamInfo.sampleRate), but it could be a more accurate value estimated once the stream is running.

________________________________________________________________________________
Ticket #155 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #156 Description
Create a PortAudio implementation for iOS

A number of people on the mailing list have code for audio i/o on iOS that could be combined into the basis of a PA implementation.

________________________________________________________________________________
Ticket #156 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #157 Description
[This ticket directly blocks #117 and impacts the correctness of all blocking i/o implementations.]

When a new blocking i/o stream is created and started it is unspecified what state it is in, and how underflow and overflow recovery is to be implemented. This is probably OK when the native host API is a blocking API, but when we are implementing blocking i/o ourselves we need more detailed specs. I'm not sure if this should be part of the PortAudio public API specification, but we at least need to specify some guidelines for implementers so that there is consistency across implementations.

== Output ==

For output we should specify a combination of the following:

- Stream doesn't actually start sending data to DAC until a high watermark is reached (all buffers full?). The same should happen if the stream underflows: it should wait for high watermark before starting again.

- Stream buffers are primed with silence so that when start is called, data is sent immediately (or could be sent after first Write() call.

- User could prime stream buffers by calling Write() after Open() but before Start() (that implies that Stop() always flushes the buffers).

For output, the "high watermark/low watermark" model used in other OSes, eg:

From http://aeriebsd.org/man/man4/audio.html:
<pre><code> Writes to the audio devices will queue up blocks until the high-water mark is reached, at which point any more write calls will block until the queue is drained to the low-water mark. hiwat and lowat set those high- and low-water marks (in audio blocks). The default for hiwat is the maximum value and for lowat 75% of hiwat.</code></pre>

SGI irix does mostly the same thing, but also supports select() by exposing a semaphore for when the low water mark is reached:
http://cnmat.berkeley.edu/user/adrian_freed/blog/2009/10/07/audio_i_o_programming_sgi_irix

One consequence of this is that the paOutputUnderflow flag should only be returned once for each time the output queue underflows and stalls.


== Input ==

I am less clear how input should work. It may be sufficient to specify the following: when calling Pa_ReadStream() the client should block until new data is available from the host. The granularity of blocking is determined by host buffering requirements and the size of the buffer passed to Pa_ReadStream(). Pa_ReadStream() will never return synthetic silence 

As yet it is unclear whether an input overflow should flush the input queue or leave it in a state where additional overflows are possible if the client doesn't empty the buffers.

An input underflow should always result in the oldest data in the input queue being discarded.


________________________________________________________________________________
Ticket #157 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #158 Description
Rob Watson writes:
> In CoreAudio, if a device which is being read from is suddenly removed/unplugged, then PortAudio repeatedly loops while printing an error:
> 
> Error on line 2134: err='-10863', msg=Audio Unit: cannot do in current context
> 
> and then usually crashes. I can see that this is the call to AudioUnitRender in pa_mac_core.c.

> I'm testing with a simple line in from a Maya 44 USB 4in/4out.

I haven't changed any [pa_mac_core.h stream modes], just the default

Ross says: 
> I think there are a cluster of related issues in PA/CoreAudio that cause this kind of behavior when "things change" (sample rates, headphone disconnect, and now, apparently device disconnect).

( This is related to #102 )

> a quick hack fix is to check for this error code and return from the IOProc -- that should hopefully prevent the crash (and certainly the error message).
>
> A better fix is to have a notification listener that gets all the necessary changes and does something to reset the AudioUnits.
>
> getting a notification to your app that the device has been unplugged is the subject of some development. In the short term you may need to look for a way to get a notification outside the scope of PortAudio... but fixing the crash I think should be a priority (I can look into it if Bjorn doesn't have time).

________________________________________________________________________________
Ticket #158 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #158 Comment 3
I was able to reproduce this using AudioInput from a USB device.
A possible fix is under review here:
https://www.assembla.com/spaces/portaudio/git/merge_requests/3218623

________________________________________________________________________________
Ticket #158 Comment 5
Fixed. Now the stream stops instead of asserts.

________________________________________________________________________________
Ticket #159 Description
Sometimes when using a multichannel stream we only need to input or output to a subset of channels. This subset may change over the life of the stream, so current host api -specific mechanisms that select the channel subset when the stream is opened are insufficient for this use case.

The current way to do handle this in PortAudio is to ignore input channels we don't care about, and to write zeros to output channels at every callback. For multi-channel streams this can be very inefficient since PA currently needs to convert the sample formats for all i/o channels, even if only a few are being used and the rest are silence.

A solution would be to two functions:
Pa_SetStreamInputChannelMask( int *mask, int channelCount );
Pa_SetStreamOutputChannelMask( int *mask, int channelCount );

mask is an array of ints. where 0 means that PA will ignore/zero user buffer values for the corresponding channel and 1 means use current behavior (pass audio through). These functions could be called once after the stream is opened, or inside all or some callbacks for cases where the subset of active channels may change dynamically.

This would allow the buffer processor to ignore some channels. Masked host channels could be zeroed (using memset or some efficient function) rather than performing the full sample conversion path.

A further optimisation with some host APIs where the buffers are persistent (eg MME, DSound, ASIO, ...?) is to only zero the buffers once. Once the host API knows that all buffer space for a masked channel is zero, it no longer has to zero that space again.


 

________________________________________________________________________________
Ticket #159 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #160 Description
!DirectSound stream info latencies should include latency introduced by the DS ring buffers. Currently the calculations only include the latency introduced by the PA buffer processor.

META TICKET: #181 [META] ensure reported streamInfo->input/ouputLatency values are correct

________________________________________________________________________________
Ticket #160 Comment 1
Fixed by r1744

________________________________________________________________________________
Ticket #160 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #161 Description
PaUtil_GetBufferProcessorInputLatency() and PaUtil_GetBufferProcessorOutputLatency() return latencies in frames.

Often they are used in expressions that compute latencies in seconds, so it is unclear whether values need to be divided by sample rate or not (eg bugs fixed by ticket #94)

Therefore, these functions should be renamed to indicate that they return frames:

<pre><code>
PaUtil_GetBufferProcessorInputLatency -> PaUtil_GetBufferProcessorInputLatencyFrames


PaUtil_GetBufferProcessorOutputLatency -> PaUtil_GetBufferProcessorOutputLatencyFrames
</code></pre>

________________________________________________________________________________
Ticket #161 Comment 1
Fixed in changeset r1668

________________________________________________________________________________
Ticket #161 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #162 Description
dev-cpp build files are out of date. See /build/dev-cpp browse here:
http://www.portaudio.com/trac/browser/portaudio/trunk/build/dev-cpp

If we don't have a maintainer we should probably remove them from the tree since they have been broken for a number of years and no one has ever complained.

If you're wondering what dev-cpp is, it's an open source gcc-based IDE for Windows written in Delphi:
http://www.bloodshed.net/devcpp.html

________________________________________________________________________________
Ticket #162 Comment 1
I removed the build/dev-cpp files.
That IDE is no longer supported.

________________________________________________________________________________
Ticket #162 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #163 Description
[Trac: Originally assigned to none]

Ralph Irving submits:

Since the snd_lib_error_set_handler(AlsaErrorHandler) call was commented 
out in r1543 of trunk/src/hostapi/alsa/pa_linux_alsa.c The ALSA 
implementation now prints all ALSA lib messages to stderr, which is the 
default if an error handler is not defined.

Before this change all error messages from the library were hidden, now 
there is a flurry of messages when enumerating devices which don't exist. 
The FindDeviceName function does this with the predefinedNames structure 
at line 991 in r1605 of src/hostapi/alsa/pa_linux_alsa.c

Here is an example of the messages now displayed since this change if 
the current sound device doesn't support the "feature" listed in the 
predefined names.

<pre><code>
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.front
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.rear
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.center_lfe
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.side
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround40
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround41
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround50
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround51
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.surround71
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.iec958
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.iec958
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.iec958
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.hdmi
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.hdmi
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.modem
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.modem
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.phoneline
ALSA lib pcm.c:2190:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.phoneline
</code></pre>

Device enumeration is just one example of these ALSA lib messages output
but all messages from ALSA are displayed on the console now.

Perhaps the original thought that the error handler wasn't providing any 
useful benefit was incorrect as mentioned in this comment in the r1543 
diff;

+/** Uncommented because AlsaErrorHandler is unused for anything good yet.

I get regular inquires from users of squeezeslave worried that something 
is broken since this change, when in fact the messages can be ignored.

I think that perhaps the AlsaErrorHandler needs to be reinstalled with the 
additional changes described in the commit to avoid the seg fault of 
course, as this helps hide the ALSA layer from PA.

________________________________________________________________________________
Ticket #163 Comment 1
My 2cents:
It seems to me that PA shouldn't really block all ALSA messages or we run the risk of missing real problems.

Perhaps we could just install the error handler while probing for unknown devices? or print everything ourselves from the error handler and then suppress errors like this that we know we're causing ourselves.

________________________________________________________________________________
Ticket #163 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #164 Description
Ticket #132 and revision r1606 updated the Windows configuration system to use PA_USE_* macros. In the process of creating the patch we decided that PA_USE_* macros should have values of 0 or 1, with pa_hostapi.h providing a defaulting mechanism.

At present Unix host apis expect PA_USE_* to be defined/undefined, not 0 or 1

Unix host APIs should be brought into line:

- pa_hostapi.h should be updated to default Unix PA_USE_* macros to 0 or 1, same as Windows macros
- pa_unix_hostapis.c should be updated to use #if instead of #ifdef for PA_USE_* macros
- any other usage of PA_USE_* macros in Unix code should be updated to take the new usage into account

The Unix build scripts should be able to remain unchanged since the new defaulting mechanism will work with the previous defined/undefined usage.



________________________________________________________________________________
Ticket #164 Comment 1
Applied changes as described above for

PA_USE_ALSA
PA_USE_OSS
PA_USE_JACK
PA_USE_SGI 
PA_USE_ASIHPI
PA_USE_COREAUDIO
PA_USE_SKELETON

________________________________________________________________________________
Ticket #164 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #165 Description
First and foremost, this is for enhanced Visual Studio support, but can be used for all platforms and build environments that CMake supports.

________________________________________________________________________________
Ticket #165 Comment 1
The fix should include a Wiki page with a How-to for generating build files via CMake.

________________________________________________________________________________
Ticket #165 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #166 Description
Can someone please apply these patches, verify that they don't break anything, and commit them please?

Benjamin Drung (@ ubuntu.com) writes:
> I have applied the three attached patches in the Debian package:
>
>1) binutils-gold-fix.patch: portaudio fails to build with binutils gold.
>This patch fixes it.
>
>2) export-oss-functions.patch: This patch exports the functions starting
>with PaOSS_ too.
>
>3) install-headers.patch: This patch the headers for the built backends.
>It's doesn't make sense to export the PaAlsa_* functions, but not
>providing the header for them.
>
>Patch two and three were required to build Audacity against portaudio.

________________________________________________________________________________
Ticket #166 Comment 1
I applied the patches and tested on Ubuntu Linux. Seems OK.

________________________________________________________________________________
Ticket #166 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #167 Description
[Trac: Originally assigned to ]

Phil Barnett reported that on CentOS 5.5 he got:

<pre><code>
src/hostapi/alsa/pa_linux_alsa.c: In function 'CallbackThreadFunc':
src/hostapi/alsa/pa_linux_alsa.c:4275: error: label at end of compound statement
</code></pre>

The code is:

<pre><code>
end:	
    /* Match pthread_cleanup_push */
    pthread_cleanup_pop( 1 );
</code></pre>

It turns out that pthread_cleanup_pop(1) is a macro and a compound statement.  The hack workaround is to put a ; on a line by itself right after the label.

More information here:

  http://sourceware.org/ml/glibc-bugs/2007-12/msg00014.html

________________________________________________________________________________
Ticket #167 Comment 1
Fixed by adding semicolon.
Phil Barnett verified the fix in his own code.
Tested on Ubuntu, which never showed the original error.
Not a perfect verification but seems OK.

________________________________________________________________________________
Ticket #167 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #168 Description
I get scrambled data when recording with paUInt8 mode on Mac.  This was detected using the paloopback test.  Note the bad paUInt8 test result at the bottom of the attached report.

________________________________________________________________________________
Ticket #168 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #168 Comment 2
[[file:dVi40YsjGr4BXQacwqjQXA]]

Phil Burk added attachment pauint8_bug.txt
report from paloopback test

________________________________________________________________________________
Ticket #169 Description
Today the PaStreamInfo struct contains no host API info of the stream. Portmixer relies on a patch that adds (unneccesarily) export symbols. PaStreamInfo should be extended to a) expose the host API type of the stream b) a void* ptr to a host API specific struct (which is defined in the host API headers) so that Portmixer can extract the information it needs.

We decided to add the hostApiType field a long time ago:
http://music.columbia.edu/pipermail/portaudio/2008-February/008314.html

________________________________________________________________________________
Ticket #169 Comment 1
Tickets #18,#19 and #21 are related to this.

________________________________________________________________________________
Ticket #169 Comment 2
In case anyone queries whether we should be breaking binary compatibility by potting the host api id at the start of the struct. We already decided we're going to break things


http://music.columbia.edu/pipermail/portaudio/2008-February/008328.html	
Richard Ash wrote:
> yes and yes from this end - break the compatibility, add the field
> where you think it fits in (at the start), increment the library version
> number, and whilst you are busy breaking binary compatibility, remove
> run-time struct versions as well. Some #defines would be a good idea,
> but I think API versions (on the same major / minor / point scheme as
> the library number) are the way to go.

________________________________________________________________________________
Ticket #169 Comment 3
Note that we should remove the structVersion field at the same time as adding hostApiType field, per #172

________________________________________________________________________________
Ticket #169 Comment 4
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #170 Description
[Trac: Originally assigned to ]

Tim Bunnell reported:

Just tested the snapshot under cygwin (in XP (in a Parallels VM (under OS X 10.6))) and found a small issue with the config script. It resulted in a makefile that contained:

INCLUDES=@INCLUDES@

This broke the make install target. Fixed by simply removing the @INCLUDES@.

It also breaks installation on Mac OS 10.6.6 (not under VM).

________________________________________________________________________________
Ticket #170 Comment 1
This break occurred when I applied the patches for Debian. It turns out that one is supposed to run autoconf after modifying configure.in. That generates a new "configure" file. Who knew?  I ran autoconf on Ubunto 10.10 and tested on Ubunto and Mac OX 10.6.6.

________________________________________________________________________________
Ticket #170 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #171 Description
The Mac Code implementation is setting paInputOverflowed for almost every callback even though the input is clean.  This seems like a false alarm. 

The exception is when run at 44100 Hz where it only happens once or none at all. 

It also happens with blocking Pa_ReadStream().

This can be seen easily in the paloopback test.

<pre><code>
************ Mode = Two Streams (Half Duplex) ************
|-   requested  -|- measured ------------------------------
|-sRate-|-fr/buf-|- over/under/total for in,out -|- frm/buf -|-latency-|- channel results -
|  8000 |      0 |  150/   0/ 150,    0/   0/ 152 |   64-  64 |   19.38 | OK
| 11025 |      0 |  207/   0/ 207,    0/   0/ 208 |   64-  64 |    9.43 | OK
| 16000 |      0 |  300/   0/ 300,    0/   0/ 238 |   64-  81 |    8.75 | OK
| 22050 |      0 |  353/   0/ 353,    0/   0/ 238 |   75- 112 |    9.34 | OK
| 32000 |      0 |  356/   0/ 356,    0/   0/ 237 |  108- 163 |   10.88 | OK
| 44100 |      0 |    0/   0/ 353,    0/   0/ 237 |  150- 224 |   12.11 | OK
| 48000 |      0 |  325/   0/ 354,    0/   0/ 238 |  163- 244 |   14.08 | OK
| 96000 |      0 |  163/   0/ 354,    0/   0/ 237 |  326- 489 |   24.72 | OK

| 44100 |      0 |    0/   0/ 353,    0/   0/ 237 |  150- 224 |   12.09 | OK
| 44100 |     16 |    1/   0/3308,    0/   0/3315 |   16-  16 |    0.18 | OK
| 44100 |     32 |    0/   0/1654,    0/   0/1654 |   32-  32 |    3.54 | OK
| 44100 |     40 |    1/   0/1323,    0/   0/1326 |   40-  40 |    1.52 | OK
| 44100 |     64 |    0/   0/ 827,    0/   0/ 827 |   64-  64 |    4.83 | OK
| 44100 |    100 |    1/   0/ 530,    0/   0/ 531 |  100- 100 |    4.10 | OK
| 44100 |    128 |    0/   0/ 414,    0/   0/ 414 |  128- 128 |    7.78 | OK
| 44100 |    256 |    0/   0/ 207,    0/   0/ 207 |  256- 256 |   13.63 | OK
| 44100 |    512 |    0/   0/ 104,    0/   0/ 105 |  512- 512 |   25.24 | OK
| 44100 |   1024 |    0/   0/  52,    0/   0/  53 | 1024-1024 |   48.41 | OK


************ Mode = One Stream (Full Duplex) ************
|-   requested  -|- measured ------------------------------
|-sRate-|-fr/buf-|- over/under/total for in,out -|- frm/buf -|-latency-|- channel results -
|  8000 |      0 |  150/   0/ 150,    0/   0/ 150 |   64-  64 |   20.38 | OK
| 11025 |      0 |  207/   0/ 207,    0/   0/ 207 |   64-  64 |   16.60 | OK
| 16000 |      0 |  238/   0/ 238,    0/   0/ 238 |   81-  81 |   16.75 | OK
| 22050 |      0 |  237/   0/ 237,    0/   0/ 237 |  112- 112 |   17.41 | OK
| 32000 |      0 |  236/   0/ 236,    0/   0/ 236 |  163- 163 |   21.81 | OK
| 44100 |      0 |  232/   0/ 237,    0/   0/ 237 |  224- 224 |   23.06 | OK
| 48000 |      0 |  236/   1/ 237,    0/   0/ 237 |  244- 244 |   25.83 | OK
| 96000 |      0 |  234/   2/ 236,    0/   0/ 236 |  489- 489 |   42.08 | OK

| 44100 |      0 |  220/   0/ 237,    0/   0/ 237 |  224- 224 |   22.99 | OK
| 44100 |     16 | 3306/   0/3308,    0/   0/3308 |   16-  16 |    8.39 | OK
| 44100 |     32 | 1571/   0/1654,    0/   0/1654 |   32-  32 |    7.55 | OK
| 44100 |     40 | 1316/   0/1323,    0/   0/1323 |   40-  40 |    8.25 | OK
| 44100 |     64 |  825/   0/ 827,    0/   0/ 827 |   64-  64 |   10.02 | OK
| 44100 |    100 |  524/   0/ 530,    0/   0/ 530 |  100- 100 |   14.58 | OK
| 44100 |    128 |  410/   0/ 414,    0/   0/ 414 |  128- 128 |   16.44 | OK
| 44100 |    256 |  206/   0/ 207,    0/   0/ 207 |  256- 256 |   25.19 | OK
| 44100 |    512 |  100/   0/ 104,    0/   0/ 104 |  512- 512 |   48.46 | OK
| 44100 |   1024 |   48/   0/  52,    0/   0/  52 | 1024-1024 |   94.85 | OK
</code></pre>


________________________________________________________________________________
Ticket #171 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #171 Comment 2
I could be wrong, but I believe this is from CoreAudio unreliably reporting the xrun status.

________________________________________________________________________________
Ticket #171 Comment 4
This turned out to be caused by code that was confused by the return value from PaUtil_WriteRingBuffer(). It returns a count in *elements* not *bytes*. But the code was comparing the result to a byte count and flagging a paInputOverflow when they were not equal.
Fixed in SVN rev 1842.

________________________________________________________________________________
Ticket #172 Description
PaHostApiInfo, PaDeviceInfo and PaStreamInfo structures have a structVersion field. Other structures don't. It has been proposed (and generally agreed) that we should remove these fields because the versioning capabilities they provide are not easily usable. 

Instead, a global library versioning mechanism will be provided (documented in ticket: #173)


We discussed whether breaking binary compatibility was a good idea. Bjorn started here:
http://music.columbia.edu/pipermail/portaudio/2008-February/008318.html

Richard Ash suggested that it wasn't a big deal to break compatibility since we can bump package version numbers.
http://music.columbia.edu/pipermail/portaudio/2008-February/008324.html
In the same basis Richard also provides the analysis to support removing the struct version numbers. He concludes:
> On this basis I would suggest that structure version numbering is just
> not worth it - almost no application developer is going to jump through
> the kind of complexity you describe to support multiple library versions
> at runtime.

Since this change breaks binary structure compatibility and should be performed in conjunction with the following tickets that also alter struct layout

- #169	Portaudio should expose host API specific stream information
- #58	API calling convention and pack

________________________________________________________________________________
Ticket #172 Comment 1
FYI this is all uses of structVersion as of r1666:
{{{
C:\amtrunk_wd\external-libs\portaudio>grep -d -n structVersion *.c *.cpp *.h
File src\common\pa_front.c:
575             PA_LOGAPI(("\t\tint structVersion: %d\n", info->structVersion ));
717             PA_LOGAPI(("\t\tint structVersion: %d\n", result->structVersion));
1508            PA_LOGAPI(("\t\tint structVersion: %d\n", result->structVersion));
File src\hostapi\alsa\pa_linux_alsa.c:
736         (*hostApi)->info.structVersion = 1;
931         deviceInfo->structVersion = -1;
1119        baseDeviceInfo->structVersion = 2;
File src\hostapi\asihpi\pa_linux_asihpi.c:
648                     baseDeviceInfo->structVersion = 2;
691                     baseDeviceInfo->structVersion = 2;
773         baseApiInfo->structVersion = 1;
1821        stream->baseStreamRep.streamInfo.structVersion = 1;
File src\hostapi\coreaudio\pa_mac_core.c:
491         deviceInfo->structVersion = 2;
581         (*hostApi)->info.structVersion = 1;
File src\hostapi\coreaudio\pa_mac_core_old.c:
289         deviceInfo->structVersion = 2;
880         (*hostApi)->info.structVersion = 1;
File src\hostapi\dsound\pa_win_ds.c:
1057        (*hostApi)->info.structVersion = 1;
1125                deviceInfo->structVersion = 2;
File src\hostapi\jack\pa_jack.c:
572             curDevInfo->structVersion = 2;
743         (*hostApi)->info.structVersion = 1;
File src\hostapi\oss\pa_unix_oss.c:
253         (*hostApi)->info.structVersion = 1;
298         deviceInfo->structVersion = 2;
File src\hostapi\skeleton\pa_hostapi_skeleton.c:
148         (*hostApi)->info.structVersion = 1;
181                 deviceInfo->structVersion = 2;
File src\hostapi\wasapi\pa_win_wasapi.c:
1095        (*hostApi)->info.structVersion               = 1;
1198                deviceInfo->structVersion = 2;
File src\hostapi\wdmks\pa_win_wdmks.c:
1808        (*hostApi)->info.structVersion = 1;
1841                deviceInfo->structVersion = 2;
File src\hostapi\wmme\pa_win_wmme.c:
929         (*hostApi)->info.structVersion = 1;
1004                    deviceInfo->structVersion = 2;
1047                    deviceInfo->structVersion = 2;
File src\hostapi\asio\pa_asio.cpp:
1088        (*hostApi)->info.structVersion = 1;
1179                    deviceInfo->structVersion = 2;
File src\hostapi\asio\pa_asio.new_set_sample_rate.cpp:
1119        (*hostApi)->info.structVersion = 1;
1211                    deviceInfo->structVersion = 2;
File include\portaudio.h:
248         int structVersion;
451         int structVersion;  /* this is struct version 2 */
966         int structVersion;
}}}

________________________________________________________________________________
Ticket #172 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #173 Description
The current library version API is not useful enough to support clients that are compatible with multiple library versions. Ticket #172 covers removing structVersion fields (and links to discussion about why they aren't very usefull in practice).

Ross proposed a global version number API here, but it wasn't really discussed in detail
http://music.columbia.edu/pipermail/portaudio/2008-February/008332.html

void Pa_GetVersion( int *major, int *minor, int *point );

There is also a request to provide #defines in the header file (PA_LIBRARY_VERSION_MAJOR, etc) so that code can detect the version at compile time.

More discussion here:
http://music.columbia.edu/pipermail/portaudio/2008-February/008340.html

Richard Ash wrote: 
> We can drop the int Pa_GetVersion(void) function altogether 
> (can't think of a use for it,
> programs shoudl check API version not implementation version)."

________________________________________________________________________________
Ticket #173 Comment 1
It's nice to have a single integer containing the version.  Something like:

   versionCode = (major<<16) + (minor<<8) + point

________________________________________________________________________________
Ticket #173 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #173 Comment 3
This seems to be fixed by recent commit: https://www.assembla.com/code/portaudio/subversion/changesets/1922#commit/comment:771023/line:9/path:portaudio/branches/versioning/src/common/pa_front.c

Also, SVN revision can be included with:

const char* paSvnRevision = "$Revision: $";

which will expand to f.i.

const char* paSvnRevision = "$Revision: 1922 $";

when committing it.

________________________________________________________________________________
Ticket #173 Comment 4
Fixed in 2014

________________________________________________________________________________
Ticket #174 Description
This ticket links to all other V19 tickets that may change the ABI (binary interface) of the library, or are related to such changes:

API changes:
- #92 rename PaStreamParameters::hostApiSpecificStreamInfo to hostApiSpecificStreamParameters

ABI changes:
- #58 API calling convention and pack
- #169 Portaudio should expose host API specific stream information
- #172 Remove structVersion field from PaHostApiInfo, PaDeviceInfo and PaStreamInfo
- #173 Improved API library version API
- #225 PA should expose host API specific device information

There is also a wiki page for "Changes to the public PortAudio API for V19-M1 development milestone":
http://www.portaudio.com/trac/wiki/V19M1ApiChanges

________________________________________________________________________________
Ticket #174 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #175 Description
The PA/CoreAudio implementation reports 0 recommended latency for all devices. 

META TICKET: #97 [META] Some PA recommended deviceInfo->default*Latency values are bad or unimplemented

See also:

#182 PA/CoreAudio ignores Pa_OpenStream() suggestedLatency param

________________________________________________________________________________
Ticket #175 Comment 1
I cannot reproduce the error. When I run pa_devs.c I get non-zero values for latency. From pa_mac_core.c, these default values are set:

  deviceInfo->defaultLowInputLatency = .01;
  deviceInfo->defaultHighInputLatency = .10;
  deviceInfo->defaultLowOutputLatency = .01;
  deviceInfo->defaultHighOutputLatency = .10;

then the latency in frames is queried:
  AudioDeviceGetProperty( ..., kAudioDevicePropertyLatency, ... )

that is converted to seconds:
  double secondLatency = frameLatency / deviceInfo->defaultSampleRate;

then the default latencies are updated based on that:
  deviceInfo->defaultLowOutputLatency = 3 * secondLatency;
  deviceInfo->defaultHighOutputLatency = 3 * 10 * secondLatency;
  
This seems fairly reasonable. I cannot explain why a latency of zero would be returned unless frameLatency was zero. So I added a trap for frameLatency==0 and use the original defaults in that case.


________________________________________________________________________________
Ticket #175 Comment 2
Some useful info from Jeff Moore on latency at:
  http://osdir.com/ml/coreaudio-api/2010-01/msg00046.html

  http://osdir.com/ml/coreaudio-api/2009-07/msg00140.html

I added some calls to query the properties that Jeff mentions. On my MacBook:

kAudioDevicePropertyLatency had values of 0,10,15. o was for aggregate device.
kAudioStreamPropertyLatency had values of 0,10,15,48. 48 was for a USB headset.
kAudioDevicePropertyBufferFrameSize was always 512.
kAudioDevicePropertySafetyOffset was 32,50,65,134.


________________________________________________________________________________
Ticket #175 Comment 3
Another useful link from Jeff Moore:

>In software play through, the latency (in sample frames) is determined by the following formula (presuming the play through is happening on the same device in the same IO proc):
>
>Input Latency + Input Safety Offset + (2* IO buffer Size) + Output Safety Offset + Output Latency

    http://lists.apple.com/archives/coreaudio-api/2004/Jan/msg00445.html

________________________________________________________________________________
Ticket #175 Comment 4
Default latencies are now calculated like Jeff Moore suggested. Need to verify and review.

________________________________________________________________________________
Ticket #175 Comment 5
Looks very close for full duplex. It is hard to measure latency for half duplex.

________________________________________________________________________________
Ticket #175 Comment 6
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #176 Description
Windows uses a common error code system across most APIs (not sure about WMME wave* functions). PortAudio error reporting could be improved by providing standard functions for translating these error codes into PA errors.

Solution: create a pa_win_error.c/h module with routines for translating Windows error codes to PA error codes. Including support for translating unexpected host errors.

pa_win_wmme.c  contains a function PaMme_SetLastSystemError that could be used as a basis.


Function signature would be something like:

<pre><code>
/**
 Convert a Windows error code into a PaError. Sets the host-api specific error
 information if needed.

 @param hostApiType The calling host api type. Used when reporting paUnanticipatedHostError

 @param winError A Windows error code.
*/
PaError PaWinUtil_ConvertSystemError( PaHostApiTypeId hostApiType, DWORD winError );
</code></pre>

________________________________________________________________________________
Ticket #176 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #177 Description
Windows Multimedia Class Scheduler Service provides a way to mark threads as having audio-class priority. PA already uses this in the WASAPI and WDMKS implementations. We should use it for WMME, DSound and ASIO media threads too.
http://msdn.microsoft.com/en-us/library/ms684247(VS.85).aspx

This enhancement could be combined with a refactoring that creates a single set of common routines for creating and destroying media threads to be used by all implementations.

________________________________________________________________________________
Ticket #177 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #178 Description
bryan donnovan reports:

If I suggest a latency of zero to MME upon opening the stream, then the stream info tells me that latency is zero.  

META TICKET: #181 [META] ensure reported streamInfo->input/ouputLatency values are correct

________________________________________________________________________________
Ticket #178 Comment 1
Should be fixed in r1717.

________________________________________________________________________________
Ticket #178 Comment 2
Closing as fixed. r1725 made further improvements making the actual latency monotonically increasing vs. suggested latency. pdf file attached to this ticket shows suggested vs streaminfo reported latency for 0-2s in .5ms steps.

________________________________________________________________________________
Ticket #178 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #178 Comment 5
[[file:arcr9ssjKr4A0WacwqjQWU]]
output from patest_suggested_vs_streaminfo_latency showing this bug is fixed

________________________________________________________________________________
Ticket #179 Description
With X Code 4 installed, the 10.5 SDK may be removed, leaving only 10.6 SDK. Unfortunately, portaudio compiles against 10.5 and 10.4u SDKs only.

The configure system must be updated to locate the appropriate SDK, and use that.

________________________________________________________________________________
Ticket #179 Comment 1
Good discussion and possible solution here:
http://music.columbia.edu/pipermail/portaudio/2011-July/012620.html

________________________________________________________________________________
Ticket #179 Comment 2
Patch applied in r1701.

I am marking this as fixed, though, not being an autoconf expert, it's possible that this may cause other issues.

________________________________________________________________________________
Ticket #179 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #180 Description
This parameter would be better considered "requested" or "desired" rather than "suggested."

Although it may not always be strictly honoured, it is more than a hint.

________________________________________________________________________________
Ticket #180 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #181 Description
This is a meta ticket for specific host API issues

Close when these are all closed: #205, #206 (see Resolution criteria below)

See:

#95 PA/CoreAudio reported streamInfo->input/ouputLatency may not take driver latency into account

#160 PA/DirectSound streamInfo->input/outputLatency don't include all known latencies

#178 PA/WMME doesn't report correct streamInfo->input/outputLatency


Other implementation's source code should be reviewed for correctness and the loopback test results should be reviewed for each host API to assess conformance.


See also: BufferingLatencyAndTimingImplementationGuidelines

Especially:
BufferingLatencyAndTimingImplementationGuidelines#Asymmetryindefinitionofoutputandinputlatency


=== QA notes ===

The relationship between suggestedLatency and streamInfo->input/ouputLatency can be graphed using the combined C/Python test:
<pre><code>
test/patest_suggested_vs_streaminfo_latency.c
test/patest_suggested_vs_streaminfo_latency.py
</code></pre>

The loopback test can be used to compare reported streamInfo latency with the actual loopback latency.

=== Resolution criteria ===

This ticket will be closed when the following three conditions are met:

1. The code that computes the stream info input/output latency values has been reviewed for hygene (fixmes, comments, other source level indications of problems), conformance to our algorithm, and the sources of latency that are taken into account in each case are noted. Covered by review ticket #205.
2. The results of patest_suggested_vs_streaminfo_latency should indicate output latencies increasing with suggested latency, and input latencies being mainly a function of framesPerBuffer plus a constant. Reported output latency values are monotonically increasing with increasing latency. Covered by review ticket #205.
3. The reported stream latencies and those reported by the loopback test are correlated, and any discrepancies are acounted for. Covered by ticket #206

________________________________________________________________________________
Ticket #181 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #182 Description
The PA/CoreAudio implementation ignores the suggested latency parameters to OpenStream(). It also reports 0 recommended latency for all devices.

When taken together, these two behaviours are arguably acceptable. However, the way other implementations work, if the requested latency is as large or greater than 2 times the callback buffer size, the native buffer size is set to a corresponding integer multiple of the callback buffer size. So, at a minimum, it would be better if the recommended latency values at least reflected practical reasonable limits on default latency, even if OpenStream continues to ignore suggested latency parameters.

A preferable approach would be to use a host buffer size that is an integer multiple of the user buffer size such that:

<pre><code>
n => 1,2,3...
hostBufferSize = n * callbackBufferSize
duration(hostBufferSize) < requestedLatency
</code></pre>


META TICKETS: 

#98 [META] Harmonize Pa_OpenStream() suggestedLatency param to native buffer size calculations

#99 [META] ensure 0 Pa_OpenStream() suggestedLatency param means "use minimum implementable latency"

See also:

#175 PA/CoreAudio recommended deviceInfo->default*Latency is 0

________________________________________________________________________________
Ticket #182 Comment 1
We now subtract the fixed latency from the suggestedLatency and use that values to calculate a buffer size if unspecified.

________________________________________________________________________________
Ticket #182 Comment 2
PA is now seriously considering suggestedLatency when setting up the stream. It works particularly well when framesPerBuffer is unspecified.

________________________________________________________________________________
Ticket #182 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #183 Description
[Trac: Originally assigned to ]

If a user looks at the PA files list in the doxygen comments here:

http://portaudio.com/docs/v19-doxydocs/files.html

they see too many internal files. This is very confusing to someone who just wants to know how to call PortAudio.

We should generate two sets of docs when we run doxygen, one for internal developers and one for external PA users. We can mark internal docs with the @internal doxygen attribute.

________________________________________________________________________________
Ticket #183 Comment 1
We should probably exclude certain directories too (like the WASAPI header files directory)

________________________________________________________________________________
Ticket #183 Comment 2
I've adjusted Doxyfile to only generate user (public API) documentation, and added a separate Doxyfile.developer to generate full internal documentation. I've also excluded some files that should not be documented (eg mingw headers).

________________________________________________________________________________
Ticket #183 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #184 Description
This ticket is now mostly done. The Wiki page is here: BufferingLatencyAndTimingImplementationGuidelines

A number of V19-M1 tickets are concerned with latency parameters. We need a single reference for out latency and buffering model and implementations. At the moment the details are scattered across a number of tickets and mailing list posts.

The wiki page should contain the theoretical background for the following meta tickets and their dependants:

#97 [META] Some PA recommended deviceInfo->default*Latency values are bad or unimplemented

#98 [META] Harmonize Pa_OpenStream() suggestedLatency param to native buffer size calculations

#99 [META] ensure 0 Pa_OpenStream() suggestedLatency param means "use minimum implementable latency"

#181 [META] ensure reported streamInfo->input/ouputLatency values are correct

Pretty much all of the V19-M1 tickets can be consulted for ideas. V19-M4 tickets are also relevant.



________________________________________________________________________________
Ticket #184 Comment 1
Reducing priority to Major. The page is there and is sufficient to support ongoing development. It does need to be reviewed and enhanced prior to M1 being completed. Specifically the details of each host API need to be filled in and the accuracy of the rest of the document needs to be reviewed.

________________________________________________________________________________
Ticket #184 Comment 2
Closing ticket. The page is done. I've reviewed it. Still needs some details for a few host APIs. This can be dealt with in due course.

________________________________________________________________________________
Ticket #184 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #185 Description
The test test/patest_wmme_find_best_latency_params.c uses a binary search to find the lowest buffer size settings that work for a given number of buffers.

The results of running this test on different platforms can be used to determine the recommended default latency settings for ticket #80.

Please help by running the tests. There is a call for input and links to binaries here:
http://music.columbia.edu/pipermail/portaudio/2011-July/012789.html

BLOCKS:

#80 PA/WMME recommended deviceInfo->default*Latency values need review


________________________________________________________________________________
Ticket #185 Comment 1
Need to do a bit more testing on Vista before we close this. Right now we think we're going to go with 90ms on Vista and 70 ms on XP and Win 7.

________________________________________________________________________________
Ticket #185 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #185 Comment 4
[[file:ccylRKsjGr4BoxacwqjQXA]]

________________________________________________________________________________
Ticket #185 Comment 5
[[file:c539SMsjGr4BXQacwqjQXA]]

________________________________________________________________________________
Ticket #186 Description
Please help by running the tests. There is a call for input and links to binaries here:  http://music.columbia.edu/pipermail/portaudio/2011-November/013185.html


Equivalent of the following ticket, but for DirectSound
#185 finish patest_wmme_find_best_latency_params.c and use to gather viable default latency values

REQUIRES:
#129 provide a host-API specific mechanism for setting DirectSound buffer sizes in frames

BLOCKS:
#122 PA/DirectSound recommended deviceInfo->default*Latency values are unimplemented and set to zero

________________________________________________________________________________
Ticket #186 Comment 1
New test test\patest_dsound_find_best_latency_params.c commited in r1795

________________________________________________________________________________
Ticket #186 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #187 Description
John Nelson reported this error to the list in 2009.
http://music.columbia.edu/pipermail/portaudio/2009-November/009587.html

John writes:
pa_mac_core_utilities.c   if a frame buffer size  
(requestedFramesPerBuffer) exceeds that allowed by the kernel  
driver,  portaudio attempts to use the maximum allowed value.   It  
fails because of the use of a deprecated argument option in the calls  
to   AudioDeviceGetPropertyInfo   and AudioDeviceGetProperty.

Instead of using the option:    
kAudioDevicePropertyBufferSizeRange     you should use    
kAudioDevicePropertyBufferFrameSizeRange  and then you get correct  
values for the minimum and maximum allowed values of the frame buffer  
size.


________________________________________________________________________________
Ticket #187 Comment 1
I made the suggested changes. This code now makes more sense. The change also eliminated a click noise that could be heard when using very large buffers.

________________________________________________________________________________
Ticket #187 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #188 Description
- Test the deviation between suggestedLatency and PaStreamInfo::*latency when opening streams with default parameters. In principle suggested and actual latency should be very close in this case see: patest_suggested_vs_streaminfo_latency.c/.py and BufferingLatencyAndTimingImplementationGuidelines [Phil to add to paqa_latency.c]

- A QA test similar to patest_suggested_vs_streaminfo_latency (see below) that opens the stream with an ascending series of suggested latency values. The goal is to test/ensure that the reported !PaStreamInfo latency is monotonically increasing (or unchanged) for increasing suggested latency values. In other words: an increase in suggested latency should never result in a decrease in reported !PaStreamInfo latency. [Phil to add to paqa_latency.c]

- Test that iterates all devices and checks that their default input and output latencies are non-zero. [Phil to add to paqa_latency.c]

- [DONE, see: patest_suggested_vs_streaminfo_latency.c/.py] A test that opens streams with a sequence of suggested latency values from 0 to 2 seconds in .5ms intervals and gathers the resulting actual latency values. Output a csv file and graph suggested vs. actual. Run with framesPerBuffer unspecified, powers of 2 and multiples of 50 and prime number buffer sizes. See the pdf attached to #178 for example output.

________________________________________________________________________________
Ticket #188 Comment 1
The above checks were added to "paqa_latency.c". I was able to detect some errors with Built-In input on Mac.

________________________________________________________________________________
Ticket #188 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #189 Description
pa_win_wmme.c implements a mechanism to limit the maximum host buffer size in bytes to 32k:

<pre><code>
 #define PA_MME_MAX_HOST_BUFFER_BYTES_ (32 * 1024) /* Has precedence over PA_MME_MAX_HOST_BUFFER_SECS_, 
               some drivers are known to crash with buffer sizes > 32k */
</code></pre>

However this limit is currently ignored in the case that the userFramesPerBuffer*sampleFrameSize exceeds this limit.

!SelectHostBufferSizeFramesAndHostBufferCount() could clamp the buffer size or return an error, however at present it does neither. It just allows the value to go through. There is code in !SelectHostBufferSizeFramesAndHostBufferCount() to return an error, but it is commented out.

Possible fixes:
- remove the hard limit
- return an error if the user requests an oversized buffer
- enforce the hard limit and use buffer adaption to deal with it

________________________________________________________________________________
Ticket #189 Comment 1
Phil thinks we should enforce the hard limit and use buffer adaption to deal with it.

________________________________________________________________________________
Ticket #189 Comment 2
Resolved by r1739
The code now enforces the hard limit. It tries to make the host buffer size a factor of user buffer size smaller than 32k.

________________________________________________________________________________
Ticket #189 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #190 Description
Some functions in portaudio.h should take a const !PaStream*. Currently none are const ptrs. All of the accessors/query functions should.

________________________________________________________________________________
Ticket #190 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #191 Description
move tests, examples and debug tests:

- move educational examples to examples/paex_*
- move qa self tests to qa/paqa_*
- leave debug tests at test/patest_*

________________________________________________________________________________
Ticket #191 Comment 1
Candidate for moving to examples include:

* patest_read_write_wire.c
* patest_record.c
* patest_saw.c
* patest_wire.c
* patest_write_sine.c
* patest_write_sine_nonint.c
* pa_devs
* pa_fuzz
* patest_wmme_ac3.c
* patest_wmme_surround.c
* patest_pink.c
* patest_mono_asio_channel_select.c

________________________________________________________________________________
Ticket #191 Comment 2
Examples stuff is moved. Did not move "patest_wire.c". It is really a test.

________________________________________________________________________________
Ticket #191 Comment 3
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #192 Description
Test would output graphs and histograms of callback delay variation.

Description of how to write it is here:
http://music.columbia.edu/pipermail/portaudio/2011-July/012722.html


________________________________________________________________________________
Ticket #192 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #193 Description
Please take a look and see what you think.

My main concern is with barrier pairing, and whether the read/writeavailable functions need barriers if they are just used to poll for space.

________________________________________________________________________________
Ticket #193 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #194 Description
Write a test that verifies that all devices correctly implement the stream state transition model described here:
http://www.portaudio.com/docs/proposals/010-ClarifyStreamStateMachine.html

Test full and half duplex

test Starting and Stopping multiple times

test starting and stopping immediately or after some time

test returning different return values from the stream callback on the first callback, and on subsequent callbacks.

this test could also confirm that the stream completed callback is invoked.

________________________________________________________________________________
Ticket #194 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #195 Description
Rob Bielik reported crashes in recent PA versions when using a Presonus Firepod on 10.5.x.

>
> What revision of PortAudio are you using?

r1733 of trunk (merged into wavert_wdmks branch)

> What audio device were you using?

fire wire sound cards tested:
- prism sound, orpheus
- presonus, firepod

> What kind of Mac?

Oohh.. that I don't know, I'll ask the testers. Some kind of MacBookPro, but I don't know which vintage.

> What version of OSX?

10.5.x

> Were you using a callback or a blocking write?

Callback.

> Were you doing just output or input+output? Full duplex or half?

The reporter claims it crashes when selecting the fw sound card as input. And I use PA with one input only stream, and
one output only stream. They are not related in processing.

> What framesPerBuffer did you request?

paFramesPerBufferUnspecified with output latency requested = 0.04 s.

> What was happening at the time of the crash? Were you just starting or was the stream shutting down? Did the hardware change in some way? Did another application launch?

Hard to say, but I'd suspect the stream would just be about to start. No other type of change.

> Does the crash happen consistently? On more than one computer?

Don't know really, I'll know more tomorrow as I'll get my hands on a similar MBP with same OS X version (and an Apogee Duet 2 card
(USB) that experiences clicks during playback). I have a Saffire Pro 14 fw device to test with.

>  > Components 0x70057bd7 CustomEQViewEntryShim + 1063
>
> I see one reference to an ITunes crash here. But nothing helpful in the thread.

Yeah, I saw that one too, but as you say, not much to go on.

Regards,
/Rob 

________________________________________________________________________________
Ticket #195 Comment 1
Rob reports that it works fine on 10.6.7 but crashes on 10.5.x.

________________________________________________________________________________
Ticket #195 Comment 2
{{{
[4:53:55 PM] Robert Bielik: Thread 8 Crashed:
0 ...pple.audio.units.Components 0x70057bd7 CustomEQViewEntryShim + 1063
1 ...pple.audio.units.Components 0x70006636 0x70000000 + 26166
2 ...pple.audio.units.Components 0x7003ffd1 SystemOutputAUEntry + 2609
3 ...pple.audio.units.Components 0x70014afe AUHALEntry + 46
4 ...ple.CoreServices.CarbonCore 0x9161a899 CallComponentDispatch + 29
5 ...apple.audio.units.AudioUnit 0x9571faf3 AudioUnitRender + 67
6 libportaudio.dylib 0x0202ecd2 AudioIOProc + 1042
7 ...pple.audio.units.Components 0x70011e95 AUGenericOutputEntry + 9541
8 com.apple.audio.CoreAudio 0x9760b177 HP_IOProc::Call(AudioTimeStamp const&, AudioTimeStamp const&, AudioBufferList const*, AudioTimeStamp const&, AudioBufferList*) + 319
9 com.apple.audio.CoreAudio 0x9760ae68 IOA_Device::CallIOProcs(AudioTimeStamp const&, AudioTimeStamp const&, AudioTimeStamp const&) + 274
10 com.apple.audio.CoreAudio 0x9760ad44 HP_IOThread::PerformIO(AudioTimeStamp const&) + 1246
11 com.apple.audio.CoreAudio 0x9760911f HP_IOThread::WorkLoop() + 1239
12 com.apple.audio.CoreAudio 0x97608c43 HP_IOThread::ThreadEntry(HP_IOThread*) + 17
13 com.apple.audio.CoreAudio 0x975f9480 CAPThread::Entry(CAPThread*) + 96
14 libSystem.B.dylib 0x9325c055 _pthread_start + 321
15 libSystem.B.dylib 0x9325bf12 thread_start + 34
}}}

________________________________________________________________________________
Ticket #195 Comment 3
[4:52:28 PM] Robert Bielik: the stream is opened with flags paMacCoreChangeDeviceParameters | paMacCoreFailIfConversionRequired

________________________________________________________________________________
Ticket #195 Comment 4
I don't have 10.5 OS but Ross does so I reassigned to Ross.

________________________________________________________________________________
Ticket #195 Comment 5
Anyone with 10.5 and an external interface could test this. You just need to set up a pa test with separate input and output callback streams and the flags Rob mentions above.

________________________________________________________________________________
Ticket #195 Comment 6
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #195 Comment 9
Does anyone object to closing this as obsolete and WontFix?

________________________________________________________________________________
Ticket #196 Description
The polling loops in pa_wasapi.c ProcThreadPoll look like this:

while( WaitForSingleObject( hCloseRequest, next_sleep ) ){
	next_sleep = ...
	...process data...
}

They should look more like this:

while( WaitForSingleObject( hCloseRequest, next_sleep ) ){
	while( *** data available to process *** ){
		...process data...
	}
	next_sleep = ...
}

Also, for improved timing response polling thread should use a waitable timer object instead of WaitForSingleObject timeout (see current DirectSound implementatino for details).

---

On 1/09/2011 5:36 AM, Johannes Freyberger wrote:
> Hi,
> 
> perhaps this is already fixed in the latest release, but I wanted to 
> inform you about a modification I've done in pa_win_wasapi.c in fn 
> PA_THREAD_FUNC ProcThreadPoll(void *param)
> 
> there's a loop
> 
> if(!PA_WASAPI__IS_FULLDUPLEX(stream))
> 
> {
> 
> // Processing Loop
> 
> UINT32 next_sleep = sleep_ms;
> 
> while (WaitForSingleObject(stream->hCloseRequest, next_sleep) == 
> WAIT_TIMEOUT)
> 
> {
> 
> // Get next sleep time
> 
> if (sleep_ms == 0)
> 
> {
> 
> next_sleep = ThreadIdleScheduler_NextSleep(&scheduler);
> 
> }
> 
> which sometimes doesn't work correct for case S_OUTPUT and small buffers 
> below 10 msec. As far as I know WaitForSingleObject is not defined to 
> return exactly after next_sleep msecs but to wait a minimum of 
> next_sleep msecs. In my case next_sleep has been computed as 2 msecs, 
> but WaitForSingleObject normally takes at least 10 msecs to return which 
> results in a rather full output buffer. So it's not enough to read only 
> stream->out.framesPerBuffer each time, as this results in a overrun of 
> the buffer. I've added some lines (grey background), which set 
> next_sleep to 0, if there are enough samples for an immediaty 
> continuation of the loop:
> 
> // get available frames
> 
> if((hr = _PollGetOutputFramesAvailable(stream, &frames)) != S_OK)
> 
> {
> 
> LogHostError(hr);
> 
> goto thread_error;
> 
> }
> 
> // output
> 
> if(stream->bufferMode == paUtilFixedHostBufferSize)
> 
> {
> 
> if (frames >= stream->out.framesPerBuffer)
> 
> {
> 
> if( frames >= 2 * stream->out.framesPerBuffer )
> 
> next_sleep = 0;
> 
> else
> 
> next_sleep = sleep_ms;
> 
> if ((hr = ProcessOutputBuffer(stream, processor, 
> stream->out.framesPerBuffer)) != S_OK)
> 
> {
> 
> LogHostError(hr);
> 
> goto thread_error;
> 
> }
> 
> }
> 
> }
> 
> Perhaps this is already fixed, otherwise please check if you think this 
> is a reasonable solution.
> 
> Thanks for your great piece of software and best regards,
> 
> Johannes Freyberger
> 

________________________________________________________________________________
Ticket #196 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #196 Comment 2
That loop:

_while( *** data available to process *** ){
...process data...
}_

is impossible in case with WASAPI as it simply deadlocks inside self and fetches samples forever without exiting from self. It will cause inability to close the stream and will pop CPU consumption to 100%. I tested it on Windows Vista x64 with basic drivers and Realtek audio DAC.

________________________________________________________________________________
Ticket #196 Comment 4
Please explain why.

Your comment makes no sense to say it is "impossible". Perhaps you don't 
understand what is suggested. Why would an infinite loop be caused?



On 16/02/2012 8:33 PM, Dmitry Kostjuchenko wrote:
> *Ticket* alert by Dmitry Kostjuchenko
> <http://www.assembla.com/profile/dmitrykos> in space PortAudio

________________________________________________________________________________
Ticket #196 Comment 5
The reason is that WASAPI API function 'IAudioClient_GetCurrentPadding', which is used by PA's '_PollGetOutputFramesAvailable' will always return non 0 value, meaning that samples are ready for getting. Below there is example code which could be inserted instead of code in region: line 4791 - line 4820 and it will always loop inside self because '_PollGetOutputFramesAvailable' will always be returning non zero value for 'frames'.

The reason why it happens so is inside WASAPI implementation. Most probably WASAPI has waiting inside or blocks  'IAudioClient_GetCurrentPadding' until samples become available. Moreover such inner exhausting loop is not implemented in Microsoft's code samples for WASAPI.

Example of proposed inner loop which locks in infinite loop inside self:

<pre><code>for (;;)
{
    // get available frames
    if ((hr = _PollGetOutputFramesAvailable(stream, &frames)) != S_OK)
    {
        LogHostError(hr);
        goto thread_error;
    }
    
    if (frames == 0)
        break;

    // output
    if (stream->bufferMode == paUtilFixedHostBufferSize)
    {
        if (frames >= stream->out.framesPerBuffer)
        {
            if ((hr = ProcessOutputBuffer(stream, processor, stream->out.framesPerBuffer)) != S_OK)
            {
                LogHostError(hr);
                goto thread_error;
            }
        }
    }
    else
    {
        if (frames != 0)
        {
            if ((hr = ProcessOutputBuffer(stream, processor, frames)) != S_OK)
            {
                LogHostError(hr);
                goto thread_error;
            }
        }
    }
}
</code></pre>

________________________________________________________________________________
Ticket #196 Comment 6
I see. That is a good explanation :)

But I think the infinite loop is actually better than the current code. 
If you need it to sleep occasionally it could sleep if the available 
frames is < some granularity (timer granularity).


The "proposed" example infinite loop is only equivalent to an infinite 
loop if:

stream->bufferMode != paUtilFixedHostBufferSize

or

_PollGetOutputFramesAvailable() always returns >= 
stream->out.framesPerBuffer.

*at a minimum* for a fixed size framesPerBuffer the inner loop should 
still try to fill as many fixed-buffers as possible. Something like this 
pseudo code:

while( WFSO() ){
	frameCount = getFrameCount();
	while( frames > framesPerBuffer ){
		process( framesPerBuffer );
		frames -= famesPerBuffer;
	}
}


This means there is a bug in the "proposed" infinite loop:


 >          if (frames>= stream->out.framesPerBuffer)
 >          {
 >              if ((hr = ProcessOutputBuffer(stream, processor, 
stream->out.framesPerBuffer)) != S_OK)
 >              {
 >                  LogHostError(hr);
 >                  goto thread_error;
 >              }
 >          }

should be this:


while(frames>= stream->out.framesPerBuffer)
{
      if ((hr = ProcessOutputBuffer(stream, processor, 
stream->out.framesPerBuffer)) != S_OK)
      {
        LogHostError(hr);
        goto thread_error;
      }
      frames -= stream->out.framesPerBuffer;
}


Ross.





On 16/02/2012 9:07 PM, Dmitry Kostjuchenko wrote:
> *Ticket* alert by Dmitry Kostjuchenko
> <http://www.assembla.com/profile/dmitrykos> in space PortAudio

________________________________________________________________________________
Ticket #196 Comment 7
I agree with this part 'while(frames>= stream->out.framesPerBuffer)'. You are absolutely correct, 'frames' must be consumed until they are bigger than expected buffer size otherwise buffer overrun inside WASAPI will likely happen. 

Will update WASAPI implementation and commit the change!

________________________________________________________________________________
Ticket #196 Comment 9
Commited.

________________________________________________________________________________
Ticket #197 Description
A number of deprecated functions have been dropped from the linux HPI API.
Thus the asihpi host api needs to be updated to compile and run.

Note that replacement functions have been present in older HPI libraries for some years, so the new hostapi should work with them.

________________________________________________________________________________
Ticket #197 Comment 1
Fixed by [1760]

________________________________________________________________________________
Ticket #197 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #198 Description
CalculateOptimalBufferSize() in pa_mac_core.c computes the host buffer size based on the suggestedLatency parameter. r1762 adds a fix to try to ensure that the host buffer size is a multiple of the user buffer size. However, this isn't the case if the buffer size is then clamped to the minimum and maximum device buffer size.

I think the correct fix should be:

When requestedFramesPerBuffer is less than or equal to the maximum allowed device buffer size CalculateOptimalBufferSize() should return a multiple of requestedFramesPerBuffer based on suggestedLatency. The multiple should be chosen such that the total latency is greater than or equal to suggestedLatency, subject to constraints imposed by max allowable device buffer size.

When requestedFramesPerBuffer exceeds the maximum allowed device buffer size other heuristics may be appropriate (to be discussed).

________________________________________________________________________________
Ticket #198 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #199 Description
PA/ASIO should be subtracting off stream->asioInput/outputLatencyFrames from suggestedLatencyFrames before computing the buffer size.

________________________________________________________________________________
Ticket #199 Comment 1
Actually there is no way to reliably compute stream->asioInput/outputLatencyFrames prior to setting the host buffer size, since the documentation for ASIOGetLatencies() makes it clear that ASIOGetLatencies() returns values that are based on the currently configured block size.

Therefore this bug is not fixable. Comments added in r1776 explain why we don't try to subtract fixed latencies from suggestedLatency in the ASIO implementation.

________________________________________________________________________________
Ticket #199 Comment 2
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #200 Description
After some discussion with Rob we concluded that strings passed in PortAudio public APIs should encode multibyte characters (device names etc) as UTF-8.

PortAudio implementations may store strings internally however they like.

This applies to:
- device names
- native error messages

________________________________________________________________________________
Ticket #200 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #201 Description
Write a test that prints out host api and default latency values for each device. The output of this test need to be reviewed for each host API.

For each device print name, host API and the four default values:
			
    device index, device name, host api name, default high input, default low input, default high output, default low output


This is needed as part of the process of resolving ticket #202, #97

________________________________________________________________________________
Ticket #201 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #201 Comment 2
[[file:aNBhJqsDqr5yofdmr6bg7m]]

________________________________________________________________________________
Ticket #201 Comment 3
Here is a little patch that I put together.  For every device it prints a report like this
<pre><code>Device #1 (0 in, 2 out)
 Name                        = Built-in Output
 Host API                    = Core Audio
 Default low input latency   = 0.0100
 Default high input latency  = 0.1000
 Default low output latency  = 0.0100
 Default high output latency = 0.0201
</code></pre>
Could this be something acceptable?  Or a different display format should be used?

________________________________________________________________________________
Ticket #201 Comment 4
@wspinelli 

Thank you. The purpose of this test is to output data that we can combine into a survey of all host APIs. For this reason I think it would be best to have tabular output with one device per line.

For the table format I think either CSV or Textile (assembla) table mark up. Textile tables are just | separated values instead of comma separated (see: http://redcloth.org/hobix.com/textile/quick.html#tables). It's not necessary to vertically align things, although of course that would be nice. My personal vote is for the Textile format, then we can paste the output straight into the Wiki.

I think that you have the correct fields. I would like to see the columns in this order:

# First column with an X in it if any default latencies are zero, otherwise first column is blank.
# Device number
# Host API
# Name
# x in
# x out
# .. default latencies

I hope that is OK, if you have a better idea, please shout out.

________________________________________________________________________________
Ticket #201 Comment 5
@rbencina 

So be Textile tabular format with vertically aligned columns =)
Using a format compatible with the wiki is for sure the best choice

________________________________________________________________________________
Ticket #202 Description
Run the test from ticket #201 on each host API

Verify that the following criteria from #97 is met:
- All host APIs return non-zero values for deviceInfo->default*Latency

||= host api =||= status=|| 
||alsa			||	?		||
||asihpi		||	?		||
||asio			||	?		||
||coreaudio		||	?		||
||dsound		||	?		||
||jack			||	?		||
||oss			||	?		||
||wasapi		||	?		||
||wdmks			||	?		||
||wmme			||	?		||

________________________________________________________________________________
Ticket #202 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #203 Description
- all host apis should produce non-glitching audio with default high and low latency

Need to choose tests that can verify this for input and output. Then run with each host API on each platform (possibly Win XP, Vista, Win7 separately).

Possibly the loopback test can be used for this. Need to check.

Ideally we would perform this test on many computers. But at a minimum we should test every host API at least once.

Required for resolving ticket #97. Do #201/#202 test first.

||= host api =||= status=|| 
||alsa			||	?		||
||asihpi		||	?		||
||asio			||	?		||
||coreaudio		||	?		||
||dsound		||	?		||
||jack			||	?		||
||oss			||	?		||
||wasapi		||	?		||
||wdmks			||	?		||
||wmme			||	?		||

________________________________________________________________________________
Ticket #203 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #204 Description
PortAudio returns default latency values that applications may use to configure audio buffering without further user intervention. These values are expected to provide both stable audio (no glitches) and provide the lowest feasible latency.

Many native APIs do not provide adequate guidance as to how buffer sizes should be dimensioned. We could perform a survey of many machines to better determine workable defaults.

Some tests have already been written. See tickets #185, #186 however, at this time we have not committed to running them on a large number of machines as would be required to have a high confidence our values are good.

Could possibly use a loopback automated test instead of the manual test procedure.

This ticket is about conducting a large scale test (perhaps crowdsourcing many novice users with a highly usable UI). 

________________________________________________________________________________
Ticket #204 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #205 Description
Code review is required to close out a number of the latency related meta tickets: #97, #98, #99, #181

Next step for this ticket: Write a detailed test plan outlining which areas of code need to be reviewed, what tasks need to be performed, a checklist of things to check for each area of code (these should address all of the resolution criteria of the above mentioned tickets). Things to check would include (but this needs to be fleshed out properly):

- Does the code look finished (no fixmes, comments etc)
- Does the algorithm appear to follow the suggested form? Does it take into account the expected variables?
- Write a brief description of the algorithm used for each area and put it in the wiki.
- Review the output of the patest_suggested_vs_streaminfo_latency graphs

Code review with attention to specific latency parameters. Documenting implemenation approaches on wiki

	#98 needs code review of interpretation of suggested latency values.  A short summary description of the algorithm used should be added to the wiki as the output of this review.

	#99 needs code review of interpretation of suggested latency values with specific attention to allowing the values to go to zero and not artifically limiting lowest latency.

	#181 needs code review of the way stream info latencies are computed. A short summary description of the algorithm used should be added to the wiki as the output of this review.

	#97 needs a code review of the way default latency values are computed for each host api. A short summary description of the algorithm used should be added to the wiki as the output of this review.

	Need to write up a checklist for the code review.


Production of patest_suggested_vs_streaminfo_latency graphs for each host api and visual review of graphs according to specific criteria required for each ticket).

	#99 requires review of patest_suggested_vs_streaminfo_latency graphs to check that the lowest selectable latency is in line with the algorithm observed in the code review.

	#181 needs visual review of patest_suggested_vs_streaminfo_latency graphs (see criteria above.
	
	Need to document the visual review criteria. Perform the review. 
	
	This task could be combined with the code review. I.e. Code is reviewed, graphs are generated, issues are examined.

________________________________________________________________________________
Ticket #205 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #206 Description
Test: run the loopback test with each host API and compare the loop latencies with the reported stream latencies.

Document anomalies below.

This is intended to be part of a review of reported stream latencies #181

||= host api =||= status=|| 
||alsa			||	?		||
||asihpi		||	?		||
||asio			||	?		||
||coreaudio		||	?		||
||dsound		||	?		||
||jack			||	?		||
||oss			||	?		||
||wasapi		||	?		||
||wdmks			||	?		||
||wmme			||	?		||

________________________________________________________________________________
Ticket #206 Comment 1
TRAC migration: propagating ticket status from TRAC

________________________________________________________________________________
Ticket #207 Description
Complete tutorial with utility and info about querying devices/opening non-default devices.

Tutorial is located in /doc/src/tutorial and gets rendered on the web here: [[url:http://portaudio.com/docs/v19-doxydocs/tutorial_start.html]]

________________________________________________________________________________
Ticket #208 Description
For improved timing response polling thread should use a waitable timer object instead of WaitForSingleObject timeout (see current DirectSound and WDMKS implementation for some code).

This is was previously raised in ticket #196, it should have been a separate ticket.

Waitable Timer Objects have been shown through testing to provide more stable (lower max jitter) timing for polling than using a WFSO timeout. We've done various experiments on this. Robert has done some for the WDM/KS implementation, and I've been involved in some 3rd party testing of this with Abeem. There is a test app here, and results from many systems here: http://www.abeem.eu/downloads/abeem_LLSTT.html if you would like to analyse them

According to this thread, timeBeginPeriod(1) also helps:
http://music.columbia.edu/pipermail/portaudio/2012-May/014010.html


________________________________________________________________________________
Ticket #208 Comment 1
The bug described by #196 ticket to my view does not affect current source because if frames are more than framesPerBuffer they will be processed all until count becomes less then size of the fixed buffer. E.g. currently it is:

if (stream->bufferMode == paUtilFixedHostBufferSize)
{
    while (frames >= stream->out.framesPerBuffer)
    {
        process ...
    }
}

Thus the overrun will not happen. Polling for available frames after the processing in a busy loop until frames are 0 loads CPU too much, even though processing exits outside to the WaitForSingleObject loop. So it is not optimal to my view.

________________________________________________________________________________
Ticket #209 Description
Could be improved with info from latency and buffering wiki page

meaning of default sample rate needs to be defined

________________________________________________________________________________
Ticket #210 Description
ASIO drivers use timeGetTime() as a time base.

timeGetTime() returns a DWORD (32 bits)

Pa_GetStreamTime() converts the DWORD to a double. But when the DWORD wraps, the stream time will reset to zero. On the other hand, the driver uses a 64 bit timer storage for systemTime, so it will not wrap.

Although I havn't tested it, what I would expect to happen is that after 49 days the stream time returned by Pa_GetStreamTime would reset to zero, but the stream time reported in the callback timestamps would continue incrementing.

One possible solution is to keep a 64 bit accumulator and accumulate deltas between sequential timeGetTime() calls. I don't think this can be easily implemented re-entrantly though. Maybe something with atomics would work?

________________________________________________________________________________
Ticket #210 Comment 1
Here's a mostly race-free solution (except for the case where the stream is started straddling the tgt rollover boundary).


Divide the time into 4 sub-epochs per 49 days based on the high bits of the timeGetTime() DWORD result:

00 			sub-epoch 1
01			sub-epoch 2
10			sub-epoch 3
11			sub-epoch 4

Maintain two separate DWORDS that are the high 64 bits of the timestamp, these act as a kind of double-buffer as you'll see below:

tgtSubEpochs1And2HighDWord
tdtSubEpochs3And4HighDword

In principle, the high dword is incremented once each time timeGetTime() rolls over.


A 64 bit timestamp is formed by: 

DWORD t = timeGetTime();

DWORD highDword = ( t & 0x80000000UL ) ? subEpochs3And4HighDword : subEpochs1And2HighDWord;

DWORD64 t64 = (((DWORD64)subEpochs1And2HighDWord)<<32) | t;



Because we would like our time routine to be callable reentrantly like timeGetTime() we don't want to update our high words in our getTime function. Luckily in PortAudio we have the PortAudio callback, which runs very regularly (compared to every 49 days) and in this callback we can update the two sub-epoch high words at appropriate times.

We do not want to increment the high dwords at the point that timeGetTime() rolls over, because that could create a race condition with any currently running GetStreamTime() calls. Instead we perform the rollover approximately 12 days prior on the transition from sub-epochs 3 to 4, as follows:

on the transition from sub-epoch 3 to 4 we increment subEpochs1And2HighDWord in preparation for the next tgt rollover. 

on the transition from sub-epoch 1 to 2 we copy the current value of subEpochs1And2HighDWord to tdtSubEpochs3And4HighDword so it is ready for 12 days time when the transition from epoch 2 to 3 occurs.

________________________________________________________________________________
Ticket #210 Comment 2
Some kind of fix for stream start during epoch rollover is probably possible by checking and synchronising both highword counters in the first callback.

________________________________________________________________________________
Ticket #211 Description
Owen Williams reports:
> The Native Instruments Audio4DJ soundcard requires a very specific format when recording audio --
SND_PCM_FORMAT_S24_3BE.  

This is not supported in PortAudio prior to r1815.

Dmitry committed fixes for this in r1815 and r1822 however they are being rolled back for now pending review.

The most recent code from Dmitry is attached to this ticket.

Proposed fixes to this issue were comitted to trunk but have now been moved to a branch. the original commits were:
http://www.assembla.com/code/portaudio/subversion/changesets/1815
http://www.assembla.com/code/portaudio/subversion/changesets/1822

The new branch is here:
https://subversion.assembla.com/svn/portaudio/portaudio/branches/alsa_hw_endian_subdevice

________________________________________________________________________________
Ticket #211 Comment 1
[[file:blGlWuFY4r4yrBacwqjQWU]]

________________________________________________________________________________
Ticket #211 Comment 2
My reading of this issue is as follows:

Portaudio formats are endian-ambiguous, and effectively adopt the endianess of the host platform.  In the pa_linux_alsa code these are translated into Alsa formats based on the platform/cpu endianess, and these are used in setting the stream format.  When using the 'hw' devices Alsa is prevented from making format conversions, so if this does not correspond to the sound card native format, an error will occur when attempting to set the stream format.

Mostly this is fine since the majority of desktop systems are x86 (LE) and from looking at the Alsa-driver source code, all PCI cards support LE (some also allow BE) and nearly all USB devices are LE.

However, the Audio4 DJ unit unusually operates in BE data format and this is set in the Alsa driver snd-usb-caiaq.  When Portaudio, hosted on x86, attempts to set the format of the 'hw' device it requests SND_PCM_FORMAT_S24_3LE and this will fail.  But note a simlar problem would happen with LE cards on BE PowerPC platforms etc  The problem will occur whenever the native soundcard endianess does not correspond to to the host endianess, and the raw 'hw' device is used.  (Network audio would presumably also be BE?)

One straightforward solution should be to use the 'plughw' device, which will convert the format; the simplest way to do that with Portaudio at present is to set the environment variable 'PA_ALSA_PLUGHW' non-zero ( a value of 1 will do).  I would be interested to know if that is effective in this case.

Alan

________________________________________________________________________________
Ticket #211 Comment 3
Alan wrote:
> Portaudio formats are endian-ambiguous

By definition all PortAudio formats are in native (host) byte order.

Can you confirm: ALSA formats always explicitly specified BE or LE?

Yes, as a step along the way we need to hear from Owen and RJ whether using plughw solves the problem.

________________________________________________________________________________
Ticket #211 Comment 4
Alsa has both cpu-endian and explicit BE/LE format specifiers (except the 24-bit ones are explicit only).  They are correctly used in pa_linux_alsa to request host-platform endianess.  But that format is not available from Audio4DJ without Alsa converting the endianess.  There is no mechanism in Portaudio-alsa to fall-back to whatever format is available, and pass-on the data for the app to sort out (which would probably be no use anyway).

Using the 'hw' device Alsa always passes the stream on raw and so it carries the endianess of the soundcard even if that differs from the host. 

________________________________________________________________________________
Ticket #211 Comment 5
> There is no mechanism in Portaudio-alsa to fall-back to whatever 
> format is available, 

So if I understand correctly, hardware that does not support one of the PortAudio host-endian sample formats is not compatible with PortAudio/ALSA using the hw device?

> and pass-on the data for the app to sort out 
> (which would probably be no use anyway).

The PortAudio API only supports passing data to PA clients in host byte order. Whether it would be of use isn't relevant here since, there is no plan to change the PA public API to support non-host byte order streams..


________________________________________________________________________________
Ticket #211 Comment 6
Even careful terminology can be ambiguous, I am realising!  I may have given the wrong impression.

Alsa only uses explicit-endian formats at the hardware/driver level.  Each driver will report it's capabilities, which may be single or multiple, and could include both BE and LE variants of the same format.  For most common formats, additional endian-ambiguous definitions are provided that are defined from the endian-specific ones at build-time in a header file, depending upon the host endianess.

So, in the case of the Audio4DJ unit, unless Portaudio expressly uses SND_PCM_FORMAT_S24_3BE when setting the pcm format for the 'hw' device on a LE platform, that params set will fail.  Using 'plughw' all the host formats, (including floats, alaw etc) should be acceptable, with Alsa doing whatever is necessary.  The 'hw' device works on the basis that 'you get what the hardware can give', in every respect of the data stream - channels, formats (+ endianess), rates.

Note also that this is an unusual 24-bit format, 24 bits in 3 bytes.  The much more common SND_PCM_FORMAT_S24_LE (or BE) uses 24 bits in 4 bytes.  Most 24 bit PCI cards use the latter, as far as I am aware.  The Portaudio code does seem to ignore that distinction.


________________________________________________________________________________
Ticket #212 Description
Owen Williams reports:
The Native Instruments Audio4DJ soundcard uses subdevices, like hw:1,0,0 and hw:1,0,1.  
PortAudio did not expose these devices as separate portaudio devices.

This is not supported in PortAudio prior to r1815.

Dmitry committed fixes for this in r1815 and r1822 however they are being rolled back for now pending review.

The most recent code from Dmitry is attached to this ticket.

Proposed fixes to this issue were comitted to trunk but have now been moved to a branch. the original commits were:
http://www.assembla.com/code/portaudio/subversion/changesets/1815
http://www.assembla.com/code/portaudio/subversion/changesets/1822

The new branch is here:
https://subversion.assembla.com/svn/portaudio/portaudio/branches/alsa_hw_endian_subdevice

________________________________________________________________________________
Ticket #212 Comment 1
[[file:cD5BmKFY4r4BhRacwqjQXA]]

________________________________________________________________________________
Ticket #213 Description
The semantics of 'xfer_align' in Alsa were changed (essentially, removed) from Alsa version 1.0.16 onwards, and the function marked 'Deprecated'.  This results in a build warning on all more recent Alsa versions, and the function is anyway a 'noop' stub.

To maintain backwards compatibility the call cannot simply be removed from pa_linux_alsa, as Ecasound devels found out, but needs to be called with the older Alsa versions.

See http://permalink.gmane.org/gmane.linux.alsa.devel/67752 for Ecasound notes.

________________________________________________________________________________
Ticket #214 Description
There have been a number of reports that Portaudio can cause Pulseaudio to crash, as a result of a call to snd_config_update_free_global() in Terminate().  It has been traced as a bug in Alsa-lib, and fixed in Alsa-lib version 1.0.24.  However several apps using Portaudio patch to delete the call in Portaudio.

This issue needs investigating further, to formulate a policy going forward, eg whether to remove the call, do so on certain Alsa-lib versions, workaround, or ignore.

________________________________________________________________________________
Ticket #215 Description
The 'defaultSampleRate' reported at present on the Alsa device 'default' is 44100, in-spite of the fact that 48000 would normally be better, since the Alsa 'default' device includes 'dmix' runnig at 48000Hz.  Since the Alsa 'default' device also includes the 'plug' converter, it is able to run at 44100, resampling to 48000 before the dmix mixing stage.  However, such an arrangement is not ideal (the built-in rate converter is not considered particularly good) and so it would be better to identify the underlying, non-resampled rate and report that as the default, or preferred, rate.

________________________________________________________________________________
Ticket #215 Comment 1
The solution is simply to disable sample rate conversion when testing for the default sample rate in GropeDevice() by calling snd_pcm_hw_params_set_rate_resample() beforehand.  If the device supports 44100 without resampling, that will be set as the default rate, otherwise the nearest non-resampled rate will be used, normally 48000.

I propose adding this one line to trunk if there are no objections.

________________________________________________________________________________
Ticket #215 Comment 2
So if I understand correctly, if the user is using dmix as the default device, this approach will always report the non-converted current rate of dmix, even if dmix is not running at 48000. Is that correct?

Hardwiring to 48000 doesn't make much sense, but polling for the actual non-converted rate of the device makes a lot of sense. The poll search order should be the same as is used in other host APIs. This should be the algorithm for determining default sample rate for all devices, not just the "default" device of course.

________________________________________________________________________________
Ticket #215 Comment 3
Yes, with the proposed solution it would show the underlying rate of dmix, which I would think is the most important value to know.  If a user configured dmix to use 44100, that would show as the default rate.

The semantics in pa_alsa is actually quite simple, it just requests the rate closest to 44100, so, if available, 48000 is the next choice by Alsa.  In normal desktop setups one or other of those 2 would be available on all devices.  But anyway the nearest available rate should be obtained in all circumstances.  This would apply to all devices.

It seems quite a safe change, but just one that may surprise some users of apps that incorporate Portaudio.

________________________________________________________________________________
Ticket #215 Comment 4
That all sounds to be in line with the way PA is expected to work.

You would never expect using defaultSampleRate to force sample rate conversion.

________________________________________________________________________________
Ticket #215 Comment 5
The simple fix (as described above) of disabling sample-rate conversion, has now been committed, r1832.

________________________________________________________________________________
Ticket #216 Description
Guy Harris reported a problem by email with the Mac build that affects Mountain Lion builds.

http://music.columbia.edu/pipermail/portaudio/2012-August/014337.html

He later submitted a patch by email:

http://music.columbia.edu/pipermail/portaudio/2012-August/014339.html

I have attached the patch to this ticket.

I do not have Mountain Lion so I cannot test the build.  But Peter Kirn, in a private email, says:

  _that 11 August diff linked below works perfectly. ;) Note, autoreconf -if first, and sudo make install is in fact an ideal last step._



________________________________________________________________________________
Ticket #216 Comment 1
[[file:a5A5ve8wyr4B1DacwqjQWU]]
patch for configure to fix this problem

________________________________________________________________________________
Ticket #216 Comment 2
Algo Guy wrote:

> And once you've applied that, un-comment the include of <AudioToolbox/AudioToolbox.h>, otherwise, on Lion, AudioDeviceID doesn't get defined and the build fails:
> 
> 	http://www.fluxforge.com/blog/building-portaudio-under-os-x-107-lion

________________________________________________________________________________
Ticket #216 Comment 3
I applied the patch on Mac and tried: autoreconf -if
It failed because config.sub was not found.
So I applied the patch on Ubuntu Linux and did autoreconf on Linux.
The result worked on both Mac and Linux.


________________________________________________________________________________
Ticket #216 Comment 4
Applied patch in SVN rev 1864. Tested on Mac and Linux.

________________________________________________________________________________
Ticket #217 Description
Running a PortAudio application under Wine on a Linux host results in a
crash on startup.  It turns out that WDM Kernel Streaming is trying to
initialize but fails due to missing DLLs.

The error code path in PaWinWdm_Initialize() calls Terminate() to clean
up - but in this case it's so early that wdmHostApi has not been
initialized yet.  The result is that we dereference an uninitialized
pointer.

Fix: Set wdmHostApi to NULL.

________________________________________________________________________________
Ticket #218 Description
We are using a number of APIs that Apple have marked as deprecated. Some were deprecated in OS X 10.5, OS X 10.6, others in OS X 10.8.

We are using the old APIs for compatibility with older OS X versions. At this stage we wish to continue to support OS X 10.4 and later, so upgrading to APIs added in 10.5 and later is not an option.

The use of deprecated APIs presents two minor issues:

# The compiler is emitting deprecated warnings, so we can't use -Werror as some would like (this can be addressed by removing -Werror, using -Wno-deprecated or using a #pragma, see: http://stackoverflow.com/questions/2622017/suppressing-deprecated-warnings-in-xcode )
# The requirement to link with Carbon.framework concerns some people

At this stage there are no obvious technical advantages to moving to the newer APIs. Our plan is to deal with these either when the deprecated APIs are removed completely or when we stop supporting older OS X versions for other reasons. The API functions are listed below along with comments on the migration path.

h1. Core Audio Property Accessor APIs
We use the following old-style HAL Property Accessor functions:

* AudioDeviceGetPropertyInfo
* AudioDeviceGetProperty
* AudioDeviceAddPropertyListener
* AudioDeviceRemovePropertyListener

Since OSX 10.5 these Core Audio HAL APIs have newer direct replacements. 
See http://developer.apple.com/library/mac/#technotes/tn2223/_index.html

h1. Audio Converter Services AudioConverterFillBuffer

Since OS X 10.5 *AudioConverterFillBuffer* is deprecated in favor of AudioConverterFillComplexBuffer.
See https://developer.apple.com/library/mac/#documentation/MusicAudio/Reference/AudioConverterServicesReference/Reference/reference.html

h1. Component Manager APIs for instantiating Audio Units (requires Carbon.framework)
These Component Manager functions are used for instantiating Audio Units. They require linking with Carbon.framework. 

*  "_CloseComponent", referenced from:
 *      _CloseStream in libportaudio.a(pa_mac_core.o)
 *    _OpenAndSetupOneAudioUnit in libportaudio.a(pa_mac_core.o)
*  "_FindNextComponent", referenced from:
 *      _OpenAndSetupOneAudioUnit in libportaudio.a(pa_mac_core.o)
*  "_OpenAComponent", referenced from:
      _OpenAndSetupOneAudioUnit in libportaudio.a(pa_mac_core.o)

Since OS X 10.6 they are superseded by functions in Audio Component Services. The new functions reportedly have the same signatures. We could potentially dynamically load the old or new functions depending on availability (as we do for DirectSound APIs on Windows).
See https://developer.apple.com/library/mac/#documentation/AudioUnit/Reference/AudioComponentServicesReference/Reference/reference.html

h1. Gestalt function (requires Carbon.framework)
We use the *Gestalt* function to check the OS version to execute some code for OSX10.6 and later. 
 *  "_Gestalt", referenced from:
  *      _PaMacCore_Initialize in libportaudio.a(pa_mac_core.o)

Since OS X 10.8 the Gestalt function is deprecated. It requires linking with Carbon.framework.
See https://developer.apple.com/library/mac/#documentation/Carbon/Reference/Gestalt_Manager/Reference/reference.html#//apple_ref/doc/uid/TP30000036-CH202-SW1 
A thread on Stackoverflow proposes several alternatives to Gestalt(), none of which seem great while Gestalt() is still available: http://stackoverflow.com/questions/11072804/mac-os-x-10-8-replacement-for-gestalt-for-testing-os-version-at-runtime

h1. Note on CF* CoreFoundation APIs
We use a number of Core Foundation functions such as CFString functions, CFRelease etc. These are not deprecated. However, we are currently linking against Carbon.framework for these. We should be linking against CoreFoundation.framework

________________________________________________________________________________
Ticket #219 Description
In a number of places including StartStream and StopStream an ERR_WRAP macro is used to early-out after an error. This results in the remaining objects being left in an unknown state. In StopStream for example, no further cleanup is performed.

Functions that return an error should at least try to leave the stream object in a stable state. ie StopStream should try to close/stop all resources. If StartStream fails half way through it should try to stop the parts that have already been started.


________________________________________________________________________________
Ticket #220 Description
A patch to add a new Host API for OpenBSD's native "sndio" infrastructure is now in a branch pending review.

https://subversion.assembla.com/svn/portaudio/portaudio/branches/OpenBSD_sndio 

If you are logged in to Assembla you should be able to review it here:

https://www.assembla.com/code/portaudio/subversion/commit/1887

If you are logged in you can click on the litte green + signs when you hover over lines in the diff to add comments.

Please add any additional comments to this ticket.

________________________________________________________________________________
Ticket #220 Comment 1
I've reviewed the code and have annotated the commit here:
https://www.assembla.com/code/portaudio/subversion/commit/1887
Phil has added some comments too.

Some main points:

The code looks clean but doesn't conform to our usual naming standards. There are many unintelligible variable names that should be fixed. I have not offered suggestions for all of them but am happy to offer advice if needed.

Stream timestamps and GetStreamTime seem to be (1) not implemented, as sndioOnMove is never registered with the OS, and (2) possibly not implemented correctly, since the timestamp should be monotonic while the stream is open. It is also normal for it to be high resolution. ie have microsecond accuracy and be usable for things like scheduling MIDI events. A sample counter updated every buffer update doesn't have this property.

There are some issues with the handling of the user's data buffer parameter for ReadStream and WriteStream in the non-interleaved case.

The debug prints should be cleaned up -- the non-real-time safe ones should use PA_DEBUG(). Others could stay as-is, ideally with a comment indicating that enabling them will break real-time

There are other significant comments that I've added to the commit review. Phil has also added some comments there.

We can discuss this further on the mailing list.

________________________________________________________________________________
Ticket #221 Description
If PortAudio encounters an error from the ASIO driver after successfully loading it, it will abort the whole Pa_Initialize process.

The current MOTU "MOTU PCI Video ASIO" triggers this behavior when the device is not connected and powered on,

The driver loads correctly but then returns an error (ASE_NotPresent) from ASIOGetChannelInfo at line 1280 of pa_asio.cpp -- PA was interpreting this as a fatal error and aborting the entire Pa_Initialize process.

I could reproduce the issue by installing the MOTU drivers here:
"HDX-SDI Windows Complete Software Install and Firmware Update"
http://www.motu.com/video-download/windows-downloads.html

Calling Pa_Initialize without a MOTU device connected caused Pa_Initialize to fail.

________________________________________________________________________________
Ticket #221 Comment 1
Committed possible fix in r1890

In summary: I moved most of the device parsing code to a separate function. If any error is encountered during this phase the device is skipped, but Pa_Initialize() will proceed with other devices and no error will be returned.

________________________________________________________________________________
Ticket #221 Comment 2
Marking as Fixed. This fix shipped with AudioMulch 10 months ago and no further issues have been reported.

________________________________________________________________________________
Ticket #222 Description
#221 (total PA failure if just one ASIO driver fails) indicates that we may need to rethink how PA deals with errors when initializing.

Do we want a single driver failure to fail the whole of PA? or is skipping that device more appropriate?

Similarly, if a host API fails should the whole of PA fail?

There appear to be two issues:

1. Should a single-point failure (driver or host API) trigger a full PA failure during Pa_Initialize()?
2. If the answer to (1) is no, (how) do we report error information about skipped devices? Some kind of formal logging mechanism for non-fatal errors might be appropriate.

Right now the only way to get diagnostic information about non-fatal errors is to enable error logging (PA_DEBUG). PA_DEBUG is not consistently implemented. 

________________________________________________________________________________
Ticket #224 Description
from Tobias Erichsen

Patch in attachment

Original discussion thread here:

http://comments.gmane.org/gmane.comp.audio.portaudio.devel/10876

________________________________________________________________________________
Ticket #224 Comment 1
[[file:bJO152Lxir458hacwqjQYw]]

________________________________________________________________________________
Ticket #224 Comment 2
WMME has now been patched in trunk r1925. https://www.assembla.com/code/portaudio/subversion/changesets/1925 

The following WMME functions that deal with strings are still broken: PA_MME_SET_LAST_WAVEIN_ERROR, PA_MME_SET_LAST_WAVEOUT_ERROR, PaMme_SetLastSystemError

________________________________________________________________________________
Ticket #224 Comment 3
DirectSound has now been patched in trunk r1927. https://www.assembla.com/code/portaudio/subversion/changesets/1927 

Note that DirectSound doesn't have the same problem with UNICODE error strings that WMME does, because DirectSound currently has no error string handling whatsoever(!)

________________________________________________________________________________
Ticket #224 Comment 4
The applied patches use the ANSI code page when the "_UNICODE" symbol is not defined. The WMME patch just copies windows strings directly with strcpy(), and the DirectSound patch converts the string from unicode to the ANSI code page. This doesn't seem right.

My understanding is that we have specified the PortAudio string encoding to *always* use UTF8. That means that if PA gets an ANSI code page string from a non-unicode Windows API, it should convert it to UTF8.

If that is the case I need to make another patch that converts Windows 8-bit strings from the ANSI code page to UTF8.

Does that seem right?

________________________________________________________________________________
Ticket #224 Comment 5
Yes, I think so, since Windows 8-bit strings (or multibyte strings) are not UTF-8, a conversion would be needed in this case also. In WDM-KS I handle this by always using the Wide version of Win32 API functions, regardless of _UNICODE being defined or not, that way I only have to handle Unicode -> UTF-8 encoding.

________________________________________________________________________________
Ticket #225 Description
A field should be added last to the PaDeviceInfo struct as follows:

<pre><code>
/** A structure providing information and capabilities of PortAudio devices.
 Devices may support input, output or both input and output.
*/
typedef struct PaDeviceInfo
{
    int structVersion;  /* this is struct version 2 */
    const char *name;
    PaHostApiIndex hostApi; /**< note this is a host API index, not a type id*/
    
    int maxInputChannels;
    int maxOutputChannels;

    /** Default latency values for interactive performance. */
    PaTime defaultLowInputLatency;
    PaTime defaultLowOutputLatency;
    /** Default latency values for robust non-interactive applications (eg. playing sound files). */
    PaTime defaultHighInputLatency;
    PaTime defaultHighOutputLatency;

    double defaultSampleRate;

    /** A pointer to a host API specific data structure containing additional information of the
        PA device for use by other applications, such as portmixer f.i. The pointer should be cast
        to host API specific struct in supplied header files.
        
        For host APIs not implementing this, hostApiSpecificDeviceInfo shall be set to NULL. 
    */
    const void* hostApiSpecificDeviceInfo;

} PaDeviceInfo;
</code></pre>

Related to ticket #169

________________________________________________________________________________
Ticket #226 Description
Confusion ensues:

http://stackoverflow.com/questions/22616016/why-should-i-use-pautil-allocatememory-instead-of-malloc/23226628#23226628

The examples shouldn't be using private APIs. Only those functions in portaudio.h should be used in examples.

PaUtil_AllocateMemory is not an exported symbol.

That example is also using the ring buffer code too (!). I'm not sure whether it should be an example if it uses private APIs like this.

At the minimum it should be very clearly documented that this is an example of using the ring buffer code, and I don't think there is a reason to use PaUtil_AllocateMemory over malloc().

________________________________________________________________________________
Ticket #226 Comment 1
You are utterly and entirely correct, I thought the text in the brief would be enough but now that I read it again it can definitely be taken as a valid example of the *public API*, which of course it was not meant to be. I'll update the text to reflect this, and also to point out that in order for the code to work, you need static linking to PA.

I'm also for removing it or moving it to some other location in SVN.

________________________________________________________________________________
Ticket #226 Comment 2
similar problem with paex_record_file.c I think

________________________________________________________________________________
Ticket #227 Description
Dinesh Iyer reported this bug. Excerpt from original email follows:

I am designing an application which allows users to playback multiple audio signals at different sample-rates to the same audio device. I implement this by opening a new stream to playback each signal. I let CoreAudio perform the mixing. The playback does not start simultaneously i.e the user can playback one signal, then after an arbitrary amount of time playback the next one even when the first signal is playing.

The stall occurs about 30% of the time. 

I am able to consistently reproduce a stall when I am playing back two signals at 8192 hertz and attempt to open a stream at 44100 hz. The stall occurs at __psync_mutexwait in the call to Pa_OpenStream(). 

I am not receiving this stall when I match the sample rates of all my streams.

I am able to reproduce this using both the March 2011 and Jan 2014 versions of the library.

________________________________________________________________________________
Ticket #227 Comment 1
Dinesh wrote:
I am using callback API's. The streams operating at 8192 Hz use a buffer
size of 256 samples and the stream operating at 44.1 Khz is operating is
using a buffer of 1024 samples.


I was inspecting the threads in my application when I receive the stall. I
noticed that the thread "com.apple.audio.IOThread.client" also has a call
to __psynch_mutexwait() on the top of the call-stack. I have observed this
repeatedly.

I am not doing any file I/O operations in the callback.

I am using a TBB::concurrent_bounded_queue to stream data from my
application's thread to the portaudio callback. A brief description of my
code.
Application Thread:
1. Break up data into chunks of buffer size.
2. Put each chunk in a newly allocated buffer AND
3. Push them into a concurrent queue.

In callback,
1. Pop the buffer at the top of the queue
2. Copy the popped buffer to output buffer pointer provided by the callback.
3. Free the popped buffer.

So there does appear to be memory allocation/deallocation. However, I
recently changed my architecture. I am able to reproduce this stall even in
my older architecture when no alloc/free was performed after the stream was
opened and started.


I modified my application to ensure that no buffers are pushed into the
queue on the main application thread and no pop's from the queue in the
callback thread (only writing zeros to output) and I still get the stall at
the call to PaOpenStream(). No operations are being performed on the TBB
queue.

________________________________________________________________________________
Ticket #228 Description
ksguid.lib has caused build problems for PA users:

[Portaudio] ksguid.lib problem
http://music.columbia.edu/pipermail/portaudio/2014-February/015774.html

[Portaudio] ksguid.lib?
http://music.columbia.edu/pipermail/portaudio/2013-October/015409.html

[Portaudio] Please help! linker error regarding 'ksguid.lib'
http://music.columbia.edu/pipermail/portaudio/2012-October/014471.html

[Portaudio] Needing ksguid.lib for VS2008 build
http://music.columbia.edu/pipermail/portaudio/2011-August/012848.html

[Portaudio] ksguid.lib and PA_WDMKS_NO_KSGUID_LIB
http://www.music.columbia.edu/pipermail/portaudio/2011-October/013004.htm


Apparently ksguid.lib is not available in the Windows 8.0a Platform SDK (see e.g. https://bugzilla.mozilla.org/show_bug.cgi?id=731807 and discussion here: 

[Portaudio] ksguid.lib (was: Re: Building examples with VC++ from	VS2005)
http://www.music.columbia.edu/pipermail/portaudio/2014-December/016476.html


PortAudio currently has two separate dependencies on ksguid.lib:

1. The MSVC project file has AdditionalDependencies="ksguid.lib". I believe that this is for the wdmks host API, e.g. ksguid symbols are used directly by src/hostapi/wdmks/pa_win_wdmks.c (e.g. search for KSDATAFORMAT_*).

2. We conditionally provide pa_KSDATAFORMAT_* symbols at pa_win_wdmks_utils.c line 69 onwards, with an option to depend on ksguid.lib using #pragma comment( lib, "ksguid.lib" )  (pa_win_wdmks_utils.c is used by DirectSound and WMME channel detection logic).

Note that pa_win_wasapi.c defines its own copy of some  pa_KSDATAFORMAT_SUBTYPE_IEEE_FLOAT guids.

*Proposal:* centralise definition of pa_KS* GUIDs in a separate pa_win_ksguid.c/h file with no dependence on ksguid.lib. For each GUID, where the STATIC_* macro is available, use it. Otherwise hardcode the value as currently done in pa_win_wasapi.c.

________________________________________________________________________________
Ticket #228 Comment 1
r1944 does the following: Removed MSVC dependence on ksguid.lib from src/os/win/pa_win_wdmks_utils.c (ksguid.lib is no longer in Platform SDK 8.0). Always use static instances of GUIDs like the GCC builds do. Removed ksguid.lib from MSVC project file. The following symbols are no longer used: PA_WDMKS_NO_KSGUID_LIB, PAWIN_WDMKS_NO_KSGUID_LIB; removed them from CMakeLists.txt and the MSVC project file.

Notes:

- With regard to pa_win_wdmks_utils.c this change has the same effect as if  PA_WDMKS_NO_KSGUID_LIB was always defined.

- Change should only impact MSVC builds, as GCC never used ksguid.lib

- Change is mostly relevant to src/os/win/pa_win_wdmks_utils.c

- Since wdmks.lib was removed form the MSVC project file, it's possible that hostapi/wdmks and hostapi/wasapi may be negatively affected. However no issue was observed here with MSVC2005/SDK7.1A nor MSVC2013


________________________________________________________________________________
Ticket #228 Comment 2
I chose not to alter the wasapi nor wdmks host api implementations. As far as I can tell they don't actually need ksguid.lib with recent platform SDKs. If someone finds that the change doesn't work with an older platform SDK please advise and we'll fix it.

________________________________________________________________________________
Ticket #228 Comment 3
TODO: remove mention of ksguid.lib, PA_WDMKS_NO_KSGUID_LIB, PAWIN_WDMKS_NO_KSGUID_LIB from documentation/ build tutorials.

________________________________________________________________________________
Ticket #228 Comment 4
Neither "ksguid" nor "KSGUID" can be found by grepping the PA tree, not by searching the wiki. I conclude that this issue is resolved.

________________________________________________________________________________
Ticket #229 Description
This bug relates to Pa_ReadStream() and Pa_WriteStream().

-------- Forwarded Message --------
Subject: [Portaudio] Bug: Portaudio crashes for soundcards with non-power-of-two channels
Date: Mon, 19 Jan 2015 15:16:55 +0100
From: Bastian Bechtold
To: portaudio@music.columbia.edu

I am using a sound card Focusrite Scarlett 6i6, which has 6 inputs and 6 
outputs.

Whenever I open a portaudio stream, it crashes with

    Assertion failed: (!err), function initializeBlioRingBuffers, file 
src/hostapi/coreaudio/pa_mac_core_blocking.c, line 191

That particular line is asserting that the return value of

    PaUtil_InitializeRingBuffer(..., 
ringBufferSize*blio->outputSampleSizePow2*outChan, ...)

should be zero. The documentation of `PaUtil_InitializeRingBuffer` 
states that it will return zero if the `elementCount` (the shown 
argument) is a power of 2.

But that obviously depends on the value of `outChan`! Thus, this 
assertion will always fail if `outChan` is not a power of two. By 
default, `outChan` will be the number of channels of your sound card.

I can prevent this by passing a power-of-two number of channels to 
`Pa_OpenStream`'s `outputParameters.channelCount`.

This should be fixed, or at least be mentioned in the documentation for 
`Pa_OpenStream`. Also, portaudio should return a meaningful error code 
and not just an assertion failure.

Kind regards,
Bastian
_______________________________________________
Portaudio mailing list
Portaudio@music.columbia.edu
http://music.columbia.edu/mailman/listinfo/portaudio



________________________________________________________________________________
Ticket #229 Comment 1
Brian Whitman posted a patch that looks pretty good, here:
https://gist.github.com/bwhitman/59d3761cfa7a8ab63e28

________________________________________________________________________________
Ticket #229 Comment 2
Here is Bastian's original report:
http://music.columbia.edu/pipermail/portaudio/2015-January/thread.html#16536

Related Mailing list Discussion:

"[Portaudio] non-power-of-2 number of channels on multi-channel audio interface"
Starts here:
http://music.columbia.edu/pipermail/portaudio/2015-February/016604.html

Here's the February part of the thread:
http://music.columbia.edu/pipermail/portaudio/2015-February/thread.html#16604

Continues in March:
http://music.columbia.edu/pipermail/portaudio/2015-March/thread.html#16618


________________________________________________________________________________
Ticket #229 Comment 3
Is this only for blocking mode or for blocking and callbacks?

Brian Whitman's patch has two issues (If I'm reading the old emails correctly):

1. only works for output, not input
2. requires frame size argument to be a power of 2. (http://music.columbia.edu/pipermail/portaudio/2015-March/016620.html)

I see two possible solutions:

1. rewrite the ring buffer such that it no longer requires a power of two
2. pad the requested size of the ring buffer up to the next power of two

#2 doesn't seem too hard. I might be able to tackle it this weekend, if it's correct.

________________________________________________________________________________
Ticket #229 Comment 4
@bejayoharen The blocking case is the bug that was reported. Maybe the other case should be checked.

I think option 2 is reasonable. Option 1 sounds nice but seems like yak shaving.

The only thing with option 2 is that I'm not sure what that means for latency. I suggest that you look at pa_asio and see how it is handled there.

________________________________________________________________________________
Ticket #229 Comment 5
Normally the frame size for the ring buffer is required to be a power-of-2. The problem was that the size used to initialize the ring buffer was multiplied by the channel count, which was not a power-of-2. The patch from Brian just corrected that and does not add any new constraints.

________________________________________________________________________________
Ticket #229 Comment 7
A possible fix for both input and output is available for review here:
https://www.assembla.com/spaces/portaudio/git/merge_requests/3299213

________________________________________________________________________________
Ticket #229 Comment 10
Merge branch 'ticket_229' into 'master'

Fix assert when reading or writing with non-power of 2 channels.

fixed #229

Merged-on: https://assembla.com/code/portaudio/git/merge_requests/3299213

Committed to: portaudio:master
Commit: [[r:e111b3a269ae69c8c083ca4a2a3e3d66828d9ddc|portaudio:e111b3a269]]

________________________________________________________________________________
Ticket #230 Description
On 8/12/2014 9:16 AM, Riot wrote:
    The C++ bindings define operator == and !=, but these are not declared
    const - although they have no reason not to be.


const_comparison_operator.diff

Index: bindings/cpp/include/portaudiocpp/Device.hxx
===================================================================
--- bindings/cpp/include/portaudiocpp/Device.hxx        (revision 1934)
+++ bindings/cpp/include/portaudiocpp/Device.hxx        (working copy)
@@ -60,8 +60,8 @@
                bool isHostApiDefaultInputDevice() const; // extended
                bool isHostApiDefaultOutputDevice() const; // extended

-               bool operator==(const Device &rhs);
-               bool operator!=(const Device &rhs);
+               bool operator==(const Device &rhs) const;
+               bool operator!=(const Device &rhs) const;

                // host api reference
                HostApi &hostApi();
Index: bindings/cpp/include/portaudiocpp/SystemDeviceIterator.hxx
===================================================================
--- bindings/cpp/include/portaudiocpp/SystemDeviceIterator.hxx  (revision 1934)
+++ bindings/cpp/include/portaudiocpp/SystemDeviceIterator.hxx  (working copy)
@@ -48,8 +48,8 @@
                DeviceIterator &operator--();
                DeviceIterator operator--(int);

-               bool operator==(const DeviceIterator &rhs);
-               bool operator!=(const DeviceIterator &rhs);
+               bool operator==(const DeviceIterator &rhs) const;
+               bool operator!=(const DeviceIterator &rhs) const;

        private:
                friend class System;
Index: bindings/cpp/include/portaudiocpp/SystemHostApiIterator.hxx
===================================================================
--- bindings/cpp/include/portaudiocpp/SystemHostApiIterator.hxx (revision 1934)
+++ bindings/cpp/include/portaudiocpp/SystemHostApiIterator.hxx (working copy)
@@ -45,8 +45,8 @@
                HostApiIterator &operator--();
                HostApiIterator operator--(int);

-               bool operator==(const HostApiIterator &rhs);
-               bool operator!=(const HostApiIterator &rhs);
+               bool operator==(const HostApiIterator &rhs) const;
+               bool operator!=(const HostApiIterator &rhs) const;

        private:
                friend class System;
Index: bindings/cpp/source/portaudiocpp/Device.cxx
===================================================================
--- bindings/cpp/source/portaudiocpp/Device.cxx (revision 1934)
+++ bindings/cpp/source/portaudiocpp/Device.cxx (working copy)
@@ -131,12 +131,12 @@

                // -------------------------------------------------------------------------------

-               bool Device::operator==(const Device &rhs)
+               bool Device::operator==(const Device &rhs) const
                {
                        return (index_ == rhs.index_);
                }

-               bool Device::operator!=(const Device &rhs)
+               bool Device::operator!=(const Device &rhs) const
                {
                        return !(*this == rhs);
                }
Index: bindings/cpp/source/portaudiocpp/SystemDeviceIterator.cxx
===================================================================
--- bindings/cpp/source/portaudiocpp/SystemDeviceIterator.cxx   (revision 1934)
+++ bindings/cpp/source/portaudiocpp/SystemDeviceIterator.cxx   (working copy)
@@ -44,12 +44,12 @@

        // -----------------------------------------------------------------------------------

-       bool System::DeviceIterator::operator==(const System::DeviceIterator &rhs)
+       bool System::DeviceIterator::operator==(const System::DeviceIterator &rhs) const
        {
                return (ptr_ == rhs.ptr_);
        }

-       bool System::DeviceIterator::operator!=(const System::DeviceIterator &rhs)
+       bool System::DeviceIterator::operator!=(const System::DeviceIterator &rhs) const
        {
                return !(*this == rhs);
        }
Index: bindings/cpp/source/portaudiocpp/SystemHostApiIterator.cxx
===================================================================
--- bindings/cpp/source/portaudiocpp/SystemHostApiIterator.cxx  (revision 1934)
+++ bindings/cpp/source/portaudiocpp/SystemHostApiIterator.cxx  (working copy)
@@ -44,12 +44,12 @@

        // -----------------------------------------------------------------------------------

-       bool System::HostApiIterator::operator==(const System::HostApiIterator &rhs)
+       bool System::HostApiIterator::operator==(const System::HostApiIterator &rhs) const
        {
                return (ptr_ == rhs.ptr_);
        }

-       bool System::HostApiIterator::operator!=(const System::HostApiIterator &rhs)
+       bool System::HostApiIterator::operator!=(const System::HostApiIterator &rhs) const
        {
                return !(*this == rhs);
        }

________________________________________________________________________________
Ticket #230 Comment 1
patch applied in r1943

________________________________________________________________________________
Ticket #231 Comment 1
Support > Settings > Custom Permissions: Allow Edit for non-member access.

________________________________________________________________________________
Ticket #232 Description
Float32_To_Int16_DitherClip appears to truncate the value after it has already been assigned to an int.

As discussed here:

http://music.columbia.edu/pipermail/portaudio/2014-March/015900.html


________________________________________________________________________________
Ticket #233 Description
Thomas Anderson sent me the attached one line patch to configure.in. I don't know much about autoconf. Would someone be able to review, test and merge this please? (or at least comment on whether it's a good idea.)

In particular, does this require a more recent version of auto-conf than we currently depend on?

Thanks,

Ross

-------- Forwarded Message --------
Subject: [PATCH] Fix cross compiling
Date: Mon, 08 Jun 2015 21:05:32 -0700
From: Thomas Anderson

Hi,
    Using AC_PATH_PROG for elements of the toolchain(of which `ar` is
one) will break attempts to cross-compile. This patch fixes that by
using the AC_CHECK_TOOL which uses the --build,--host,--target options
to configure as prefixes to the tool.

Best,
Thomas





Index: configure.in
===================================================================
--- configure.in    (revision 1954)
+++ configure.in    (working copy)
@@ -105,7 +105,7 @@
 AC_PROG_LIBTOOL
 AC_PROG_INSTALL
 AC_PROG_LN_S
-AC_PATH_PROG(AR, ar, no)
+AC_CHECK_TOOL(AR, ar, no)
 if [[ $AR = "no" ]] ; then
     AC_MSG_ERROR("Could not find ar - needed to create a library")
 fi




portaudio-fix-cross-compiling.patch

Index: configure.in
===================================================================
--- configure.in	(revision 1954)
+++ configure.in	(working copy)
@@ -105,7 +105,7 @@
 AC_PROG_LIBTOOL
 AC_PROG_INSTALL
 AC_PROG_LN_S
-AC_PATH_PROG(AR, ar, no)
+AC_CHECK_TOOL(AR, ar, no)
 if [[ $AR = "no" ]] ; then
     AC_MSG_ERROR("Could not find ar - needed to create a library")
 fi



_______________________________________________
Portaudio mailing list
Portaudio@music.columbia.edu
http://music.columbia.edu/mailman/listinfo/portaudio

________________________________________________________________________________
Ticket #233 Comment 1
Needed for cross-compilation builds that use --host parameter. See:
https://www.gnu.org/software/autoconf/manual/autoconf-2.68/html_node/Generic-Programs.html

________________________________________________________________________________
Ticket #234 Description
Hi, 

I'm compiling portaudio in mingw. It works fine, but there is a typo in configure.in.
"src/os/win/pa_win_wdmks_util.o" must be replaced with "src/os/win/pa_win_wdmks_utils.o" (missing an extra "s").


________________________________________________________________________________
Ticket #234 Comment 1
(Wasn't logged in when creating ticket)


________________________________________________________________________________
Ticket #234 Comment 2
Fixed in r1957. Thanks!

________________________________________________________________________________
Ticket #235 Description
On Windows10 there are some input devices (SoundMAX Integrated Digital HD Audio) which for some reason are "Currently unavailable" (CD Player, Line In and Stereo Mix).

I don't need them but when Wasapi is initialized it *fails to call IAudioClient_GetDevicePeriod* on these devices, which returns 0x88890008, which should be AUDCLNT_E_UNSUPPORTED_FORMAT.
So basically one broken device stops the complete portaudio library from working. 

________________________________________________________________________________
Ticket #236 Description
On the music-dsp mailing list:
https://lists.columbia.edu/pipermail/music-dsp/2015-September/000317.html

Andrew Kelley writes:

https://gist.github.com/andrewrk/7b7207f9c8efefbdbcbd

this one is particularly striking:

<pre><code>      /* FEEDBACK: I'm not sure what to do when this call fails. There's nothing in the PA API to
       * do about failures in the callback system. */
      assert( !err );
</code></pre>

Each of these items pointed out in the gist above are problems with PortAudio. Each item represents one or more of these:
 * a misleading or false comment
 * a bug
 * an unhandled error condition 
 * an indication that the PortAudio API is not an adequate abstraction
 * a demonstration that the developer did not carefully read the documentation of the host API

For safe keeping, I will duplicate the gist below:

<pre><code>
andy@nixos:~/Downloads/portaudio/trunk/src$ grep -RI '\bTODO\|FIXME\|XXX\|FEEDBACK\b'
common/pa_cpuload.c:        /** FIXME @todo these coefficients shouldn't be hardwired see: http://www.portaudio.com/trac/ticket/113 */
common/pa_util.h:/** Allocate size bytes, guaranteed to be aligned to a FIXME byte boundary */
common/pa_converters.c:            FIXME: should write an assert which checks that all of the
common/pa_converters.c:        float samp = *src * const_1_div_32768_; /* FIXME: i'm concerned about this being asymetrical with float->int16 -rb */
SConscript:        # TODO: It looks like the prefix for soundcard.h depends on the platform
os/unix/pa_unix_util.c:    /* XXX: Try sleeping the remaining time (contained in rem) if interrupted by a signal? */
os/unix/pa_unix_util.c:        pthread_cancel( threading->callbackThread );   /* XXX: Safe to call this if the thread has exited on its own? */
os/unix/pa_unix_util.c:    /* TODO: Make join time out */
os/unix/pa_unix_util.c:        /* XXX: Safe to call this if the thread has exited on its own? */
os/win/pa_x86_plain_converters.c:TODO:
os/win/pa_x86_plain_converters.c:        // FIXME: the dither amplitude here appears to be too small by 8 bits
hostapi/alsa/pa_linux_alsa.c:    #include <dlfcn.h> /* For dlXXX functions */
hostapi/alsa/pa_linux_alsa.c:    /* XXX: Limit to sensible number (ALSA plugins accept a crazy amount of channels)? */
hostapi/alsa/pa_linux_alsa.c:    if( !primeBuffers ) /* XXX: Make sense? */
hostapi/alsa/pa_linux_alsa.c:    /* XXX: Ignore paPrimeOutputBuffersUsingStreamCallback untill buffer priming is fully supported in pa_process.c */
hostapi/alsa/pa_linux_alsa.c: * TODO: Implement an algorithm to find the value closest to acceptance
hostapi/alsa/pa_linux_alsa.c:    /* XXX: Use Bounded by default? Output tends to get stuttery with Fixed ... */
hostapi/alsa/pa_linux_alsa.c:    /* XXX: Why do we support this anyway? */
hostapi/alsa/pa_linux_alsa.c:    /* XXX: alsa_snd_pcm_drain tends to lock up, avoid it until we find out more */
hostapi/alsa/pa_linux_alsa.c:    /* TODO: what if we have both?  does it really matter? */
hostapi/alsa/pa_linux_alsa.c:    /* TODO: if running in callback mode, this will mean
hostapi/alsa/pa_linux_alsa.c:            /*  XXX: Depend on preprocessor condition? */
hostapi/alsa/pa_linux_alsa.c:            /* TODO: Add macro for checking system calls */
hostapi/alsa/pa_linux_alsa.c:            /* XXX: Report xruns to the user? A situation is conceivable where the callback is never invoked due
hostapi/alsa/pa_linux_alsa.c:    /* XXX: More descriptive error? */
hostapi/alsa/pa_linux_alsa.c:    /* XXX: More descriptive error? */
hostapi/skeleton/pa_hostapi_skeleton.c:        ( the following two checks are taken care of by PaUtil_InitializeBufferProcessor() FIXME - checks needed? )
hostapi/oss/pa_unix_oss.c:        ENSURE_( ioctl( component->fd, SNDCTL_DSP_CHANNELS, &chans ), paSampleFormatNotSupported );   /* XXX: Should be paInvalidChannelCount? */
hostapi/oss/pa_unix_oss.c:    /* TODO: Handle condition where number of frames read doesn't equal number of frames requested */
hostapi/oss/pa_unix_oss.c:    /* TODO: Handle condition where number of frames written doesn't equal number of frames requested */
hostapi/oss/pa_unix_oss.c:    PaStreamCallbackTimeInfo timeInfo = {0,0,0}; /* TODO: IMPLEMENT ME */
hostapi/oss/pa_unix_oss.c:                    /* TODO: handle bytesWritten != bytesRequested (slippage?) */
hostapi/oss/pa_unix_oss.c:/* TODO: Compute number of allocated bytes somewhere else, can we use ODELAY with capture */
hostapi/wmme/pa_win_wmme.c:            /** @todo FIXME/REVIEW: can't return host error info from an asyncronous thread. see http://www.portaudio.com/trac/ticket/143 */
hostapi/wmme/pa_win_wmme.c:                               input buffer overflow. FIXME: these buffers should
hostapi/wmme/pa_win_wmme.c:                        /** @todo FIXME: should probably reset the output device immediately once the callback returns paAbort 
hostapi/wmme/pa_win_wmme.c:    /** @todo FIXME: implement recovery as best we can
hostapi/jack/pa_jack.c:    /* <FIXME> */
hostapi/jack/pa_jack.c:    /* </FIXME> */
hostapi/jack/pa_jack.c:    /* XXX: Maybe not the cleanest way of going about this? */
hostapi/jack/pa_jack.c:    /* XXX: Best enclose in loop, in case of spurious wakeups? */
hostapi/jack/pa_jack.c:        /*UNLESS( !(framesPerBuffer & (framesPerBuffer - 1)), paBufferTooBig );*/  /* TODO: Add descriptive error code? */
hostapi/jack/pa_jack.c:        /* setup blocking API data structures (FIXME: can fail) */
hostapi/jack/pa_jack.c:     * TODO: Robust allocation of new port names */
hostapi/jack/pa_jack.c:        /* XXX: Any way to tell which of these occurred? */
hostapi/jack/pa_jack.c:    if( !stream->hostApi->jackIsDown )  /* XXX: Well? */
hostapi/jack/pa_jack.c:    /* A: Is this relevant?? --> TODO: what if we're recording-only? */
hostapi/dsound/pa_win_ds.c:/* FIXME: should convert hr to a string */
hostapi/dsound/pa_win_ds.c:/* FIXME - move all below to PaUtilStreamRepresentation */
hostapi/dsound/pa_win_ds.c:    //  FIXME: The example code I have on the net creates a hidden window that
hostapi/dsound/pa_win_ds.c:            // FIXME: what happens if IDirectSoundCaptureBuffer_GetCurrentPosition fails?
hostapi/dsound/pa_win_ds.c:        /* FIXME QueryOutputSpace should not adjust underflow count as a side effect. 
hostapi/dsound/pa_win_ds.c:        /* FIXME: an underflow could happen here */
hostapi/dsound/pa_win_ds.c:        /* FIXME: an overflow could happen here */
hostapi/dsound/pa_win_ds.c:                /* FIXME implement handling of paComplete and paAbort if possible 
hostapi/dsound/pa_win_ds.c:        if( stream->pDirectSoundInputBuffer != NULL ) // FIXME: not sure this check is necessary
hostapi/dsound/pa_win_ds.c:        if( stream->pDirectSoundOutputBuffer != NULL ) // FIXME: not sure this needs to be checked here
hostapi/dsound/pa_win_ds.c:            // FIXME: what happens if IDirectSoundBuffer_Stop returns an error?
hostapi/dsound/pa_win_ds.c:                IDirectSoundBuffer_Stop( stream->pDirectSoundPrimaryBuffer ); /* FIXME we never started the primary buffer so I'm not sure we need to stop it */
hostapi/dsound/pa_win_ds.c:            // FIXME: what happens if IDirectSoundCaptureBuffer_Stop returns an error?
hostapi/wasapi/pa_win_wasapi.c:					//so something must be _really_ wrong with this device, TODO handle this better. We kind of need GetMixFormat
hostapi/wasapi/mingw-include/propsys.h:// punkItem is a shell item created with an SHCreateItemXXX API
hostapi/wasapi/mingw-include/propsys.h:// punkItem is a shell item created with an SHCreateItemXXX API
hostapi/wasapi/mingw-include/FunctionDiscoveryKeys_devpkey.h:// These PKEYs correspond to the old setupapi SPDRP_XXX properties
hostapi/wasapi/mingw-include/FunctionDiscoveryKeys_devpkey.h:// These PKEYs correspond to the old setupapi SPCRP_XXX properties
hostapi/coreaudio/pa_mac_core_internal.h:    /* FIXME: instead of volatile, these should be properly memory barriered */
hostapi/coreaudio/pa_mac_core_utilities.c:    /*FIXME: still need to handle possible ComponentResult values.*/
hostapi/coreaudio/pa_mac_core_utilities.c: * FEEDBACK: too liberal/conservative/another way?
hostapi/coreaudio/pa_mac_core.c:/* FIXME: not all error conditions call PaUtil_SetLastHostErrorInfo()
hostapi/coreaudio/pa_mac_core.c:        TODO: Double check that everything is handled by alloc group
hostapi/coreaudio/pa_mac_core.c:    /* FEEDBACK */
hostapi/coreaudio/pa_mac_core.c:          /* FEEDBACK: is this more serious? should we assert? */
hostapi/coreaudio/pa_mac_core.c:    /* FIXME: I think we need to monitor stream and change the converter if the incoming format changes. */
hostapi/coreaudio/pa_mac_core.c:        // FIXME: really we should be searching for a multiple of requestedFramesPerBuffer
hostapi/coreaudio/pa_mac_core.c:/* FEEDBACK: there is a lot of redundant code here because of how all the cases differ. This makes it hard to maintain, so if there are suggestinos for cleaning it up, I'm all ears. */
hostapi/coreaudio/pa_mac_core.c:	/* FIXME: not sure what to do below if the host timestamps aren't valid (kAudioTimeStampHostTimeValid isn't set)
hostapi/coreaudio/pa_mac_core.c:				/* FIXME: take the ring buffer latency into account */
hostapi/coreaudio/pa_mac_core.c:      stream->xrunFlags = 0; //FIXME: this flag also gets set outside by a callback, which calls the xrunCallback function. It should be in the same thread as the main audio callback, but the apple docs just use the word "usually" so it may be possible to loose an xrun notification, if that callback happens here.
hostapi/coreaudio/pa_mac_core.c:      /* FEEDBACK: I'm not sure what to do when this call fails. There's nothing in the PA API to
hostapi/coreaudio/pa_mac_core.c:      stream->xrunFlags = 0; /* FEEDBACK: we only send flags to Buf Proc once */
hostapi/coreaudio/pa_mac_core.c:      /* FIXME: looping here may not actually be necessary, but it was something I tried in testing. */
hostapi/coreaudio/pa_mac_core.c:      /* FEEDBACK: I'm not sure what to do when this call fails */
hostapi/coreaudio/pa_mac_core.c:       /*TODO: is there more that needs to be done on error
hostapi/coreaudio/pa_mac_core.c:    /*FIXME: maybe want to do this on close/abort for faster start? */
hostapi/coreaudio/pa_mac_core_old.c:    // FIXME: this allocation should be part of the allocations group
hostapi/coreaudio/pa_mac_core_old.c:    // TODO: this should be nicer than abort
hostapi/asio/pa_asio.cpp:        /* FIXME: assume all channels use the same type for now 
hostapi/asio/pa_asio.cpp:        /* FIXME: assume all channels use the same type for now 
hostapi/asio/pa_asio.cpp:            /*FIXME: commented the next line out

</code></pre>

________________________________________________________________________________
Ticket #237 Description
Host-API specific constants should be named using the host API prefix. In this case 'paWinWasapi'. Many constants in pa_win_wasapi.h do not follow this convention, and are instead prefixed only by `e`

For example:

<pre><code>
enum  	PaWasapiDeviceRole { 
  eRoleRemoteNetworkDevice = 0, eRoleSpeakers, eRoleLineLevel, eRoleHeadphones, 
  eRoleMicrophone, eRoleHeadset, eRoleHandset, eRoleUnknownDigitalPassthrough, 
  eRoleSPDIF, eRoleHDMI, eRoleUnknownFormFactor 
}
enum  	PaWasapiJackConnectionType { 
  eJackConnTypeUnknown, eJackConnType3Point5mm, eJackConnTypeQuarter, eJackConnTypeAtapiInternal, 
  eJackConnTypeRCA, eJackConnTypeOptical, eJackConnTypeOtherDigital, eJackConnTypeOtherAnalog, 
  eJackConnTypeMultichannelAnalogDIN, eJackConnTypeXlrProfessional, eJackConnTypeRJ11Modem, eJackConnTypeCombination 
}
enum  	PaWasapiJackGeoLocation { 
  eJackGeoLocUnk = 0, eJackGeoLocRear = 0x1, eJackGeoLocFront, eJackGeoLocLeft, 
  eJackGeoLocRight, eJackGeoLocTop, eJackGeoLocBottom, eJackGeoLocRearPanel, 
  eJackGeoLocRiser, eJackGeoLocInsideMobileLid, eJackGeoLocDrivebay, eJackGeoLocHDMI, 
  eJackGeoLocOutsideMobileLid, eJackGeoLocATAPI, eJackGeoLocReserved5, eJackGeoLocReserved6 
}
enum  	PaWasapiJackGenLocation { eJackGenLocPrimaryBox = 0, eJackGenLocInternal, eJackGenLocSeparate, eJackGenLocOther }
enum  	PaWasapiJackPortConnection { eJackPortConnJack = 0, eJackPortConnIntegratedDevice, eJackPortConnBothIntegratedAndJack, eJackPortConnUnknown }
enum  	PaWasapiThreadPriority { 
  eThreadPriorityNone = 0, eThreadPriorityAudio, eThreadPriorityCapture, eThreadPriorityDistribution, 
  eThreadPriorityGames, eThreadPriorityPlayback, eThreadPriorityProAudio, eThreadPriorityWindowManager 
}
</code></pre>

________________________________________________________________________________
Ticket #238 Description
Ensure that symbols exported by individual host APIs follow our naming conventions.

 * Manually review output of `doxygen Doxyfile.developer` for anomalies
 * Review linker symbol output. Check that any leaked private symbols at least follow our naming conventions.
 * Check all #defines

Related: #237

________________________________________________________________________________
Ticket #239 Description
[[ImplementationStyleGuidelines]] specifies rules for formating our code.

Our current formatting conventions should be encoded in astyle scripts. We can then generate a diff between "correctly formatted" and our code, and work out how to proceed.

fixdir.bat and fixfile.bat may already be a step in this direction. Need to review.

________________________________________________________________________________
Ticket #240 Description
Hello ,

I just have down those updates and with 
sudo ./configure I have had : 
configure: error: Couldn't find 10.5, 10.6, 10.7, 10.8 or 10.9 SDK

I have installed a SDK but without success.


Thank You 

________________________________________________________________________________
Ticket #240 Comment 1
[[image:bgWJfQykur5yk4dmr6bg7m]]

________________________________________________________________________________
Ticket #240 Comment 2
[[image:bgWJfQykur5yk4dmr6bg7m]]

________________________________________________________________________________
Ticket #240 Comment 3
Hello I have modified the configure and configure.ini by adding
              elif xcodebuild -version -sdk macosx10.10 Path >/dev/null 2>&1 ; then
                 mac_version_min="-mmacosx-version-min=10.4"
                 mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.10 Path`"
              elif xcodebuild -version -sdk macosx10.11 Path >/dev/null 2>&1 ; then
                 mac_version_min="-mmacosx-version-min=10.4"
                 mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.11 Path`"

but when i do sudo make i have those 2 errors : 

/bin/sh ./libtool --mode=compile gcc -c -std=c99 -O2 -Wall -pedantic -pipe -fPIC -DNDEBUG -DPA_LITTLE_ENDIAN -I./include -I./src/common -I./src/os/unix -Werror -arch i386 -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -mmacosx-version-min=10.4  -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DSIZEOF_SHORT=2 -DSIZEOF_INT=4 -DSIZEOF_LONG=8 -DHAVE_NANOSLEEP=1 -DPA_USE_COREAUDIO=1 src/hostapi/coreaudio/pa_mac_core_utilities.c -o src/hostapi/coreaudio/pa_mac_core_utilities.lo
libtool: compile:  gcc -c -std=c99 -O2 -Wall -pedantic -pipe -fPIC -DNDEBUG -DPA_LITTLE_ENDIAN -I./include -I./src/common -I./src/os/unix -Werror -arch i386 -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -mmacosx-version-min=10.4 -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DSIZEOF_SHORT=2 -DSIZEOF_INT=4 -DSIZEOF_LONG=8 -DHAVE_NANOSLEEP=1 -DPA_USE_COREAUDIO=1 src/hostapi/coreaudio/pa_mac_core_utilities.c  -fno-common -DPIC -o src/hostapi/coreaudio/.libs/pa_mac_core_utilities.o
src/hostapi/coreaudio/pa_mac_core_utilities.c:152:10: error: 'kAudioUnitErr_IllegalInstrument' is deprecated [-Werror,-Wdeprecated-declarations]
    case kAudioUnitErr_IllegalInstrument:
         ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioUnit.framework/Headers/AUComponent.h:1633:2: note: 'kAudioUnitErr_IllegalInstrument' has been
      explicitly marked deprecated here
        kAudioUnitErr_IllegalInstrument                 = -10873,
        ^
src/hostapi/coreaudio/pa_mac_core_utilities.c:155:10: error: 'kAudioUnitErr_InstrumentTypeNotFound' is deprecated [-Werror,-Wdeprecated-declarations]
    case kAudioUnitErr_InstrumentTypeNotFound:
         ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioUnit.framework/Headers/AUComponent.h:1634:2: note: 'kAudioUnitErr_InstrumentTypeNotFound' has
      been explicitly marked deprecated here
        kAudioUnitErr_InstrumentTypeNotFound    = -10872,
        ^
2 errors generated.
make: *** [src/hostapi/coreaudio/pa_mac_core_utilities.lo] Error 1

Can you help me please ?


________________________________________________________________________________
Ticket #240 Comment 4
That's ok for 240 & 241 to configure make and install portaudio in /usr/local/lib

------------------------------
Downloaded portaudio snapshot

------------------------------
add
elif xcodebuild -version -sdk macosx10.10 Path >/dev/null 2>&1 ; then
mac_version_min="-mmacosx-version-min=10.4"
mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.10 Path`"
elif xcodebuild -version -sdk macosx10.11 Path >/dev/null 2>&1 ; then
mac_version_min="-mmacosx-version-min=10.4"
mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.11 Path`"

in configure and configure.in

According to
https://www.assembla.com/wiki/show/portaudio/ReleaseNotes

------------------------------
replace
CFLAGS="$CFLAGS -I\$(top_srcdir)/src/os/unix -Werror"

by
CFLAGS="$CFLAGS -I\$(top_srcdir)/src/os/unix -Wall"

in configure

According to
http://stackoverflow.com/questions/13214534/port-audio-wont-install-due-to-deprecated-core-audio-functions
"...
f updating to the latest PortAudio SVN doesn't fix the issue, this is the suggestion from the mailing list:
Remove -Werror from the build script and replace it with -Wall
Or try adding -Wno-deprecated before -Werror
If you do try adding -Wno-deprecated please let us know how you go since this is currently the preferred option, although it hasn't been tested much yet.
By "build script" they mean configure.in, I believe.
...
"
------------------------------
sudo chmod -R 755 portaudio_snapshot/

------------------------------
cd portaudio_snapshot
------------------------------

./configure
------------------------------
make
------------------------------
sudo make install
------------------------------
ls -l /usr/local/lib/*portaudio*

you'll see

-rwxr-xr-x  1 root  admin  183816 23 sep 07:53 /usr/local/lib/libportaudio.2.dylib
-rw-r--r--  1 root  admin  223032 23 sep 07:53 /usr/local/lib/libportaudio.a
lrwxr-xr-x  1 root  admin      20 23 sep 07:53 /usr/local/lib/libportaudio.dylib -> libportaudio.2.dylib
-rwxr-xr-x  1 root  admin    1042 23 sep 07:53 /usr/local/lib/libportaudio.la


ls -l /usr/local/include/*portaudio*

you'll see

-rw-r--r--  1 root  admin  47194 23 sep 07:53 /usr/local/include/portaudio.h
------------------------------
Good luck

________________________________________________________________________________
Ticket #240 Comment 8
Configure now supports 10.12. So this one is fixed.

This pending merge request will extend support to 10.13
https://app.assembla.com/spaces/portaudio/git/merge_requests/6183813

________________________________________________________________________________
Ticket #241 Description
Hello 

Like sdks problem related here https://www.assembla.com/wiki/show/portaudio/ReleaseNotes

i have added 

              elif xcodebuild -version -sdk macosx10.10 Path >/dev/null 2>&1 ; then
                 mac_version_min="-mmacosx-version-min=10.4"
                 mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.10 Path`"
              elif xcodebuild -version -sdk macosx10.11 Path >/dev/null 2>&1 ; then
                 mac_version_min="-mmacosx-version-min=10.4"
                 mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.11 Path`"

in configure and configure.in

but with make command I have those 2 errors :

/bin/sh ./libtool --mode=compile gcc -c -std=c99 -O2 -Wall -pedantic -pipe -fPIC -DNDEBUG -DPA_LITTLE_ENDIAN -I./include -I./src/common -I./src/os/unix -Werror -arch i386 -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -mmacosx-version-min=10.4  -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DSIZEOF_SHORT=2 -DSIZEOF_INT=4 -DSIZEOF_LONG=8 -DHAVE_NANOSLEEP=1 -DPA_USE_COREAUDIO=1 src/hostapi/coreaudio/pa_mac_core_utilities.c -o src/hostapi/coreaudio/pa_mac_core_utilities.lo
libtool: compile:  gcc -c -std=c99 -O2 -Wall -pedantic -pipe -fPIC -DNDEBUG -DPA_LITTLE_ENDIAN -I./include -I./src/common -I./src/os/unix -Werror -arch i386 -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -mmacosx-version-min=10.4 -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DSIZEOF_SHORT=2 -DSIZEOF_INT=4 -DSIZEOF_LONG=8 -DHAVE_NANOSLEEP=1 -DPA_USE_COREAUDIO=1 src/hostapi/coreaudio/pa_mac_core_utilities.c  -fno-common -DPIC -o src/hostapi/coreaudio/.libs/pa_mac_core_utilities.o
src/hostapi/coreaudio/pa_mac_core_utilities.c:152:10: error: 'kAudioUnitErr_IllegalInstrument' is deprecated [-Werror,-Wdeprecated-declarations]
    case kAudioUnitErr_IllegalInstrument:
         ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioUnit.framework/Headers/AUComponent.h:1633:2: note: 'kAudioUnitErr_IllegalInstrument' has been
      explicitly marked deprecated here
        kAudioUnitErr_IllegalInstrument                 = -10873,
        ^
src/hostapi/coreaudio/pa_mac_core_utilities.c:155:10: error: 'kAudioUnitErr_InstrumentTypeNotFound' is deprecated [-Werror,-Wdeprecated-declarations]
    case kAudioUnitErr_InstrumentTypeNotFound:
         ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioUnit.framework/Headers/AUComponent.h:1634:2: note: 'kAudioUnitErr_InstrumentTypeNotFound' has
      been explicitly marked deprecated here
        kAudioUnitErr_InstrumentTypeNotFound    = -10872,
        ^
2 errors generated.
make: *** [src/hostapi/coreaudio/pa_mac_core_utilities.lo] Error 1


Hello I have modified the configure and configure.ini by adding
              elif xcodebuild -version -sdk macosx10.10 Path >/dev/null 2>&1 ; then
                 mac_version_min="-mmacosx-version-min=10.4"
                 mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.10 Path`"
              elif xcodebuild -version -sdk macosx10.11 Path >/dev/null 2>&1 ; then
                 mac_version_min="-mmacosx-version-min=10.4"
                 mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.11 Path`"

but when i do sudo make i have those 2 errors : 

/bin/sh ./libtool --mode=compile gcc -c -std=c99 -O2 -Wall -pedantic -pipe -fPIC -DNDEBUG -DPA_LITTLE_ENDIAN -I./include -I./src/common -I./src/os/unix -Werror -arch i386 -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -mmacosx-version-min=10.4  -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DSIZEOF_SHORT=2 -DSIZEOF_INT=4 -DSIZEOF_LONG=8 -DHAVE_NANOSLEEP=1 -DPA_USE_COREAUDIO=1 src/hostapi/coreaudio/pa_mac_core_utilities.c -o src/hostapi/coreaudio/pa_mac_core_utilities.lo
libtool: compile:  gcc -c -std=c99 -O2 -Wall -pedantic -pipe -fPIC -DNDEBUG -DPA_LITTLE_ENDIAN -I./include -I./src/common -I./src/os/unix -Werror -arch i386 -arch x86_64 -isysroot /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk -mmacosx-version-min=10.4 -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE_URL=\"\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_DLFCN_H=1 -DLT_OBJDIR=\".libs/\" -DSIZEOF_SHORT=2 -DSIZEOF_INT=4 -DSIZEOF_LONG=8 -DHAVE_NANOSLEEP=1 -DPA_USE_COREAUDIO=1 src/hostapi/coreaudio/pa_mac_core_utilities.c  -fno-common -DPIC -o src/hostapi/coreaudio/.libs/pa_mac_core_utilities.o
src/hostapi/coreaudio/pa_mac_core_utilities.c:152:10: error: 'kAudioUnitErr_IllegalInstrument' is deprecated [-Werror,-Wdeprecated-declarations]
    case kAudioUnitErr_IllegalInstrument:
         ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioUnit.framework/Headers/AUComponent.h:1633:2: note: 'kAudioUnitErr_IllegalInstrument' has been
      explicitly marked deprecated here
        kAudioUnitErr_IllegalInstrument                 = -10873,
        ^
src/hostapi/coreaudio/pa_mac_core_utilities.c:155:10: error: 'kAudioUnitErr_InstrumentTypeNotFound' is deprecated [-Werror,-Wdeprecated-declarations]
    case kAudioUnitErr_InstrumentTypeNotFound:
         ^
/Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.11.sdk/System/Library/Frameworks/AudioUnit.framework/Headers/AUComponent.h:1634:2: note: 'kAudioUnitErr_InstrumentTypeNotFound' has
      been explicitly marked deprecated here
        kAudioUnitErr_InstrumentTypeNotFound    = -10872,
        ^
2 errors generated.
make: *** [src/hostapi/coreaudio/pa_mac_core_utilities.lo] Error 1

Can you help me please ?

________________________________________________________________________________
Ticket #241 Comment 1
That's ok for 240 & 241 to configure make and install portaudio in /usr/local/lib

------------------------------
Downloaded portaudio snapshot

------------------------------
add
elif xcodebuild -version -sdk macosx10.10 Path >/dev/null 2>&1 ; then
mac_version_min="-mmacosx-version-min=10.4"
mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.10 Path`"
elif xcodebuild -version -sdk macosx10.11 Path >/dev/null 2>&1 ; then
mac_version_min="-mmacosx-version-min=10.4"
mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.11 Path`"

in configure and configure.in

According to
https://www.assembla.com/wiki/show/portaudio/ReleaseNotes

------------------------------
replace
CFLAGS="$CFLAGS -I\$(top_srcdir)/src/os/unix -Werror"

by
CFLAGS="$CFLAGS -I\$(top_srcdir)/src/os/unix -Wall"

in configure

According to
http://stackoverflow.com/questions/13214534/port-audio-wont-install-due-to-deprecated-core-audio-functions
"...
f updating to the latest PortAudio SVN doesn't fix the issue, this is the suggestion from the mailing list:
Remove -Werror from the build script and replace it with -Wall
Or try adding -Wno-deprecated before -Werror
If you do try adding -Wno-deprecated please let us know how you go since this is currently the preferred option, although it hasn't been tested much yet.
By "build script" they mean configure.in, I believe.
...
"
------------------------------
sudo chmod -R 755 portaudio_snapshot/

------------------------------
cd portaudio_snapshot
------------------------------

./configure
------------------------------
make
------------------------------
sudo make install
------------------------------
ls -l /usr/local/lib/*portaudio*

you'll see

-rwxr-xr-x  1 root  admin  183816 23 sep 07:53 /usr/local/lib/libportaudio.2.dylib
-rw-r--r--  1 root  admin  223032 23 sep 07:53 /usr/local/lib/libportaudio.a
lrwxr-xr-x  1 root  admin      20 23 sep 07:53 /usr/local/lib/libportaudio.dylib -> libportaudio.2.dylib
-rwxr-xr-x  1 root  admin    1042 23 sep 07:53 /usr/local/lib/libportaudio.la


ls -l /usr/local/include/*portaudio*

you'll see

-rw-r--r--  1 root  admin  47194 23 sep 07:53 /usr/local/include/portaudio.h
------------------------------
Good luck

________________________________________________________________________________
Ticket #242 Description
That's ok for 240 & 241 tickets  to configure make and install portaudio in /usr/local/lib's  mac

------------------------------
Downloaded portaudio snapshot

------------------------------
add
elif xcodebuild -version -sdk macosx10.10 Path >/dev/null 2>&1 ; then
mac_version_min="-mmacosx-version-min=10.4"
mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.10 Path`"
elif xcodebuild -version -sdk macosx10.11 Path >/dev/null 2>&1 ; then
mac_version_min="-mmacosx-version-min=10.4"
mac_sysroot="-isysroot `xcodebuild -version -sdk macosx10.11 Path`"

in configure and configure.in

According to
https://www.assembla.com/wiki/show/portaudio/ReleaseNotes

------------------------------
replace
CFLAGS="$CFLAGS -I\$(top_srcdir)/src/os/unix -Werror"

by
CFLAGS="$CFLAGS -I\$(top_srcdir)/src/os/unix -Wall"

in configure

According to
http://stackoverflow.com/questions/13214534/port-audio-wont-install-due-to-deprecated-core-audio-functions
"...
f updating to the latest PortAudio SVN doesn't fix the issue, this is the suggestion from the mailing list:
Remove -Werror from the build script and replace it with -Wall
Or try adding -Wno-deprecated before -Werror
If you do try adding -Wno-deprecated please let us know how you go since this is currently the preferred option, although it hasn't been tested much yet.
By "build script" they mean configure.in, I believe.
...
"
------------------------------
sudo chmod -R 755 portaudio_snapshot/

------------------------------
cd portaudio_snapshot
------------------------------

./configure
------------------------------
make
------------------------------
sudo make install
------------------------------
ls -l /usr/local/lib/*portaudio*

you'll see

-rwxr-xr-x  1 root  admin  183816 23 sep 07:53 /usr/local/lib/libportaudio.2.dylib
-rw-r--r--  1 root  admin  223032 23 sep 07:53 /usr/local/lib/libportaudio.a
lrwxr-xr-x  1 root  admin      20 23 sep 07:53 /usr/local/lib/libportaudio.dylib -> libportaudio.2.dylib
-rwxr-xr-x  1 root  admin    1042 23 sep 07:53 /usr/local/lib/libportaudio.la


ls -l /usr/local/include/*portaudio*

you'll see

-rw-r--r--  1 root  admin  47194 23 sep 07:53 /usr/local/include/portaudio.h
------------------------------
Good luck

________________________________________________________________________________
Ticket #243 Description
I am a user (not a programmer or developer) and discovered the fldigi application I use daily does not function correct under Apple OS X 10.11 El Capitan.  In testing I  discovered the problem is Apple depreciated the API's used in the Port Audio v19-devel that was last updated on Aug 27, 2008. The purpose of this support request is to see if a Port Audio update is planned to be compatible with OS X 10.11. 

The following is a copy of the OS X system.log error message associated with the failure

Sep 15 08:42:30 Dicks-iMac fldigi[1116]: 08:42:30.790 WARNING:  140: This application, or a library it uses, is using the deprecated Carbon Component Manager for hosting Audio Units. Support for this will be removed in a future release. Also, this makes the host incompatible with version 3 audio units. Please transition to the API's in AudioComponent.h.

Richard Kriss AA5VU
aa5vu@arrl.net

The fldigi developer that uses the Port Audio library is Dave Freese W1HKJ <w1hkj@bellsouth.net>

*2017-01 | Still no progress on transition from deprecated API. Please someone make a branch with modern MacOS support!*

________________________________________________________________________________
Ticket #243 Comment 1
Just checked and still get

Oct 20 11:01:59 Dicks-iMac fldigi[19842]: 11:01:59.871 WARNING:  140: This application, or a library it uses, is using the deprecated Carbon Component Manager for hosting Audio Units. Support for this will be removed in a future release. Also, this makes the host incompatible with version 3 audio units. Please transition to the API's in AudioComponent.h.

I wonder who is maintaining Port Audio?


________________________________________________________________________________
Ticket #243 Comment 2
Does anyone read this page?  I am beginning to think the Port Audio library is orphaned software. 

________________________________________________________________________________
Ticket #243 Comment 3
I clicked on the support button and got

404 Error

We're sorry, but the resource you have requested does not exist on this server.

The Department of Music, Columbia University

For information, email: musicdepartmentwebmaster AT gmail DOT com, or visit our homepage at: music DOT columbia DOT edu

________________________________________________________________________________
Ticket #243 Comment 4
I tried to edit my 1st posting to correct a typo where I used depreciated rather than deprecated and the system does not know me

________________________________________________________________________________
Ticket #243 Comment 5
Looks like Port Audio has been orphaned

________________________________________________________________________________
Ticket #243 Comment 6
PortAudio has not been orphaned. Please see #218

Maybe now we are seeing negative impacts to retaining compatibility with OS 10.4.
So it may be time to convert to the newer APIs.

________________________________________________________________________________
Ticket #243 Comment 8
Any updates on this problem?

________________________________________________________________________________
Ticket #244 Description
Okay i'm noob, so i was maybe doing something wrong, but i doubt it

The docs say on this page http://portaudio.com/docs/v19-doxydocs/compile_linux.html 

<pre><code>gcc -lrt -lasound -ljack -lpthread -o YOUR_BINARY main.c libportaudio.a
</code></pre>

I couldn't compile the example program and i kept getting compilation errors "undefined reference to ceil/pow/sqrt etc" (even though i added -lm parameter) and "..pa_linux_alsa.c:XXX: undefined reference to `snd_XXX". 

Turns out that simply changing the order of the parameters made this issue disappear, once i ran this:

<pre><code>sudo gcc main.c -o file_name libportaudio.a  -lrt -lasound -ljack -pthread -lm
</code></pre>

i managed to successfully compile my program. 

________________________________________________________________________________
Ticket #244 Comment 1
Does it work if you leave off the SUDO? If not then perhaps one of your libraries requires root access. Maybe ALSA was installed incorrectly.

________________________________________________________________________________
Ticket #244 Comment 2
I think this is actually a dependency problem, not a GCC issue:
https://bugs.launchpad.net/ubuntu/+source/portaudio19/+bug/1464913

________________________________________________________________________________
Ticket #244 Comment 3
I believe this documentation problem was fixed with this mod:
https://www.assembla.com/spaces/portaudio/subversion/commits/1966

________________________________________________________________________________
Ticket #245 Description
David Freese reported this bug to the mail list.

----------- BEGIN QUOTE
I am the author of fldigi, a digital modem program that uses the portaudio library.  fldigi runs on all versions of Windows beginning with XP, OS X (i386 and ppc), Linux, Free-BSD and Open-BSD.  The combined user list exceeds 10,000.

A segment of the Windows user community began experiencing application lock up problems commencing with the introduction of Windows 10.  The problem extended to other versions of Windows as Microsoft OS installed patches to their user base.  The common factor in all of the failures was discovered to be Realtek audio h/w installed on the system mother board.  In some (but not all) instances the problem could be averted by installing a new Realtek driver.

To assist in tracking the problem I modified the pa_devs.c program and distributed it for Linux, OS-X and Windows testers.  The Windows build uses mxe and is cross compiled on a Linux platform.  The portaudio library was built with the "--enable-debug-output" flag enabled with suitable callback in the modified pa_devs.c program.

The pa library would never exit a while(1){...} block in the function ULONG GetConnectedPin(...) found in the file pa_win_wdmks.c.  This only occurred with the Realtek h/w.  A copy of the modified pa_devs.c and a part of the debug output is attached

unmodified debug output:  locked.txt

after mod to pa_win_wdmks.c the debug output: pa_debug.txt

the result file from p_devs.c: result.txt

The modified pa library completely resolved the Windows user problem.  I'm not sure it was the best code solution, simply an expedient way to avoid the problem of never leaving the while(1) loop.

Thank you all for an excellent multiple OS library.  I know how difficult it can be to write for multiple platforms.

David Freese
--------------------- END QUOTE

From the debug log:

FindStartConnectionFrom: Checking 2 connections...GetConnectedPin: count=1, forward=0, muxPosition=0
GetNumberOfConnectionsTo: Checking 2 connections...GetConnectionFrom: Checking 2 connections... (pTo = 00262F40)
GetConnectionFrom: Returning 00262F50
GetConnectionFrom: Checking 2 connections... (pTo = 00262F50)
GetConnectionFrom: Returning 00262F40
GetConnectedPin: count=1, forward=0, muxPosition=0
GetNumberOfConnectionsTo: Checking 2 connections...GetConnectionFrom: Checking 2 connections... (pTo = 00262F40)
(continues forever...)

________________________________________________________________________________
Ticket #245 Comment 1
[[file:caw2kwKLCr5yxcacwqjQYw]]

________________________________________________________________________________
Ticket #245 Comment 2
[[file:c13BcaKXSr5AhdacwqEsg8]]

________________________________________________________________________________
Ticket #245 Comment 3
David wrote:
Attached is a unified diff file generated from a git initialized portaudio 19.

Various Windows users reported the assert(FALSE) program halt, but I could not discover any particular pattern to the incidents.  Many more reported the program locking up due to the failed exit from the while (1) {...} block.

________________________________________________________________________________
Ticket #246 Description
I compiled and tested paex_sine on the RaspBerry Pi 2 model B.
The sound was choppy, as if it was constantly underflowing. This was not an occasional glitch. It was a steady buzz.

As an experiment I changed the suggestedLatency from LowOutputLatency to HighOutputLatency. Then the output became smooth.

According to pa_devs, the defaultLowLatency is 5.8 msec. I found that I needed to use a latency of about 30 msec to get smooth sound.

This is a small part of a larger meta bug #97

________________________________________________________________________________
Ticket #247 Description
This was discovered when using a Scarlett 6i6.
You can trigger the test more quickly by setting the initial loop indices to begin with the 6i6 and with 3 channels.

It distorts because the callback only implements mono or stereo.

________________________________________________________________________________
Ticket #248 Description
PA_SVN_REVISION is no longer appropriate now that we use Git.
Also see file update_svnrevision.sh

________________________________________________________________________________
Ticket #248 Comment 4
This command will output the commit SHA
    git rev-parse HEAD

This MergeRequest is a proposed fix:
   https://app.assembla.com/spaces/portaudio/git/merge_requests/3790093

________________________________________________________________________________
Ticket #249 Description
Some line are indented by 4, some by 7, etc.
Use XCode to clean up the indentation.
Check other coreaudio files.

________________________________________________________________________________
Ticket #250 Description
Hi,

I'm facing a problem while using WASAPI with portaudio on Windows.

*Symptoms:*
-Can't open stream using WASAPI host api.

*Output error:*
-"WASAPI ERROR HRESULT: 0x800401F0 : CO_E_NOTINITIALIZED: you must call CoInitialize() before Pa_OpenStream()"
-Followed by: Pa_OpenStream returns error -9996 : Invalid device
 
*Context:*
-Only one input stream, no output stream configured.
-Filling correctly the stream info

*Bugfix:*
-As the error code suggested, adding WINAPI function CoInitialize(NULL) before Pa_OpenStream() fix the issue.

Additionnal info:
-Digging a bit in the code, method PaWinUtil_CoInitialize() of function PaWasapi_Initialize() is correctly called while Portaudio initialization process.

*Code:*

<pre><code>
PaStream*       mStream;

const PaDeviceInfo *deviceInfo;
    deviceInfo = Pa_GetDeviceInfo(mDevice.id);

PaStreamParameters vInputParams;
    vInputParams.device  = mDevice.id;
    vInputParams.channelCount = 1;
    vInputParams.suggestedLatency = 
        Pa_GetDeviceInfo(mDevice.id)->defaultLowInputLatency;
    vInputParams.sampleFormat = paFloat32;
    vInputParams.hostApiSpecificStreamInfo = NULL;

//CoInitialize(NULL) /*<< THIS fix the issue. */

vErr = Pa_OpenStream(
        &mStream,
        &vInputParams,  //Input params
        NULL,           //Output params (no output)
        48000,
        paFramesPerBufferUnspecified,
        paNoFlag,
        portAudioStreamCallback,
        this            //Pass this object as user data. 
        );
</code></pre>

Thank you very much for this wonderful library by the way.

________________________________________________________________________________
Ticket #250 Comment 1
Little precision: CoInitialize() make the Pa_OpenStream to success but the callback is never trigerred, so it does not fix completely the problem.

Regards,

________________________________________________________________________________
Ticket #250 Comment 2
It looks like CoInitialize will get called under Pa_Initialize(). Are you calling Pa_Initialize()?

Do the example programs, specifically paex_sine.c, work with WASAPI?

________________________________________________________________________________
Ticket #250 Comment 3
Dear Phil,

Indeed, paex_sine.c works fine, both with input and output streams. Thanks to this try, I have found the origin of the issue: Pa_initialize() was called from another thread (because I have a "module" architecture in my software).

In fact, the WINAPI Co_Initialize() is a thread-attached function that is initializing MS COM components only for the calling thread. ([[url:https://msdn.microsoft.com/fr-fr/library/windows/desktop/ms678543(v=vs.85).aspx|see this link]]). That said, it could be relevant to add somewhere in the documentation this information (especially for WASAPI); or add a mechanism able to detect if initialization has been done in the same thread that is trying to open the stream.

Looking forward for your answer,

Best regards,

EDIT: Topic seems to have been discussed few years ago... [[url:http://music.columbia.edu/pipermail/portaudio/2010-April/010200.html|http://music.columbia.edu/pipermail/portaudio/2010-April/010200.html]]

________________________________________________________________________________
Ticket #251 Description
ALSA recently added recursive lock protection. PortAudio is attempting to lock recursively, which is now illegal. This causes a hang.

This was reported by Chris Brannon in an email to the PA list.

---------- Chris wrote:
Recently, after upgrading to alsa-lib 1.1.2 on Linux, I started noticing lockups in programs that I use. 
They added some locking and thread safety to alsa with that library version.
I fired up Valgrind's helgrind tool, and I eventually tracked the problem down to Portaudio.
Here's part of my log from helgrind, along with an explanation of what I think is going on.

---begin log---
==13296== Thread #10: Attempt to re-lock a non-recursive lock I already hold
==13296==  0x4C2E7B4: ??? (in /usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so)
==13296==    by 0x6A855F3: snd_pcm_lock (pcm_local.h:1101)
==13296==    by 0x6A855F3: snd_pcm_drop (pcm.c:1197)
==13296==    by 0x63FC24A: AlsaStop.isra.2 (pa_linux_alsa.c:3037)
==13296==    by 0x63FFC79: OnExit (pa_linux_alsa.c:3388)
==13296==    by 0x6402DF7: CallbackThreadFunc (pa_linux_alsa.c:4180)
==13296==    by 0x4C31506: ??? (in /usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so)
==13296==    by 0x661D493: start_thread (in /lib64/libpthread-2.22.so)
==13296==    by 0x54535DC: clone (in /lib64/libc-2.22.so)
==13296==  Lock was previously acquired
==13296==    at 0x4C2E87D: ??? (in /usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so)
==13296==    by 0x6A89404: snd_pcm_lock (pcm_local.h:1101)
==13296==    by 0x6A89404: snd_pcm_mmap_commit (pcm.c:7030)
==13296==    by 0x63FF6C6: PaAlsaStreamComponent_EndProcessing.part.13 (pa_linux_alsa.c:3489)
==13296==    by 0x63FF941: PaAlsaStreamComponent_EndProcessing (pa_linux_alsa.c:3596)
==13296==    by 0x63FF941: PaAlsaStream_EndProcessing (pa_linux_alsa.c:3596)
==13296==    by 0x6402FAC: CallbackThreadFunc (pa_linux_alsa.c:4329)
==13296==    by 0x4C31506: ??? (in /usr/lib64/valgrind/vgpreload_helgrind-amd64-linux.so)
==13296==    by 0x661D493: start_thread (in /lib64/libpthread-2.22.so)
==13296==    by 0x54535DC: clone (in /lib64/libc-2.22.so)
---end log---

And here's the first part of the definition of CallbackThreadFunc, from
portaudio's src/hostapi/alsa/pa_linux_alsa.c:

static void *CallbackThreadFunc( void *userData )
{
... variable definitions elided

    /* Execute OnExit when exiting */
    pthread_cleanup_push( &OnExit, stream );

That's around line 4180 in my copy of the file.

So the thread is executing in PaAlsaStreamComponent_EndProcessing, which
calls snd_pcm_mmap_commit.  That function locks the pcm mutex, does some
stuff, and unlocks the mutex.  But the thread is canceled during the
snd_pcm_mmap_commit call.  The OnExit handler gets called, and it tries to
lock the mutex, but the lock was already taken in snd_pcm_mmap_commit,
which was not allowed to finish executing.

________________________________________________________________________________
Ticket #251 Comment 2
[[file:bI3ZfSArar5OkEdmr6CpXy]]

________________________________________________________________________________
Ticket #251 Comment 3
As discussed on the PA list, this issue is not actually about recursion (so I've edited the title), but that 'AbortStream' cancels the callback thread sometimes while it is calling Alsa-lib functions, and as a result one does not complete, retaining the lock.  Is is not, and never has been, safe to cancel during Alsa execution (I've had this confirmed - "don't even think about it").  The newer Alsa-lib simply exposes this flaw in Portaudio due to the added locking.

A possible solution patch, that disables thead cancelability during the critical processing section of the callback, has been confirmed to be effective.

Similar cancelling is used in the OSS and ASIHPI host apis, so we may need to think about those also.

________________________________________________________________________________
Ticket #251 Comment 5
[[file:d-tioeArar5O4VacwqEsg8]]

________________________________________________________________________________
Ticket #251 Comment 7
A more thorough version of this patch 'pa_linux_alsa.c-cancelability_4.diff' (attached) disables cancelablity on the callback thread entirely, and just re-enables it for the poll() in PaAlsaStream_WaitForFrames().  This is necessary as there are various calls to Alsa-lib functions during the processing which might otherwise occasionally suffer cancellation.  These changes are reported to be effective.

________________________________________________________________________________
Ticket #251 Comment 8
[[file:cQ1WKAEear5OkdacwqjQYw]]

________________________________________________________________________________
Ticket #251 Comment 9
[[file:dA_BQYEear5PSfdmr6QqzO]]

________________________________________________________________________________
Ticket #251 Comment 10
Thanks Alan. I will make a Git MergeRequest from the last patch.

________________________________________________________________________________
Ticket #251 Comment 11
Merge request is this one:

pa_linux_alsa: fix hang in callback caused by abort
https://assembla.com/code/portaudio/git/merge_requests/3834073

________________________________________________________________________________
Ticket #251 Comment 12
Fix was merged in 2016.

________________________________________________________________________________
Ticket #252 Description
WriteStream() loops waiting for empty frames in the stream's ring buffer. But if the stream is aborted then that will never happen.

Alex Agranovsky reported:
The symptom I'm seeing is as follows:

- Thread 1 is in Pa_WriteBuffer.
- Thread 2 calls Pa_AbortStream and waits fro thread 1 to exit.
- Pa_WriteBuffer never returns

It seems like Thread 1 is busy spinning around pa_mac_core_blocking.c:534 :

  thread #4: tid = 0x1615e06, 0x959c1aee libsystem_kernel.dylib`mach_wait_until + 10
    frame #0: 0x959c1aee libsystem_kernel.dylib`mach_wait_until + 10
    frame #1: 0x91956d40 libsystem_c.dylib`nanosleep + 360
    frame #2: 0x0fd4c573 libportaudio.2.dylib`Pa_Sleep(msec=5) + 115 at pa_unix_util.c:116
    frame #3: 0x0fd52e8c libportaudio.2.dylib`WriteStream(stream=<unavailable>, buffer=<unavailable>, framesRequested=<unavailable>) + 44 at pa_mac_core_blocking.c:534
    frame #4: 0x0fc98e8e libsv.dylib`_au_thread_func(param=0x0f016fd0) + 1550 at stream_audio_renderer_portaudio.cpp:197
    frame #5: 0x0fd2e53e libsv.dylib`_sv_thread_entry_point(context=0x0047b070) + 62 at sv_os.cpp:723
    frame #6: 0x9bc00c25 libsystem_pthread.dylib`_pthread_body + 138
    frame #7: 0x9bc00b9b libsystem_pthread.dylib`_pthread_start + 162
    frame #8: 0x9bbfde32 libsystem_pthread.dylib`thread_start + 34

________________________________________________________________________________
Ticket #252 Comment 1
We need to check if the stream is still active in the while condition on line 537. And similarly on line 457 for the read.

________________________________________________________________________________
Ticket #252 Comment 2
MergeRequest with fix available for review here:
  https://app.assembla.com/spaces/portaudio/git/merge_requests/3752003

________________________________________________________________________________
Ticket #252 Comment 3
Fixed in 2016 in https://app.assembla.com/spaces/portaudio/git/merge_requests/3829453

________________________________________________________________________________
Ticket #253 Description
The new Pa_GetAvailableHostApis() API (see ticket #10) is not sufficient to inform the application about which APIs will actually work, since it only returns the APIs which were compiled in to PortAudio. Host APIs that PortAudio dynamically loads (e.g. DirectSound, and ALSA (when certain build flags are set) may be returned by Pa_GetAvailableHostApis() but not actually present (so initializing them will yield no devices).

The current idea is to add a new function:

<pre><code>
/** Probe for whether a host API is actually installed on the system.

@return Returns paNoError if the API is present, and an error otherwise, 
such as paInvalidHostApi if the host API is not compiled in, or 
paHostApiNotFound if the host API is not present on the system.
*/
PaError Pa_IsHostApiInstalled( PaHostApiTypeId hostApiTypeId );  
</code></pre>

At the present time there are two APIs that could support this function: ALSA and DirectSound.

The implementation would be easiest by building off the ticket #10 work and adding an additional IsHostApiInstalled function pointer to each host APIs initializer entry.



________________________________________________________________________________
Ticket #254 Description
This has always been the case, but it needs to be better documented.

Right now I'm not sure where this documentation should go. It should be in the doxygen documentation for sure.

________________________________________________________________________________
Ticket #254 Comment 1
We should have a recommended practice for putting all the PortAudio calls in one thread, or using a Mutex.
Can we assume it is safe to call Pa_StopStream() and Pa_AbortStream() when a callback is active? Or do we have to request the callback to exit by passing it a flag so the callback can then return paComplete and then stop the stream?

________________________________________________________________________________
Ticket #255 Description
All build information is in Doxygen except for the MinGW information.

Out of date: http://portaudio.com/docs/v19-doxydocs/compile_windows_mingw.html
(source: doc/src/tutorial/compile_windows_mingw.dox)

New: https://app.assembla.com/wiki/show/portaudio/Notes_about_building_PortAudio_with_MinGW

The task involves reviewing/updating the new documentation and transferring into Doxygen's markup format.

________________________________________________________________________________
Ticket #256 Description
sqweek wrote:
 I hit an error in examples/paex_read_write_wire.c:

paex_read_write_wire.c: In function 'int main()':
paex_read_write_wire.c:193: error: jump to label 'error2' [-fpermissive]
paex_read_write_wire.c:104: error: from here
paex_read_write_wire.c:120: error: crosses initialization of 'int numChannels'

________________________________________________________________________________
Ticket #256 Comment 1
Fixed in 2016.

________________________________________________________________________________
Ticket #257 Description
When building pa_win_wdmks.c with MinGW, the build fails with redefined symbol errors. These are fixed by the following change:

<pre><code>
#include <windows.h>
- #include <winioctl.h>
+// #include <winioctl.h>
#include <process.h>
</code></pre>

This fix has been proposed multiple times, most recently here:

https://lists.columbia.edu/pipermail/portaudio/2016-September/000861.html

which references this fix:

https://github.com/mxe/mxe/issues/716

The fix was also present in the Jitsi patches:

<pre><code>
/* #include <winioctl.h> MinGW-w64 4.7.1 from TDM-GCC throws multiple redefinition errors. */
</code></pre>

https://app.assembla.com/spaces/portaudio/git/commits/6c6269425f647a82986b152584849b5fd827510d

* Under MSVC2015, pa_win_wdmks.c builds correctly without including winioctl.h (tested by Ross)
* Inclusion of winioctl.h has been present in pa_win_wdmks.c since the first commit: https://app.assembla.com/spaces/portaudio/subversion/commits/812



________________________________________________________________________________
Ticket #257 Comment 1
Iterim fix:

https://app.assembla.com/spaces/portaudio/git/commits/18b2ab2339b37616f969961fea3503f406c31f93

I think we should just delete the line after this release.

________________________________________________________________________________
Ticket #258 Description
Reported by Daniel Schrmann

________________________________________________________________________________
Ticket #259 Description
SCONS tries to build a bunch of test programs. The script is here:

    src/SConscript:202:testNames = ["patest_sine", .....

Some of the test programs have been converted to examples. For example "test/patest_sine.c" is now "examples/paex_sine.c". So "patest_sine" is not found and the build fails.

The file src/SConscript needs to be updated to use the current names.

________________________________________________________________________________
Ticket #259 Comment 1
I looked at the last "stable" release from  January 30, 2014, SVN rev 1919.
It had the same error. Its "src/SConstruct" referenced "patest_sine".
So this is not a regression from the stable release.

________________________________________________________________________________
Ticket #260 Description
Karl Wolfram reported this problem to the mail list:
https://lists.columbia.edu/pipermail/portaudio/2016-October/000904.html

He says:
I think the logic in Pa_Terminate is not working correctly. Here is the actual code from that function from pa_front.c, line 385:

01 PaError Pa_Terminate( void )
02 {
03     PaError result;
04 
05     PA_LOGAPI_ENTER( "Pa_Terminate" );
06 
07     if( PA_IS_INITIALISED_ )
08     {
09         if( --initializationCount_ == 0 )
10         {
11             CloseOpenStreams();
12 
13             TerminateHostApis();
14 
15             PaUtil_DumpTraceMessages();
16         }
17         result = paNoError;
18     }


In line 09, the initializationCount is reduced. If Pa_Initialize has only been called once, it will now be zero. Now, the call to CloseOpenStreams will fail, because they call PaUtil_ValidateStreamPointer, which does this:   

if( !PA_IS_INITIALISED_ ) return paNotInitialized;

So in Pa_CloseStream, the code after 
if( result == paNoError )
will never be called.

A better approach might be this (comments added to changed lines):

01 PaError Pa_Terminate( void )
02 {
03     PaError result;
04 
05     PA_LOGAPI_ENTER( "Pa_Terminate" );
06 
07     if( PA_IS_INITIALISED_ )
08     {
09         if( initializationCount_ == 1 )    // leave initializationCount_>0 so that Pa_CloseStream will execute
10         {
11             CloseOpenStreams();
12 
13             TerminateHostApis();
14 
15             PaUtil_DumpTraceMessages();
16         }
17         --initializationCount_;     // now set initializationCount_ to zero
18         result = paNoError;
19     }

________________________________________________________________________________
Ticket #260 Comment 1
Possible fix here:
https://app.assembla.com/spaces/portaudio/git/merge_requests/4012103

________________________________________________________________________________
Ticket #260 Comment 2
Fixed in 2016.

________________________________________________________________________________
Ticket #261 Description
https://app.assembla.com/spaces/portaudio/git/source/master/CMakeLists.txt#ln206

You should change:
  IF(MSVS)

for:
 IF(MSVC)

________________________________________________________________________________
Ticket #262 Description
My sampler (sound blaster) is 96000hz.
I need to syncronize the output signal with the input signal, so the time_info is critical for us. We need to know the exact time difference between the first sample of of the output buffer and the first sample of the input buffer.

However, the problem is that the time_info gap between two consecutive write or read buffers (callbacks) are not the same. For example:
My buffer is 19200 for the read and write and when I print it each callback I get:

Time gap between READ  buffers: 0.19993333332968177274 
Time gap between WRITE buffers: 0.20000299999810522422


Time gap between READ  buffers: 0.20001300000149058178 
Time gap between WRITE buffers: 0.20000299999810522422


Time gap between READ  buffers: 0.20000900000013643876 
Time gap between WRITE buffers: 0.20000099999742815271


Time gap between READ  buffers: 0.19996774999162880704 
Time gap between WRITE buffers: 0.19999800000368850306

19200 / 96000 should be 0.2 seconds always, but I get different times in the time_info, which eliminates my ability to sync the output with the input.
I am working with a 40khz sound wave, so in order to sync the phase I need the times to be accurate by 1 microsecond maximum.

Is this a problem in PortAudio? Is this a problem in my sound card? Do these time_info numbers come from the sound card (the hardware) or from PortAudio?


I am using PyAudio (PortAudio binding for Python) in Ubuntu.

________________________________________________________________________________
Ticket #263 Description
The variable "dir" is used uninitialized on lines 923 and 933 (both have the same content):

<pre><code>
ENSURE_( alsa_snd_pcm_hw_params_set_period_size_near( pcm, hwParams, &alsaPeriodFrames, &dir ), paUnanticipatedHostError );
</code></pre>

In other calls to "alsa_snd_pcm_hw_params_set_period_size_near" there is the following line just before each call:

<pre><code>
dir = 0;
</code></pre>

________________________________________________________________________________
Ticket #263 Comment 1
According to this doc:
http://www.alsa-project.org/alsa-doc/alsa-lib/group___p_c_m___h_w___params.html#ga9162045265f283c532634506456cab09
dir is a direction and should be (-1,0,1). It is not clear from the documentation whether the function expects it to be set on entry. But it does seem safer to set it to zero rather than leaving it uninitialized.

________________________________________________________________________________
Ticket #263 Comment 2
Georgi D. Sotirov provided the following feedback via the mailing list:

[[url:https://lists.columbia.edu/pipermail/portaudio/2019-May/001812.html|https://lists.columbia.edu/pipermail/portaudio/2019-May/001812.html]]

I took some time today looking at PortAudio sources (which I'm building for Slackware Linux since more than 10 years BTW) in the Git repo as well as ALSA Library sources on GitHub. In PortAudio alsa_snd_pcm_hw_params_set_period_size_near is just a wrapper over snd_pcm_hw_params_set_period_size_near of ALSA, which looking at the sources in turn calls snd_pcm_hw_param_set_near. And this function uses the value of parameter dir to calculate the values of local variables valdir, mindir and maxdir (former two are also passed to other functions). So the variable dir in the call to snd_pcm_hw_params_set_period_size_near (a.k.a. alsa_snd_pcm_hw_params_set_period_size_near) should really be initialized or left NULL, so valdir is initialized with zero. Anyway, leaving the local variable uninitialized is not good, so a simple patch would be just to initialize it with zero, which seems to be the default (or just pass NULL).

<pre><code>diff --git a/src/hostapi/alsa/pa_linux_alsa.c b/src/hostapi/alsa/pa_linux_alsa.c
index 584cde8..3fac311 100644
--- a/src/hostapi/alsa/pa_linux_alsa.c
+++ b/src/hostapi/alsa/pa_linux_alsa.c
@@ -842,7 +842,7 @@ static PaError GropeDevice( snd_pcm_t* pcm, int isPlug, StreamDirection mode, in
     double * defaultLowLatency, * defaultHighLatency, * defaultSampleRate =
         &devInfo->baseDeviceInfo.defaultSampleRate;
     double defaultSr = *defaultSampleRate;
-    int dir;
+    int dir = 0;
</code></pre>

If someone could check more thoroughly what was the intention for the call of this ALSA function, this could eventually leave to a better patch. I see from the history in Git, that gineera committed this call in revision 28f9ee09658dc79ab186b7b5a7577ad177f43866 on 2013-06-08 also introducing the local variable, so perhaps he/she is the right person to review this part of the source and decide the best way to fix it.

________________________________________________________________________________
Ticket #263 Comment 3
The discussion has moved on, the preferred patch is now this one:

[[url:https://lists.columbia.edu/pipermail/portaudio/2019-May/001820.html|https://lists.columbia.edu/pipermail/portaudio/2019-May/001820.html]]

<pre><code>
diff --git a/src/hostapi/alsa/pa_linux_alsa.c b/src/hostapi/alsa/pa_linux_alsa.c
index 584cde8..b5bdd3a 100644
--- a/src/hostapi/alsa/pa_linux_alsa.c
+++ b/src/hostapi/alsa/pa_linux_alsa.c
@@ -842,7 +842,6 @@ static PaError GropeDevice( snd_pcm_t* pcm, int isPlug, StreamDirection mode, in
     double * defaultLowLatency, * defaultHighLatency, * defaultSampleRate =
         &devInfo->baseDeviceInfo.defaultSampleRate;
     double defaultSr = *defaultSampleRate;
-    int dir;

     assert( pcm );

@@ -920,7 +919,7 @@ static PaError GropeDevice( snd_pcm_t* pcm, int isPlug, StreamDirection mode, in
     alsaBufferFrames = 512;
     alsaPeriodFrames = 128;
     ENSURE_( alsa_snd_pcm_hw_params_set_buffer_size_near( pcm, hwParams, &alsaBufferFrames ), paUnanticipatedHostError );
-    ENSURE_( alsa_snd_pcm_hw_params_set_period_size_near( pcm, hwParams, &alsaPeriodFrames, &dir ), paUnanticipatedHostError );
+    ENSURE_( alsa_snd_pcm_hw_params_set_period_size_near( pcm, hwParams, &alsaPeriodFrames, NULL ), paUnanticipatedHostError );
     *defaultLowLatency = (double) (alsaBufferFrames - alsaPeriodFrames) / defaultSr;

     /* Base the high latency case on values four times larger */
@@ -930,7 +929,7 @@ static PaError GropeDevice( snd_pcm_t* pcm, int isPlug, StreamDirection mode, in
     ENSURE_( alsa_snd_pcm_hw_params_any( pcm, hwParams ), paUnanticipatedHostError );
     ENSURE_( SetApproximateSampleRate( pcm, hwParams, defaultSr ), paUnanticipatedHostError );
     ENSURE_( alsa_snd_pcm_hw_params_set_buffer_size_near( pcm, hwParams, &alsaBufferFrames ), paUnanticipatedHostError );
-    ENSURE_( alsa_snd_pcm_hw_params_set_period_size_near( pcm, hwParams, &alsaPeriodFrames, &dir ), paUnanticipatedHostError );
+    ENSURE_( alsa_snd_pcm_hw_params_set_period_size_near( pcm, hwParams, &alsaPeriodFrames, NULL ), paUnanticipatedHostError );
     *defaultHighLatency = (double) (alsaBufferFrames - alsaPeriodFrames) / defaultSr;

     *minChannels = (int)minChans;
</code></pre>

________________________________________________________________________________
Ticket #263 Comment 4
proposed fix: https://app.assembla.com/spaces/portaudio/git/merge_requests/7612921?section=commits

________________________________________________________________________________
Ticket #263 Comment 5
There are three other places in the code where the dir variable is not initialized prior to calling an alsa function. The following merge request addresses the issue:

https://app.assembla.com/spaces/portaudio/git/merge_requests/7613051

________________________________________________________________________________
Ticket #263 Comment 6
The fix was merged by rbencina2020-08-05 17:25. Closing.

________________________________________________________________________________
Ticket #264 Description
... so the pa_devs.c example does not build.

This can be easily fixed by adding a line such as:

     Pa_GetVersionInfo                   @70

to portaudio\build\msvc\portaudio.def

________________________________________________________________________________
Ticket #265 Description
We needed to decide whether we can make any guarantees about these two callbacks regarding synchronization.
Then we should document whether or not there are any guarantees.

Issues to be resolved:
1) Will the two callbacks be called on the same thread?
2) If on separate threads, will the two callbacks ever be called simultaneously?
3) If on separate threads, is a memory barrier already enforced between them?

This was prompted by a question on the PA mail list by Kalle Huttunen on March 23 2017, subject "PaStreamCallback and PaStreamFinishedCallback threads".

Apparently on Linux they are currently in the same thread. I suspect that on a host that does native callbacks this may not be true.



________________________________________________________________________________
Ticket #265 Comment 1
Host APIs to check:
___ alsa
___ ahihpi
___ asio
___ coreaudio
___dsound
___ jack
___ oss
___ wasapi
___ wdmks
___wmme

________________________________________________________________________________
Ticket #266 Description
Hi everyone,

I'm developing a software which makes use of PortAudio framework to access the audio (Ubuntu).
While testing it on different acquisition devices, i figured out that a weird error occured on Microsoft LifeCam...

<pre><code>Expression 'paTimedOut' failed in 'src/os/unix/pa_unix_util.c', line: 387
Expression 'PaUnixThread_New( &stream->thread, &CallbackThreadFunc, stream, 1., stream->rtSched )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 2917
An error occured while starting the audio API
Error number: -9987
Error message: Wait timed out
Expression 'pthread_join( self->thread, &pret )' failed in 'src/os/unix/pa_unix_util.c', line: 441
</code></pre>

Trying to fix the problem, I ran other several tests, using PyAudio, a Python module that interfaces PortAudio, and I realize that PyAudio handled the situation somehow.

Anyone has any idea how to solve it?
My first attempt was to increase the TimeOut value, but I couldn't find it in the project source files (nor *.c nor *.h).

Cheers,
Pedro.

________________________________________________________________________________
Ticket #267 Description
Pa_OpenStream() receives the outgoing stream's samplerate as an argument when opening a device for audio output. Whatever this information is used for, it does not appear to include a logical action: setting the output device to the samplerate.

AFAIK there are basically 2 schools, one claiming this should never be done, and another (the "bitperfect" audio school) that considers it should.

I think it'd be great to have an option to let Pa_OpenStream() handle this platform-specific action which ensures that the actual output device can render the outgoing content as well as possible (and allows audio players to play content "as is", without introducing artefacts due to resampling to match the output device).

An example implementation (complementing Pa_OpenStream(), not modifying it) can be found here:

https://github.com/RJVB/QMPlay2/blob/bitperfect/src/modules/PortAudio/PortAudioWriter.cpp#L262
https://github.com/RJVB/QMPlay2/blob/bitperfect/src/modules/PortAudio/Mac/AudioDevice.mm

This attempts to find the most appropriate sample rate supported by the device corresponding to the stream's sample rate (an exact match or else such that one frequency is an integer multiple of the other).

This is for Mac; MS Windows allows this too (via WASAPI) as well as ALSA (AFAIK)

________________________________________________________________________________
Ticket #268 Description
I am not sure if it is a PortAudio or an fldigi bug, but as a developer, I would say that if an assertion occurs inside the library, it is a bug of the library, unless we are dealing with some memory corruption or race conditions.

So, I can only reproduce the bug with [[url:https://sourceforge.net/p/fldigi/fldigi/ci/master/tree/|fldigi]]. Reproducibility is 100%. Examples supplied with PortAudio and other PortAudio clients seem to work just fine.
Moreover, this happens only with Alsa 1.1.4.1 (and 1.1.4), but does not happen with the older 1.1.3.

The stacktrace is:

<pre><code>#0  0x00007ffff5a9802f in raise () from /lib64/libc.so.6
#1  0x00007ffff5a9942a in abort () from /lib64/libc.so.6
#2  0x00007ffff5a90e87 in ?? () from /lib64/libc.so.6
#3  0x00007ffff5a90f32 in __assert_fail () from /lib64/libc.so.6
#4  0x00007ffff7bb2273 in PaAlsaStreamComponent_BeginPolling (pfds=<optimized out>, self=<optimized out>)
    at /var/tmp/portage/media-libs/portaudio-19.06.00/work/portaudio/src/hostapi/alsa/pa_linux_alsa.c:3636
#5  0x00007ffff7bbfe15 in PaAlsaStreamComponent_BeginPolling (pfds=<optimized out>, self=<optimized out>)
    at /var/tmp/portage/media-libs/portaudio-19.06.00/work/portaudio/src/hostapi/alsa/pa_linux_alsa.c:3926
#6  PaAlsaStream_WaitForFrames (self=self@entry=0x7fffe4001a00, framesAvail=framesAvail@entry=0x7fffe99afe40,
    xrunOccurred=xrunOccurred@entry=0x7fffe99afe3c)
    at /var/tmp/portage/media-libs/portaudio-19.06.00/work/portaudio/src/hostapi/alsa/pa_linux_alsa.c:3797
#7  0x00007ffff7bc05ce in CallbackThreadFunc (userData=0x7fffe4001a00)
    at /var/tmp/portage/media-libs/portaudio-19.06.00/work/portaudio/src/hostapi/alsa/pa_linux_alsa.c:4269
#8  0x00007ffff7998374 in start_thread () from /lib64/libpthread.so.0
#9  0x00007ffff5b4db2f in clone () from /lib64/libc.so.6
</code></pre>

________________________________________________________________________________
Ticket #268 Comment 2
[[file:cTF4YSXsyr6l5tbK8JiBFu]]

________________________________________________________________________________
Ticket #268 Comment 3
I had this happening to me as well, fairly intermittently (it could take up to six hours to trigger the bug).
It can also be triggered deliberately by taking too long in the audioCallback, i.e.:
std::this_thread::sleep_for(std::chrono::milliseconds(1000));

In both cases `alsa_snd_pcm_poll_descriptors` (pa_linux_alsa.c:3634) returns -32 (Broken Pipe) which fails the assert on line 3636.

Treating the Broken Pipe response from alsa as an xrun seems to be working. My attached pa_linux_alsa.c has my two edits marked with 'Chameleon edit' comments.

________________________________________________________________________________
Ticket #268 Comment 4
The attached pa_linux_alsa.c works for me (the original reporter of this issue). Thanks!

________________________________________________________________________________
Ticket #269 Description
I recently encountered the following problem.

Building portaudio's latest stable release on Linux (Ubuntu 16.04) via CMake (3.5.1) will not install the static build target.
 
Whether or not this is the intended behavior, changing line 393 in CMakeLists.txt to

<<<< INSTALL(TARGETS portaudio portaudio_static DESTINATION lib) >>>>

will solve the problem.

________________________________________________________________________________
Ticket #270 Description
Hi!
I'm seeking for know how does Portaudio manage its internal memory! I want to know what is the workflow from the hardware to the user-Portaudio-callback...
When Portaudio evokes the user-callback, is it still acquiring audio? When does Portaudio evoke the callback? Is it when 1 buffer is full, or when it's half-filled? How many time does user have to handle the inputbuffer that arrives in the callback?
Does Portaudio have multiple internal buffers? Or does it uses always the same to expose the data to users?

Can someone give me some insights about that?
Thanks!

________________________________________________________________________________
Ticket #270 Comment 2
Meanwhile, I found this info in the depths

" In order for a stream to maintain glitch-free operation the callback must consume and return audio data faster than it is recorded and/or played. PortAudio anticipates that each callback invocation may execute for a duration approaching the duration of frameCount audio frames at the stream sample rate. It is reasonable to expect to be able to utilise 70% or more of the available CPU time in the PortAudio callback." 

in http://www.portaudio.com/docs/v19-doxydocs/portaudio_8h.html#a8a60fb2a5ec9cbade3f54a9c978e2710

________________________________________________________________________________
Ticket #271 Description
I'm getting this error on 6 different computers, all running a fresh install of Arch Linux with kernel 4.9.6-1-ARCH #1 SMP PREEMPT. Hardware is Z97 chipset/4790K i7 with Realtek ALC892.

This occurs with the Arch distribution of portaudio (portaudio-190600_20161030) and the git HEAD version, and can be reproduced with even the most basic Pa_OpenDefaultStream + sinewave example.

This is the only other reference I've found to the issue (no resolution): http://portaudio.music.columbia.narkive.com/UdNrz65H/assertion-failed-in-paalsastreamcomponent-beginpolling 

Any ideas??

Thanks!!
Luke

________________________________________________________________________________
Ticket #271 Comment 2
I experience the same with the shipped example:

Starting program: /usr/bin/patest1 
[Thread debugging using libthread_db enabled]
Using host libthread_db library "/lib64/libthread_db.so.1".
patest1.c
Ring modulate input for 20 seconds.
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/pcm/pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.rear
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/pcm/pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.center_lfe
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/pcm/pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.side
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/pcm/pcm_route.c:869:(find_matching_chmap) Found no matching channel map
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/confmisc.c:1281:(snd_func_refer) Unable to find definition 'defaults.bluealsa.device'
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/conf.c:4555:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/conf.c:5023:(snd_config_expand) Args evaluate error: No such file or directory
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/pcm/pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM bluealsa
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/confmisc.c:1281:(snd_func_refer) Unable to find definition 'defaults.bluealsa.device'
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/conf.c:4555:(_snd_config_evaluate) function snd_func_refer returned error: No such file or directory
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/conf.c:5023:(snd_config_expand) Args evaluate error: No such file or directory
ALSA lib /var/tmp/portage/media-libs/alsa-lib-1.1.6-r1/work/alsa-lib-1.1.6/src/pcm/pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM bluealsa
[New Thread 0x7ffff6b32700 (LWP 6831)]
Press any key to end.
patest1: /var/tmp/portage/media-libs/portaudio-9999/work/portaudio-9999/src/hostapi/alsa/pa_linux_alsa.c:3636: PaAlsaStreamComponent_BeginPolling: Assertion `ret == self->nfds' failed.

Thread 2 "patest1" received signal SIGABRT, Aborted.
[Switching to Thread 0x7ffff6b32700 (LWP 6831)]
0x00007ffff717e7cb in raise () from /lib64/libc.so.6
(gdb) bt
#0  0x00007ffff717e7cb in raise () from /lib64/libc.so.6
#1  0x00007ffff717fff1 in abort () from /lib64/libc.so.6
#2  0x00007ffff717634a in __assert_fail_base () from /lib64/libc.so.6
#3  0x00007ffff71763d2 in __assert_fail () from /lib64/libc.so.6
#4  0x00007ffff7f9f483 in PaAlsaStreamComponent_BeginPolling.part.4 () from /usr/lib64/libportaudio.so.2
#5  0x00007ffff7fa4f9b in PaAlsaStream_WaitForFrames () from /usr/lib64/libportaudio.so.2
#6  0x00007ffff7fa571a in CallbackThreadFunc () from /usr/lib64/libportaudio.so.2
#7  0x00007ffff751696a in start_thread () from /lib64/libpthread.so.0
#8  0x00007ffff724b5ff in clone () from /lib64/libc.so.6

________________________________________________________________________________
Ticket #272 Description
OS: Linux (Ubuntu/Debian)

When using the attached code def.c i get this output:

<pre><code>$ ./def-git
ALSA lib pcm_dsnoop.c:618:(snd_pcm_dsnoop_open) unable to open slave
ALSA lib pcm_dmix.c:1022:(snd_pcm_dmix_open) unable to open slave
ALSA lib pcm.c:2239:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.rear
ALSA lib pcm.c:2239:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.center_lfe
ALSA lib pcm.c:2239:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.side
ALSA lib pcm_dmix.c:1022:(snd_pcm_dmix_open) unable to open slave
PortAudio version: 0x00130600
Version text: 'PortAudio V19.6.0-devel, revision 1bdcb9e41357ec76d8cf73f9ef278202a3ea1e3b'
Number of devices = 6
Default IN[5] OUT[5]
[ 0]  Name[HDA Intel: ALC662 rev1 Digital (hw:0,1)   ] API[ALSA]
[ 1]  Name[HDA Intel: ALC662 rev1 Alt Analog (hw:0,2)] API[ALSA]
[ 2]  Name[iec958                                    ] API[ALSA]
[ 3]  Name[spdif                                     ] API[ALSA]
[ 4]  Name[pulse                                     ] API[ALSA]
[ 5]* Name[default                                   ] API[ALSA]

</code></pre>

even when setting the env var as suggested
<pre><code>$ export PA_RECOMMENDED_OUTPUT_DEVICE=0
[... same output ...]
</code></pre>

With two soundcards how would i select one or the other?

attaching doesn't seem to work, so:
<pre><code>#include <stdio.h>
#include "portaudio.h"

int main(void) {
   int     i, numDevices, defIn, defOut;
   const   PaDeviceInfo *deviceInfo;

   PaError err;

   err = Pa_Initialize();
   if( err != paNoError ) {
      printf( "ERROR: Pa_Initialize 0x%x (%s)\n", err, Pa_GetErrorText(err));
      Pa_Terminate();
      return err;
   }

   printf( "PortAudio version: 0x%08X\n", Pa_GetVersion());
   printf( "Version text: '%s'\n", Pa_GetVersionInfo()->versionText );

   numDevices = Pa_GetDeviceCount();
   if( numDevices < 0 ) {
      printf( "ERROR: Pa_GetDeviceCount 0x%x (%s)\n", numDevices, Pa_GetErrorText(err));
      err = numDevices;
      Pa_Terminate();
      return err;
   }

   printf( "Number of devices = %d\n", numDevices );
   defIn=Pa_GetDefaultInputDevice();
   defOut=Pa_GetDefaultOutputDevice();

   printf( "Default IN[%d] OUT[%d]\n", defIn, defOut);

   for( i=0; i<numDevices; i++ ) {
      deviceInfo = Pa_GetDeviceInfo( i );
      printf( "[%2d]%c Name[%-42s] API[%s]\n", i, (i==defOut) ? '*' : ' ', deviceInfo->name, Pa_GetHostApiInfo( deviceInfo->hostApi )->name );

   }
   Pa_Terminate();
   return 0;
}

</code></pre>

________________________________________________________________________________
Ticket #273 Description
static PaError PinRegisterPositionRegister(PaWinWdmPin* pPin) {
. . .
propIn.Property.Flags = KSPROPERTY_TYPE_SET; // This is a bug, needs to be KSPROPERTY_TYPE_GET

I found this by using Port Audio as a reference to how to use WDM/KS with WaveRT, and duplicated the bug in my own source. Changing to GET enabled memory mapped position to work on my laptop.

Suggests at least for some drivers, Port Audio might have never had working memory mapped position and instead always did the fall back. Unless I accidentally changed the Port Audio source after downloading without realizing it.

________________________________________________________________________________
Ticket #274 Description
Running on High Sierra with the latest XCode, the build ends with:

configure: error: Could not find 10.5 to 10.12 SDK.

$xcodebuild -version -sdk macosx10.13
MacOSX10.13.sdk - macOS 10.13 (macosx10.13)
SDKVersion: 10.13
Path: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform/Developer/SDKs/MacOSX10.13.sdk
PlatformVersion: 1.1
PlatformPath: /Applications/Xcode.app/Contents/Developer/Platforms/MacOSX.platform
ProductBuildVersion: 17B41
ProductCopyright: 1983-2017 Apple Inc.
ProductName: Mac OS X
ProductUserVisibleVersion: 10.13.1
ProductVersion: 10.13.1

________________________________________________________________________________
Ticket #274 Comment 2
configure: support SDK 10.13 in XCode

Updated configure.in
then ran autoconf to regenerate the configure script.

Fixes #274

Committed to: portaudio:ticket_274_xcode
Commit: [[r:6e3f6b702f382905e3905682e7adaedf7e58958f|portaudio:6e3f6b702f]]

________________________________________________________________________________
Ticket #274 Comment 4
An older similar issue is here:
https://app.assembla.com/spaces/portaudio/tickets/179-build-issues-on-os-x-10-6/details


________________________________________________________________________________
Ticket #274 Comment 6
Proposed Merge Request here:
    https://app.assembla.com/spaces/portaudio/git/merge_requests/6183813
Please review.

________________________________________________________________________________
Ticket #274 Comment 7
Merge branch 'ticket_274_xcode' into 'master'

configure: support SDK 10.13 in XCode

fixed #274

+1: Ryan Ollos

Merged-on: https://assembla.com/code/portaudio/git/merge_requests/6183813

Committed to: portaudio:master
Commit: [[r:8a8078a9ba873a00282e2dcc12c50e9f27f6cd88|portaudio:8a8078a9ba]]

________________________________________________________________________________
Ticket #275 Description
This is needed in order to be ANSI compliant.
Declaration in include/portaudio.h

Thanks Tom M for reporting this.

________________________________________________________________________________
Ticket #276 Description
The Pa_OpenStream doc says on 'paFramesPerBufferUnspecified' :

> "The special value paFramesPerBufferUnspecified (0) may be used to request that the stream callback will receive an optimal (and possibly varying) number of frames based on host requirements and the requested latency settings"

And the 'suggestedLatency' parameter doc says:

> "[...] implementations should round the suggestedLatency up to the next practical value - ie to provide an equal or higher latency than suggestedLatency wherever possible."

In my use case, the callback can handle any size of buffers, but I have a preferred buffer size (I'd like it to be a multiple of 16, for reasons related to cache use). From reading the docs cited above, I understand that I can pass 'paFramesPerBufferUnspecified' + suggested latency setting in the stream parameters, and that the "suggested buffer size" will be deduced from a "rounded-up" suggested latency.

But this is not the case: the "suggested buffer size" is deduced from a "rounded-down" suggested latency: this is due to code like this where the float to int conversion floors the value, instead of ceiling it:

> UInt32 suggestedLatencyFrames = inputParameters->suggestedLatency * sampleRate; 

which should be replaced with this version that ceils the suggested latency:

> UInt32 suggestedLatencyFrames = (UInt32) (0.5f + ceilf(inputParameters->suggestedLatency * sampleRate));

(Edited to clarify that I use 'paFramesPerBufferUnspecified' : the bug may not exist when not using paFramesPerBufferUnspecified)

________________________________________________________________________________
Ticket #276 Comment 1
The implementation should treat the suggested latency as a minimum. So it should probably round up instead of truncating. It will probably also quantize to the native buffer size.

________________________________________________________________________________
Ticket #277 Description
PaMacCore (AUHAL)|| Error on line 2470: err='-10863', msg=Audio Unit: cannot do in current context
Assertion failed: (stream->streamRepresentation.magic == PA_STREAM_MAGIC), function AudioDevicePropertyGenericListenerProc, file src/hostapi/coreaudio/pa_mac_core.c, line 1076.

Caught signal 6
Aborting fldigi due to a fatal error.

Occurs immediately after selecting aggregate USB Audio CODEC for both input and output.

________________________________________________________________________________
Ticket #278 Description
I have a setup where i record from mutiple usb soundcards at once. After running for a few days, i stop getting frames from device, and trying to reopen the device causes portaudio to crash.

Here is the output:

PaAlsaStream_WaitForFrames: poll timed out
PaAlsaStream_HandleXrun: restarting Alsa to recover from XRUN
AlsaStop: Dropped frames
Expression 'alsa_snd_pcm_start( stream->capture.pcm )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 2929
PaAlsaStream_HandleXrun: restarting Alsa to recover from XRUN
AlsaStop: Dropped frames
Host error description: Broken pipe
Expression 'AlsaStart( stream, 0 )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 3241
Expression 'alsa_snd_pcm_start( stream->capture.pcm )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 2929
Host error description: Broken pipe
Expression 'AlsaStart( stream, 0 )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 3241
PaAlsaStream_HandleXrun: restarting Alsa to recover from XRUN
AlsaStop: Dropped frames
Expression 'alsa_snd_pcm_start( stream->capture.pcm )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 2929
Host error description: Broken pipe
Expression 'AlsaStart( stream, 0 )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 3241
Device AudioDevice 18 (USB Audio CODEC: - (hw:15,0)) did stall. Closing
PaUnixThread_Terminate: Canceling thread 310363904
PaUnixThread_Terminate: Joining thread 310363904
OnExit: Stopping ALSA handles
Expression 'alsa_snd_pcm_drop( stream->capture.pcm )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 3041
Host error description: No such device
OnExit: Stoppage
[Thread 0x7fff127fc700 (LWP 22206) exited]
Device AudioDevice 18 (USB Audio CODEC: - (hw:15,0)) Pa_CloseStream 18 ret Success
Will open Device AudioDevice 18 (USB Audio CODEC: - (hw:15,0)) Pa_OpenStream: 18
AlsaOpen: Opening device hw:15,0
ALSA lib pcm_hw.c:1713:(_snd_pcm_hw_open) Invalid value for card
OpenPcm: Opened device 'hw:15,0' ptr[(nil)] - result: [-2:No such file or directory]
Expression 'ret' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 1735
Expression 'AlsaOpen( hostApi, parameters, streamDir, &pcm )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 1767
PaAlsaStreamComponent_Initialize: Host Chans C 2
AlsaOpen: Opening device hw:15,0
ALSA lib pcm_hw.c:1713:(_snd_pcm_hw_open) Invalid value for card
OpenPcm: Opened device 'hw:15,0' ptr[(nil)] - result: [-2:No such file or directory]
Expression 'ret' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 1735
Expression 'AlsaOpen( &alsaApi->baseHostApiRep, params, streamDir, &self->pcm )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 1902
soundcrit_executable: src/hostapi/alsa/pa_linux_alsa.c:2173: PaAlsaStream_Initialize: Assertion `self->capture.nfds || self->playback.nfds' failed.

Thread 9 "AudioProcessThr" received signal SIGABRT, Aborted.
[Switching to Thread 0x7fffccd93700 (LWP 26203)]
__GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51
51	../sysdeps/unix/sysv/linux/raise.c: No such file or directory.
(gdb) bt
#0  __GI_raise (sig=sig@entry=6) at ../sysdeps/unix/sysv/linux/raise.c:51
#1  0x00007ffff227a801 in __GI_abort () at abort.c:79
#2  0x00007ffff226a39a in __assert_fail_base (
    fmt=0x7ffff23f17d8 "%s%s%s:%u: %s%sAssertion `%s' failed.\n%n", 
    assertion=assertion@entry=0x7ffff77b7250 "self->capture.nfds || self->playback.nfds", 
    file=file@entry=0x7ffff77b4158 "src/hostapi/alsa/pa_linux_alsa.c", line=line@entry=2173, 
    function=function@entry=0x7ffff77bc050 <__PRETTY_FUNCTION__.11568> "PaAlsaStream_Initialize")
    at assert.c:92
#3  0x00007ffff226a412 in __GI___assert_fail (
    assertion=0x7ffff77b7250 "self->capture.nfds || self->playback.nfds", 
    file=0x7ffff77b4158 "src/hostapi/alsa/pa_linux_alsa.c", line=2173, 
    function=0x7ffff77bc050 <__PRETTY_FUNCTION__.11568> "PaAlsaStream_Initialize") at assert.c:101
#4  0x00007ffff779fd52 in PaAlsaStream_Initialize (self=0x7fffbd33f140, alsaApi=0x555555b2f2d0, 
    inParams=0x7fffccd929b0, outParams=0x0, sampleRate=44100, framesPerUserBuffer=0, 
    callback=0x5555556c7300 <audio_device::recordCallback(void const*, void*, unsigned long, PaStreamCallbackTimeInfo const*, unsigned long, void*)>, streamFlags=1, userData=0x7fffbc003c30)
    at src/hostapi/alsa/pa_linux_alsa.c:2173
#5  0x00007ffff77a2473 in OpenStream (hostApi=0x555555b2f2d0, s=0x7fffbc003c68, 
    inputParameters=0x7fffccd929b0, outputParameters=0x0, sampleRate=44100, framesPerBuffer=0, 
    streamFlags=1, 
    callback=0x5555556c7300 <audio_device::recordCallback(void const*, void*, unsigned long, PaStreamCallbackTimeInfo const*, unsigned long, void*)>, userData=0x7fffbc003c30)
    at src/hostapi/alsa/pa_linux_alsa.c:2834
#6  0x00007ffff7794f1c in Pa_OpenStream (stream=0x7fffbc003c68, inputParameters=0x7fffbc003c48, 
    outputParameters=0x0, sampleRate=44100, framesPerBuffer=0, streamFlags=1, 
    streamCallback=0x5555556c7300 <audio_device::recordCallback(void const*, void*, unsigned long, PaStreamCallbackTimeInfo const*, unsigned long, void*)>, userData=0x7fffbc003c30)
    at src/common/pa_front.c:1256
#7  0x00005555556c2ce4 in audio_device::open_stream (this=0x7fffbc003c30)
    at /home/syb/SoundCrit/soundcrit/soundcrit.cpp:623
#8  0x00005555556c9484 in SoundCritThread::runMain (this=this@entry=0x7ffffffa7ad0, 
    quitOpenStreamFail=<optimized out>) at /home/syb/SoundCrit/soundcrit/soundcrit.cpp:798
#9  0x00005555555ef6e4 in AudioProcessThread::run (this=0x7ffffffa7ac0)
    at /home/syb/SoundCrit/soundcrit/main.cpp:51
#10 0x00007ffff525c16d in ?? () from /usr/lib/x86_64-linux-gnu/libQt5Core.so.5
---Type <return> to continue, or q <return> to quit---frame select 2
#11 0x00007ffff26326db in start_thread (arg=0x7fffccd93700) at pthread_create.c:463
#12 0x00007ffff235b88f in clone () at ../sysdeps/unix/sysv/linux/x86_64/clone.S:95
(gdb) p *self
$2 = {streamRepresentation = {magic = 405222981, nextOpenStream = 0x0, 
    streamInterface = 0x555555b2f318, 
    streamCallback = 0x5555556c7300 <audio_device::recordCallback(void const*, void*, unsigned long, PaStreamCallbackTimeInfo const*, unsigned long, void*)>, streamFinishedCallback = 0x0, 
    userData = 0x7fffbc003c30, streamInfo = {structVersion = 0, inputLatency = 0, outputLatency = 0, 
      sampleRate = 0}}, cpuLoadMeasurer = {samplingPeriod = 0, measurementStartTime = 0, 
    averageLoad = 0}, bufferProcessor = {framesPerUserBuffer = 0, framesPerHostBuffer = 0, 
    hostBufferSizeMode = paUtilFixedHostBufferSize, useNonAdaptingProcess = 0, 
    userOutputSampleFormatIsEqualToHost = 0, userInputSampleFormatIsEqualToHost = 0, 
    framesPerTempBuffer = 0, inputChannelCount = 0, bytesPerHostInputSample = 0, 
    bytesPerUserInputSample = 0, userInputIsInterleaved = 0, inputConverter = 0x0, inputZeroer = 0x0, 
    outputChannelCount = 0, bytesPerHostOutputSample = 0, bytesPerUserOutputSample = 0, 
    userOutputIsInterleaved = 0, outputConverter = 0x0, outputZeroer = 0x0, 
    initialFramesInTempInputBuffer = 0, initialFramesInTempOutputBuffer = 0, tempInputBuffer = 0x0, 
    tempInputBufferPtrs = 0x0, framesInTempInputBuffer = 0, tempOutputBuffer = 0x0, 
    tempOutputBufferPtrs = 0x0, framesInTempOutputBuffer = 0, timeInfo = 0x0, callbackStatusFlags = 0, 
    hostInputIsInterleaved = 0, hostInputFrameCount = {0, 0}, hostInputChannels = {0x0, 0x0}, 
    hostOutputIsInterleaved = 0, hostOutputFrameCount = {0, 0}, hostOutputChannels = {0x0, 0x0}, 
    ditherGenerator = {previous = 0, randSeed1 = 0, randSeed2 = 0}, samplePeriod = 0, 
    streamCallback = 0x0, userData = 0x0}, thread = {thread = 0, parentWaiting = 0, stopRequested = 0, 
    locked = 0, mtx = {mtx = pthread_mutex_t = {Type = Normal, Status = Not acquired, Robust = No, 
        Shared = No, Protocol = None}}, cond = pthread_cond_t = {
      Threads known to still execute a wait function = 0, Clock ID = CLOCK_REALTIME, Shared = No}, 
    stopRequest = 0}, framesPerUserBuffer = 0, maxFramesPerHostBuffer = 0, primeBuffers = 0, 
  callbackMode = 1, pcmsSynced = 0, rtSched = 0, pfds = 0x0, pollTimeout = 0, callback_finished = 0, 
  callbackAbort = 0, isActive = 0, stateMtx = {mtx = pthread_mutex_t = {Type = Normal, 
      Status = Not acquired, Robust = No, Shared = No, Protocol = None}}, neverDropInput = 0, 
  underrun = 0, overrun = 0, capture = {hostSampleFormat = 0, numUserChannels = 0, 
    numHostChannels = 2, userInterleaved = 0, hostInterleaved = 0, canMmap = 0, nonMmapBuffer = 0x0, 
    nonMmapBufferSize = 0, device = 18, deviceIsPlug = 0, useReventFix = 0, pcm = 0x0, 
    framesPerPeriod = 0, alsaBufferSize = 0, nativeFormat = SND_PCM_FORMAT_S8, nfds = 0, ready = 0, 
    userBuffers = 0x0, offset = 0, streamDir = StreamDirection_In, channelAreas = 0x0}, playback = {
    hostSampleFormat = 0, numUserChannels = 0, numHostChannels = 0, userInterleaved = 0, 
    hostInterleaved = 0, canMmap = 0, nonMmapBuffer = 0x0, nonMmapBufferSize = 0, device = 0, 
    deviceIsPlug = 0, useReventFix = 0, pcm = 0x0, framesPerPeriod = 0, alsaBufferSize = 0, 
---Type <return> to continue, or q <return> to quit---  
    nativeFormat = SND_PCM_FORMAT_S8, nfds = 0, ready = 0, userBuffers = 0x0, offset = 0, 
    streamDir = StreamDirection_In, channelAreas = 0x0}}
(gdb) p self->capture
$3 = {hostSampleFormat = 0, numUserChannels = 0, numHostChannels = 2, userInterleaved = 0, hostInterleaved = 0, canMmap = 0, nonMmapBuffer = 0x0, nonMmapBufferSize = 0, device = 18, deviceIsPlug = 0, 
  useReventFix = 0, pcm = 0x0, framesPerPeriod = 0, alsaBufferSize = 0, nativeFormat = SND_PCM_FORMAT_S8, nfds = 0, ready = 0, userBuffers = 0x0, offset = 0, streamDir = StreamDirection_In, 
  channelAreas = 0x0}
(gdb) p self->playback
$4 = {hostSampleFormat = 0, numUserChannels = 0, numHostChannels = 0, userInterleaved = 0, hostInterleaved = 0, canMmap = 0, nonMmapBuffer = 0x0, nonMmapBufferSize = 0, device = 0, deviceIsPlug = 0, 
  useReventFix = 0, pcm = 0x0, framesPerPeriod = 0, alsaBufferSize = 0, nativeFormat = SND_PCM_FORMAT_S8, nfds = 0, ready = 0, userBuffers = 0x0, offset = 0, streamDir = StreamDirection_In, 
  channelAreas = 0x0}
(gdb) 


________________________________________________________________________________
Ticket #279 Description
gcc 8.1.1 and clang 6.0.1

[[file:c2XqAmKdar6kRdacwqEsg8|portaudio-compilerwarnings-clang]]
[[file:c2XEEGKdar6i_dacwqjQYw|portaudio-compilerwarnings]]

________________________________________________________________________________
Ticket #280 Description
While pa_devs is listing the devices, it *hangs* for several seconds while listing the supported sample rates.
The fan starts up on the Macbook indicating that the CPU is very busy.

REPRODUCE
    Install Parallels Desktop 13 for Mac on a 2013 Macbook running High Sierra
    Install Ubunto 16.04 on Parallels
    sudo apt-get install libasound-dev
    git clone  https://git.assembla.com/portaudio.git
    cd portaudio
    ./configure && make
    bin/pa_devs

EXPECT
Device information should appear quickly.

ACTUAL
Output stalls for 50-10 seconds when printing lines of supported sample rates
for some devices. For example:

--------------------------------------- device #2
Name                        = sysdefault
Host API                    = ALSA
Max inputs = 128, Max outputs = 128
Default low input latency   =   0.0213
Default low output latency  =   0.0213
Default high input latency  =   0.0213
Default high output latency =   0.0213
Default sample rate         = 48000.00
Supported standard sample rates
 for half-duplex 16 bit 128 channel input =     <=== STALLS AFTER PRINTING THIS!
	 8000.00,  9600.00, 11025.00, 16000.00, <=== AND AGAIN HERE!

and other places.

Note that pa_devs calls Pa_IsFormatSupported() for each of the sample rates in the list.

Also bin/paex_sine waits about 4 seconds before making a sound!

________________________________________________________________________________
Ticket #280 Comment 1
I tried this Merge Request but it did not help.

[[url:https://app.assembla.com/spaces/portaudio/git/merge_requests/4022683|https://app.assembla.com/spaces/portaudio/git/merge_requests/4022683]]

________________________________________________________________________________
Ticket #281 Description
Need an android playback port audio library

________________________________________________________________________________
Ticket #282 Description
I am a noob in audio processing using python. I have found a python code from internet to perform live audio recording. Whenever, I record using that code, there is a block of zeros in the beginning of the recorded audio file. The recording doesn't start immediately and it adds zeros until the recording starts.

I want the recording to happen immediately i run code without any zeros in the beginning. I guess the zeros are occuring due to the PortAudio library. Any help is appreciated.

I am using windows 10 / 64 bits and WASAPI host API. The code is as follows.


########################################
import argparse
import tempfile
import queue
import sys 


def int_or_str(text):
    """Helper function for argument parsing."""
    try:
        return int(text)
    except ValueError:
        return text

parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument(
    '-l', '--list-devices', action='store_true',
    help='show list of audio devices and exit')
parser.add_argument(
    '-d', '--device', type=int_or_str,
    help='input device (numeric ID or substring)')
parser.add_argument(
    '-r', '--samplerate', type=int, help='sampling rate')
parser.add_argument(
    '-c', '--channels', type=int, default=2, help='number of input channels')
parser.add_argument(
    'filename', nargs='?', metavar='FILENAME',
    help='audio file to store recording to')
parser.add_argument(
    '-t', '--subtype', type=str, help='sound file subtype (e.g. "PCM_24")')
args = parser.parse_args()

try:
    import sounddevice as sd
    import soundfile as sf
    import numpy
    assert numpy

    if args.list_devices:
        print(sd.query_devices())
        parser.exit(0)
    if args.samplerate is None:
        device_info = sd.query_devices(args.device, 'input')
        args.samplerate = int(device_info['default_samplerate'])
    if args.filename is None:
        args.filename = tempfile.mktemp(prefix='delme_rec_unlimited_',
                                        suffix='.wav', dir='')
    q = queue.Queue()

    def callback(indata, frames, time, status):
        """This is called (from a separate thread) for each audio block."""
        if status:
            print(status, file=sys.stderr)
        q.put(indata.copy())

    with sf.SoundFile(args.filename, mode='x', samplerate=args.samplerate,
                      channels=args.channels, subtype=args.subtype) as file:
        with sd.InputStream(samplerate=args.samplerate, device=args.device,
                            channels=args.channels, callback=callback):
            print('#' * 80)
            print('press Ctrl+C to stop the recording')
            print('#' * 80)
            while True:
                file.write(q.get())

except KeyboardInterrupt:
    print('\nRecording finished: ' + repr(args.filename))
    parser.exit(0)
except Exception as e:
    parser.exit(type(e).__name__ + ': ' + str(e))

________________________________________________________________________________
Ticket #283 Description
Distribution: Arch Linux
Audacity 2.3.0 stopped listing 'pulse' in the list of playback devices after an update to alsa-lib 1.1.7-1. Also, a new error started appearing in Audacity's error output:
Expression 'alsa_snd_pcm_hw_params_set_period_size_near( pcm, hwParams, &alsaPeriodFrames, &dir )' failed in 'src/hostapi/alsa/pa_linux_alsa.c', line: 924.

I ran Audacity under Valgrind and found out that the Portaudio ALSA backend is calling a function with an uninitialized variable.
<pre><code>==2226== Conditional jump or move depends on uninitialised value(s)
==2226==    at 0x806F461: _snd_pcm_hw_param_set_min (pcm_params.c:400)
==2226==    by 0x8070E2E: snd1_pcm_hw_param_set_min (pcm_params.c:449)
==2226==    by 0x8071109: snd1_pcm_hw_param_set_near (pcm_params.c:839)
==2226==    by 0x806A182: snd_pcm_hw_params_set_period_size_near@@ALSA_0.9.0rc4 (pcm.c:5191)
==2226==    by 0xA90224: ??? (in /usr/bin/audacity)
==2226==    by 0xA90980: ??? (in /usr/bin/audacity)
==2226==    by 0xA9313B: ??? (in /usr/bin/audacity)
==2226==    by 0xA9638D: PaAlsa_Initialize (in /usr/bin/audacity)
==2226==    by 0xA8BDE6: Pa_Initialize (in /usr/bin/audacity)
==2226==    by 0x601698: AudioIO::AudioIO() (in /usr/bin/audacity)
==2226==    by 0x601C99: InitAudioIO() (in /usr/bin/audacity)
==2226==    by 0x5F7B7B: AudacityApp::OnInit() (in /usr/bin/audacity)
</code></pre>

I determined through manual inspection of src/hostapi/alsa/pa_linux_alsa.c, function GropeDevice, that `dir` is never initialized in that function.

(Although I believe the bug is in Portaudio, the commit 9bb985c382bab8c3bf83c0d23f50195288d3cf9f ("pcm: snd_interval_refine_first/last: exclude value only if also excluded before") in alsa-lib is the one that started causing this behavior.)

________________________________________________________________________________
Ticket #284 Description
Hi,

I'm a Arch user, and after latest alsa-lib upgrade to 1.1.7 all applications that use portaudio library don't work with pulseaudio, pulse is not visible on audio devices list.

Regards

________________________________________________________________________________
Ticket #285 Description
Modified port audio to be able to compile and export all functions to a dll/lib file without having to use a def file.
The process will enable easy library usage and makes the code more robust.
Create a header file with the contents below:
<pre><code>
#pragma once
/*
Additional defines added by alatnet
*/
//check which platform we are compiling to.
#if defined(__WIN32__) || defined(_WIN32) || defined(_WIN64)
    #define PA_WIN_PLATFORM
#elif defined(__APPLE__) || defined(__APPLE_CC__)
    #define PA_APPLE_PLATFORM
#elif defined(__GNUC__) && (!(defined(__WIN32__) || defined(_WIN32)) && !(defined(__APPLE__) || defined(__APPLE_CC__)))
    #define PA_NIX_PLATFORM
#else
    #error No Recognized Platform!
#endif

//see if we are using propriotary compilers.
#ifdef _MSC_VER
    #define PA_VISUAL_C
#elif defined(__BORLANDC__)
    #define PA_BORLANDC
#elif defined(__GNUC__) && (defined(__WIN32__) || defined(_WIN32))
    #define PA_MINGW
    #define PA_GNUC
#elif defined(__GNUC__)
    #define PA_GNUC
#endif

//check if we are compiling to 32 or 64 bit.
#if defined(__x86_64__) || defined(_M_X64) || defined(_WIN64)
    #define PA_ARCH_64
#else
    #define PA_ARCH_32
#endif

//see if we are compiling with unicode support.
#if defined(_UNICODE) || defined(UNICODE)
	#define PA_UNICODE
#endif

#if defined(PA_BUILD_DLL) || defined (PA_BUILD_SO) //set exports for building a dynamic library
    #ifdef PA_WIN_PLATFORM
        #if defined(PA_MINGW) || defined(PA_VISUAL_C)
            #define PA_DLL_DECLARE __declspec(dllexport)
            #define PA_DLL_EXTERN extern
            #define PA_DLL_C_EXTERN extern "C"
        #else
            #define PA_DLL_DECLARE __attribute__ ((dllexport))
            #define PA_DLL_EXTERN extern
            #define PA_DLL_C_EXTERN extern "C"
        #endif
    #else
        #ifdef PA_USE_DECLSPEC
            #define PA_DLL_DECLARE __declspec(dllexport)
            #define PA_DLL_EXTERN extern
            #define PA_DLL_C_EXTERN extern "C"
        #else
            #if defined __GNUC__ && __GNUC__ >= 4
                #define PA_DLL_DECLARE __attribute__ ((visibility ("default")))
            #else
                #define PA_DLL_DECLARE __attribute__ ((dllexport))
            #endif
            #define PA_DLL_EXTERN extern
            #define PA_DLL_C_EXTERN extern "C"
        #endif
    #endif
#elif defined (PA_IMPORT_DLL) || defined (PA_IMPORT_SO) //set exports for importing a dynamic library
    #ifdef PA_WIN_PLATFORM
        #if defined(PA_MINGW) || defined(PA_VISUAL_C)
            #define PA_DLL_DECLARE __declspec(dllimport)
            #define PA_DLL_EXTERN
            #define PA_DLL_C_EXTERN
        #else
            #define PA_DLL_DECLARE __attribute__ ((dllimport))
            #define PA_DLL_EXTERN
            #define PA_DLL_C_EXTERN
        #endif
    #else
        #ifdef PA_USE_DECLSPEC
            #define PA_DLL_DECLARE __declspec(dllimport)
            #define PA_DLL_EXTERN
            #define PA_DLL_C_EXTERN
        #else
            #if defined __GNUC__ && __GNUC__ >= 4
                #define PA_DLL_DECLARE __attribute__ ((visibility ("default")))
            #else
                #define PA_DLL_DECLARE __attribute__ ((dllimport))
            #endif
            #define PA_DLL_EXTERN
            #define PA_DLL_C_EXTERN
        #endif
    #endif
#else	//don't set exports, compile to a .lib file
    #define PA_DLL_DECLARE
    #define PA_DLL_EXTERN
    #define PA_DLL_C_EXTERN
#endif
</code></pre>
Afterwards, include the file into portaudio.h and any other file where the functions to be exported listed in the def file are.
From there, append "PA_DLL_DECLARE" to the beginning of each functions listed in the def file and add a "PA_BUILD_DLL" or "PA_BUILD_SO" defines when compiling.
This will create a lib file with the functions exported easily.
To import the functions, all you would need to do is add the library and have "PA_IMPORT_DLL" or "PA_IMPORT_SO" defined when compiling.

________________________________________________________________________________
Ticket #286 Description
This was originally a [[url:https://github.com/dechamps/FlexASIO/issues/3|FlexASIO bug]], which I am now reporting upstream.

For some audio devices, the WASAPI PortAudio code reports a channel count (both in <code>PaDeviceInfo </code> and from <code>PaWasapi_GetDeviceDefaultFormat()</code>) that is completely wrong.

Specifically, I have a user for whom PortAudio returns the following:

<pre>
Device index: 20
Device name: Microphone (Realtek High Definition Audio)
Default sample rate: 48000
Input: max channel count 8, default latency 0.003s (low) 0.01s (high)
Output: max channel count 0, default latency 0s (low) 0s (high)
Host API name: Windows WASAPI
Host API type: 13 [WASAPI]
DEFAULT INPUT DEVICE for this host API
WASAPI device default format: WAVEFORMAT with format tag 65534 [EXTENSIBLE],
  8 channels, 48000 samples/second, 768000 average bytes/second, block alignment 16 bytes,
  16 bits per sample, 16 valid bits per sample,
  channel mask 1599 [Front Left, Front Right, Front Center, Low Frequency, Back Left, Back Right, Side Left, Side Right],
  format {00000001-0000-0010-8000-00AA00389B71} [PCM]
</pre>

This is for the built-in microphone input of a [[url:https://www.msi.com/Laptop/support/GS63VR-7RG-Stealth-Pro|MSI GS63VR 7RG Stealth Pro]] running Windows 10.0.17134.

It goes without saying that the microphone input of a laptop is definitely _not_ an 8-channel 7.1 audio input device. Trying to open it with 8 channels (in shared and exclusive mode), unsurprisingly, fails.

All other host APIs (MME, DirectSound, and WDM-KS) correctly report 2 channels for this device.

Relevant portion of the PortAudio debug log:

<pre>
WASAPI:4| name[Microphone (Realtek High Definition Audio)]
WASAPI:4| form-factor[4]
WASAPI:4| def.SR[48000] max.CH[8] latency{hi[0.010000] lo[0.003000]}
WASAPI: device idx: 05
</pre>

Both <code>pa_stable_v190600_20161030</code> and latest PortAudio master (<code>0cdb346</code>) exhibit this problem.

Sadly, I am unable to reproduce this using any of my own hardware. I only know of a single end user who is experiencing this bug.

________________________________________________________________________________
Ticket #286 Comment 1
The code is getting the default device format using this code:

<pre>
IMMDevice_OpenPropertyStore(paWasapi->devInfo[i].device, STGM_READ, &pProperty);
IPropertyStore_GetValue(pProperty, &PKEY_AudioEngine_DeviceFormat, &value);
</pre>

This is then fed into <code>PaDeviceInfo</code>.

MSDN seems to be somewhat conflicted about the use of <code>PKEY_AudioEngine_DeviceFormat</code>. [[url:https://docs.microsoft.com/en-us/windows/desktop/coreaudio/pkey-audioengine-deviceformat|On one hand]], it states:

"This format might not be the best default format for an exclusive-mode application to use."

But [[url:https://docs.microsoft.com/en-gb/windows/desktop/CoreAudio/device-formats|on the other hand]]:

"An application can query an audio endpoint device's PKEY_AudioEngine_DeviceFormat property to obtain the shared-mode format that the user has selected for the device. For information about querying the properties of a device, see Device Properties. Some applications might find the format specified by a device's PKEY_AudioEngine_DeviceFormat property to be a suitable format for opening an exclusive-mode stream on the device."

Here this is clearly not true, since the user surely never selected 8 channels for a built-in microphone input. This looks like a Windows bug.

In any case, it seems like it would make more sense to use the [[url:https://docs.microsoft.com/en-us/windows/desktop/api/Audioclient/nf-audioclient-iaudioclient-getmixformat|IAudioClient::GetMixFormat()]] method anyway:

"When creating a shared-mode stream for an audio endpoint device, the Initialize method always accepts the stream format obtained from a GetMixFormat call on the same device."

I believe this makes most sense for the channel count returned by PortAudio, because shared mode is the default in PortAudio. If we want PortAudio users to be able to simply enumerate devices and be able to open them without having to care about host API specifics (which seems like what PortAudio is designed to do), then we should optimize for shared mode.

That said, regarding exclusive mode, the same page goes on to say:

"This format is not necessarily a format that the audio endpoint device supports. Thus, the caller might not succeed in creating an exclusive-mode stream with a format obtained by calling GetMixFormat."

Therefore, it seems like the best way to fix this is to do the following:

- Use <code>GetMixFormat()</code> to populate <code>PaDeviceInfo</code>, such that PortAudio users can always expect the default channel count to work in the default mode.
- Use <code>GetMixFormat()</code> in <code>PaWasapi_GetDeviceDefaultFormat()</code>, for consistency with <code>PaDeviceInfo</code>. Existing code might rely on such consistency.

It's actually highly likely that this format will work for exclusive mode too, because it looks like the difference would be only on the sample type, and PortAudio can already automatically handle such differences through implicit sample type conversion (which already works). Therefore I am not convinced that we actually need to use PKEY_AudioEngine_DeviceFormat at all. Worst case scenario we could expose a separate WASAPI-specific function for it.

________________________________________________________________________________
Ticket #286 Comment 2
Here's what I'm getting from <code>IAudioClient::GetMixFormat()</code> for one of my devices:

<pre>
WAVEFORMAT with format tag 65534 [EXTENSIBLE],
6 channels, 48000 samples/second, 1152000 average bytes/second,
block alignment 24 bytes, 32 bits per sample, 32 valid bits per sample,
channel mask 63 [Front Left, Front Right, Front Center, Low Frequency, Back Left, Back Right],
subformat {00000003-0000-0010-8000-00AA00389B71} [IEEE Float]
</pre>

This is what I'd expect. Now I'll get my user with the offending hardware to try this and see what happens.

________________________________________________________________________________
Ticket #286 Comment 3
Use GetMixFormat() instead of PKEY_AudioEngine_DeviceFormat.

See #286 for rationale.

Committed to: portaudio:wasapiformat
Commit: [[r:d0f3413f8ebaf8a716feb5944665823dbda884bc|portaudio:d0f3413f8e]]

________________________________________________________________________________
Ticket #286 Comment 4
Use GetMixFormat() instead of PKEY_AudioEngine_DeviceFormat.

See #286 for rationale.

Committed to: portaudio:wasapiformat
Commit: [[r:1f5429ee433c5a379ed96256f21f288e163a9a38|portaudio:1f5429ee43]]

________________________________________________________________________________
Ticket #286 Comment 5
Use GetMixFormat() instead of PKEY_AudioEngine_DeviceFormat.

See #286 for rationale.

Committed to: portaudio:wasapiformat2
Commit: [[r:29ad0712036a4a4dd5499fe30c022f7bff9057ae|portaudio:29ad071203]]

________________________________________________________________________________
Ticket #286 Comment 6
Fixed in d74ea7b610a6ae54582eb59c5d1b4c56a8e5e31b in master.

________________________________________________________________________________
Ticket #287 Description
Using PortAudio latest master (<code>0cdb346</code>):

Opening a device in WASAPI Exclusive mode with <code>framesPerBuffer</code> = 480 and <code>suggestedLatency</code> = 0.0:

<pre>
Opening PortAudio stream with...
...input parameters: none
...output parameters: PortAudio stream parameters for device index 23,
  6 channels, sample format 2147483649 [Float32, NonInterleaved], suggested latency 0s, host API specific: 56 bytes structure,
     type 13 [WASAPI], version 1, WASAPI specific: flags 5 [Exclusive, UseChannelMask],
     channel mask 63 [Front Left, Front Right, Front Center, Low Frequency, Back Left, Back Right],
     host processor output 0000000000000000, host processor input 0000000000000000,
     thread priority 0 [None], stream category 0 [Other], stream option 0 [None]
...sample rate: 48000 Hz
...frames per buffer: 480
...stream flags: 0
...stream callback: 00007FFB98B9EE56 (user data 000002C40B81CF80)
[PortAudio] WASAPI: IAudioClient2 set properties: IsOffload = 0, Category = 0, Options = 0
[PortAudio] wFormatTag     =WAVE_FORMAT_EXTENSIBLE
[PortAudio] SubFormat      =KSDATAFORMAT_SUBTYPE_PCM
[PortAudio] Samples.wValidBitsPerSample =24
[PortAudio] dwChannelMask  =0x3F
[PortAudio] nChannels      =6
[PortAudio] nSamplesPerSec =48000
[PortAudio] nAvgBytesPerSec=1152000
[PortAudio] nBlockAlign    =24
[PortAudio] wBitsPerSample =32
[PortAudio] cbSize         =22
[PortAudio] WASAPI::OpenStream(output): framesPerUser[ 480 ] framesPerHost[ 480 ] latency[ 10.00ms ] exclusive[ YES ] wow64_fix[ NO ] mode[ EVENT ]
PortAudio stream opened: 000002C40B85E4A0
Stream info: PortAudio stream info version 0, input latency 0s, output latency 0.01s, sample rate 48000 Hz
</pre>

The same, but with <code>suggestedLatency</code> = 0.001:

<pre>
Opening PortAudio stream with...
...input parameters: none
...output parameters: PortAudio stream parameters for device index 23,
  6 channels, sample format 2147483649 [Float32, NonInterleaved], suggested latency 0.001s, host API specific: 56 bytes structure,
     type 13 [WASAPI], version 1, WASAPI specific: flags 5 [Exclusive, UseChannelMask],
     channel mask 63 [Front Left, Front Right, Front Center, Low Frequency, Back Left, Back Right],
     host processor output 0000000000000000, host processor input 0000000000000000,
     thread priority 0 [None], stream category 0 [Other], stream option 0 [None]
...sample rate: 48000 Hz
...frames per buffer: 0
...stream flags: 0
...stream callback: 00007FFB98C21840 (user data 0000000000000000)
[PortAudio] WASAPI: CreateAudioClient: forcing POLL mode
[PortAudio] WASAPI: IAudioClient2 set properties: IsOffload = 0, Category = 0, Options = 0
[PortAudio] wFormatTag     =WAVE_FORMAT_EXTENSIBLE
[PortAudio] SubFormat      =KSDATAFORMAT_SUBTYPE_PCM
[PortAudio] Samples.wValidBitsPerSample =24
[PortAudio] dwChannelMask  =0x3F
[PortAudio] nChannels      =6
[PortAudio] nSamplesPerSec =48000
[PortAudio] nAvgBytesPerSec=1152000
[PortAudio] nBlockAlign    =24
[PortAudio] wBitsPerSample =32
[PortAudio] cbSize         =22
[PortAudio] WASAPI::OpenStream(output): framesPerUser[ 480 ] framesPerHost[ 1024 ] latency[ 21.33ms ] exclusive[ YES ] wow64_fix[ NO ] mode[ POLL ]
PortAudio stream opened: 000002C51D00DB10
Stream info: PortAudio stream info version 0, input latency 0s, output latency 0.0213333s, sample rate 48000 Hz
</pre>

This behaviour is surprising - changing the suggested latency from zero to just 1 ms had the effect of putting the WASAPI code into a completely different mode (PULL instead of EVENT) and made the resulting stream latency jump from 10 ms to 20 ms.

________________________________________________________________________________
Ticket #287 Comment 1
It seems that we will enter POLL mode (instead of EVENT mode) because the following condition is true:

<pre>
((INT32)(params->suggestedLatency*100000.0) != 0/*0.01 msec granularity*/)
</pre>

This will only be true if <code>suggestedLatency</code> is less than 10 s. Which is basically zero.

The commit that introduces this code is <code>9c7974c7</code>, which states:

"advanced Event driven mode and extended the range of host buffer size which can operate in this mode up up to 20.66 ms, e.g. your device buffer size will vary in range 3 - 20.66 ms, if goes above then Poll driven mode is switched on automatically"

This seems to contradict the code.

________________________________________________________________________________
Ticket #287 Comment 2
@dmitrykos who might know something about this, since he wrote the aforementioned commit.

________________________________________________________________________________
Ticket #287 Comment 3
@edechamps, that was most probably a protection against some reported Vista's bug, may be in WOW64 mode when if Event mode was active the callback was never called by the OS.

My proposal is - try to omit this check completely
<pre><code>
((INT32)(params->suggestedLatency*100000.0) != 0/*0.01 msec granularity*/)
</code></pre>
and see if users report any problems. 

I made tests on built-in audio (ALC) with UAC2 and several UAC1 USB DACs - all seems ok, no problem with callback. May be it does not make sense to keep this check any more and makes sense to let users fine tune latency with fine granulation. In my tests I was testing 3,6,9,11 ... 21 latencies with no problem at all.

I will create a merge request with this issue.

_> This seems to contradict the code._

Yes, those changes were made on the fly. Let's normalize this area.

________________________________________________________________________________
Ticket #287 Comment 4
@dmitrykos  Agreed :) I think we should try to use EVENT as much as possible as that seems to be the most efficient way of doing things.

(One thing that I've also noticed is that EVENT is never used in full-duplex mode. Not sure if that's a fundamental limitation of how the code works of if that's something that's easily fixable.)

________________________________________________________________________________
Ticket #287 Comment 5
Created merge request (http://app.assembla.com/spaces/portaudio/git/merge_requests/7097201), if all is ok, will merge it into a master.

________________________________________________________________________________
Ticket #287 Comment 10
_> Not sure if that's a fundamental limitation of how the code works of if that's something that's easily fixable_

@edechamps, there were numerous problems with Event mode when callbacks were not called, and etc. Basically it did not work on Vista. So the most feasible way was to force always Poll mode. You could try to relax that check and test in your application, if you have full-duplex behavior, and see if it works. If it is then may be enabling Event on Windows 10+ would make sense after thorough testing.

________________________________________________________________________________
Ticket #288 Description
Right now, the MSVC build specifies a specific Output Directory, but *also* specifies the place where the linker (and a bunch of other intermediate file steps) will place their output files in various places in the MSVC configuration.

This is confusing, because I updated the output directory, and the actual outputs didn't change.

Basically, any case in the solution where the output directory is referred to should use the `$(OutDir)` macro, rather then hard-coding `$(Platform)\$(Configuration)`. 

Actually, the linker output should really be `$(OutDir)$(TargetName)$(TargetExt)` (The default value, so you can just remove the override entirely and set it to "Inherit from default"), because the target file name is generated from `$(TargetName)` and `$(TargetExt)` which are also specified on the general configuration tab.

------

Also, why doesn't this issue tracker support markdown. Have you considered github?

There doesn't seem to be any way to create a free account for just reporting bugs.

Additionally, is there a reason there's no static-library option?

________________________________________________________________________________
Ticket #289 Description
Basically the title. There's a fair bit of just *weird* code in there. 

For example, C++ objects are consistently accessed as `(*i).function()`. I have no idea what the person who wrote this was thinking, the `->` operator exists for this specific case, and is much, much better known.

I initially assumed this was a C-ism, but it looks like even C supports the arrow operator for dereferencing member access (presumably for structs). As it is, it's just bizarre.

It'd also be nice to have the C++ C wrapper example (`paex_sine_c++.cpp`) have some reference to the fact that there *is* a shipped C++ wrapper. I only discovered it by googling.

________________________________________________________________________________
Ticket #290 Description
Basically, google appears to not index assembla git repositories.

This makes things annoying, as if I search for `MemFunCallbackStream` (for example), the first 3 results are *old* github mirrors of portaudio (from 2014!), and stack-overflow questions.

Basically, it seems like app.assembla.com/robots.txt blanket disallows indexing of app.assembla.com/spaces/*, which is well.... really dumb, particularly for open-source projects.

How did assembla even get chosen?

________________________________________________________________________________
Ticket #290 Comment 1
We have talked about moving to GitHub. But we would need to transfer all the Tickets and Wiki. That is non-trivial. I prefer GitHub but some do not. Someday I hope we will move.

> How did assembla even get chosen?

PortAudio was originally on a private CVS server. Then we moved to a private SVN server. Then we moved to Assembla SVN. This was all before GitHub existed. Then we moved to an Assembla Git repo. It is all forward progress.

________________________________________________________________________________
Ticket #291 Description
I am including portaudio through a submodule, and my project is c++ only. Because my project is only c++ I have the line 
<pre><code>project(my-project CXX)</code></pre>
in my CMakeLists.txt. Because of this, when I include portaudio it complains about undecidable linker languages. 

This could be fixed either by calling project even when added from a submodule or by adding the following when added from a submodule.
<pre><code>
enable_language(C)
</code></pre>

________________________________________________________________________________
Ticket #292 Description
I just wanted to let you know that the package portaudio19-dev in the Ubuntu 18.04 repository broke wine on my system. Not sure why a dev package should uninstall binaries, but this uninstalled wine and left the system in a state where it was no longer possible to re-install wine again. Apt just complained about broken packages being held, but a query with 'apt held' showed that nothing was held.

Removing the portaudio19-dev package allowed wine to be re-installed again and everything brought back to normality. I'm flagging this up in case it happens to anyone else. I am compiling on Linux Mint 19 with Cinnamon.

> Start-Date: 2019-02-19  23:38:29
> Commandline: /usr/bin/apt install portaudio19-dev
> Requested-By: johnc (1000)
> Install: libportaudiocpp0:amd64 (19.6.0-1, automatic), portaudio19-dev:amd64 (19.6.0-1), uuid-dev:amd64 (2.31.1-0.4ubuntu3.3, automatic), libjack-dev:amd64 (1:0.125.0-3, automatic), libjack0:amd64 (1:0.125.0-3, automatic)
> Remove: simplescreenrecorder:amd64 (0.3.8-3), libfluidsynth1:i386 (1.1.9-1), libjack-jackd2-0:amd64 (1.9.12dfsg-2), libjack-jackd2-0:i386 (1.9.12dfsg-2), wine-stable:amd64 (3.0.0xenial), gstreamer0.10-plugins-good:amd64 (0.10.31-3+nmu4ubuntu2.16.04.3), gstreamer0.10-plugins-good:i386 (0.10.31-3+nmu4ubuntu2.16.04.3), winehq-stable:amd64 (3.0.0xenial), libasound2-plugins:i386 (1.1.1-1ubuntu1), wine-stable-i386:i386 (3.0.0~xenial), libsdl-mixer1.2:i386 (1.2.12-14)
> End-Date: 2019-02-19  23:38:33

________________________________________________________________________________
Ticket #293 Description
I access PortAudio by calling the python sounddevice library. With my current setup, I can do a number of different commands which try to record (such as googlesamples-assistant-pushtotalk) and I end up with the same error:

sounddevice.PortAudioError: Error opening RawStream: Device unavailable [PaErrorCode -9985]

Now, the error occurs with the following line in the python:

_lib.Pa_OpenStream(self._ptr, iparameters, oparameters, samplerate, blocksize, stream_flags, callback_ptr, userdata), 'Error opening {0}'.format(self.__class__.__name__)

So we see here, it is the call the OpenStream which does not succeed.

My default input device (the one plugged in and I use for general tasks) is:

1 Microphone (Plantronics C320), MME (2 in, 0 out)

Whereas the only device that will work (say if I unplug the headphone) is

17 Jack Mic (Realtek HD Audio Front Mic input), Windows WDM-KS (2 in, 0 out)

So the issue I present is that PortAudio is not recognizing my Plantronics headphone even though Windows 10 knows that it is my default input device and I really would like to use that one for recording.

________________________________________________________________________________
Ticket #294 Description
*Assertion interferes with debugging using "rr".*

In file:  src/hostapi/alsa/pa_linux_alsa.c
In function: BuildDeviceList
<pre><code>    /* Loop over list of cards, filling in info. If a device is deemed unavailable (can't get name),
     * it's ignored.
     *
     * Note that we do this in two stages. This is a workaround owing to the fact that the 'dmix'
     * plugin may cause the underlying hardware device to be busy for a short while even after it
     * (dmix) is closed. The 'default' plugin may also point to the dmix plugin, so the same goes
     * for this.
     */
    PA_DEBUG(( "%s: Filling device info for %d devices\n", __FUNCTION__, numDeviceNames ));
    for( i = 0, devIdx = 0; i < numDeviceNames; ++i )
    {
        PaAlsaDeviceInfo* devInfo = &deviceInfoArray[i];
        HwDevInfo* hwInfo = &hwDevInfos[i];
        if( !strcmp( hwInfo->name, "dmix" ) || !strcmp( hwInfo->name, "default" ) )
        {
            continue;
        }

        PA_ENSURE( FillInDevInfo( alsaApi, hwInfo, blocking, devInfo, &devIdx ) );
    }
    assert( devIdx < numDeviceNames );
</code></pre>

Line 1453 contained above:
    assert( devIdx < numDeviceNames );

Which is not true if there are no devices to list.

I came across this trying to debugging a program using Mozilla's rr [[url:https://rr-project.org/|https://rr-project.org/]]. It records the execution of a program for deterministic debugging reruns, reverse debugging etc. It can not handle shared memory and I understand that it disables pulse-audio. I'm assuming it also disables alsa automatically. This results in the above assertion being triggered.

I compiled and ran with the assertion removed and I was able to record the program execution with rr.

________________________________________________________________________________
Ticket #295 Description
This was submitted by Yevgueny sprdwn@googlemail.com  to the mail list on August 7, 2020.

1. On "a bug in PA/ALSA or in pa_process":
pa_process does not expect to get mismatching information about audio frames.
SetNoInput/SetNoOutput only set data pointer to 0, but don't set associated frames count to 0.
ALSA-related code, under certain conditions, ignores this fact, and passes data structure back to pa_process,
with null source data pointer, but non-null number of frames. This all is visible in stack dumps.

2. On test program: I had no difficulty to write the test, this was just a matter of dev. time allocation.
The program is copypasted below.

When run without arguments, it selects "default" ALSA device (supporting duplex 128+128),
uses "bad" built-in value for buffer size (48) and crashes. Behavior is exactly like in dumps I sent.
Summarizing,
echo, or echo 48     - crashes.
echo 64     - works normally.

I.e. "echo 64" uses "happy" buffer size (64), and echoes input to output normally,
only the sound stabilizes not immediately, but after delay 5..10 s.

If run on "direct" sound card ("HDA Intel PCH: ALC269VB Analog (hw:0,0)", this is the device at index 0,
supporting duplex 2+2), it works OK with both buffer sizes. The sound is heard at once.
i.e.
echo 48 0     - works normally.
echo 64 0     - works normally.
Possible cause of different behavior (I didn't debug to such level):
a) it's possible that both buffer sizes are "happy" for this device, e.g. if portaudio's HostBuffer
  is multiple both of 64 and 48.
b) the device is much more synchronous, and supplies input and consumes output in equal postions only,
  so that no SetNoInput or SetNoOutput call occurs.

3. As I already said, crashing as such may be avoided by zeroing frames count together with data pointer.
The sound quality is questionable, but at least the sound is heard instead of program crash.
This patch does not influence other buffer sizes etc., so I think it may be useful.


============================================================
The test program
============================================================

#include "portaudio/include/pa_linux_alsa.h"

#include <cstdint>
#include <iostream>
#include <algorithm>
using namespace std;

struct t_cb_userdata
{
  int nch;
  bool b_stop;
  bool b_stopped;
  t_cb_userdata() : nch(1), b_stop(0), b_stopped(0) {}
};

static int f_io_callback(const void* buf_in_, void* buf_out_, unsigned long nfr, const PaStreamCallbackTimeInfo*, PaStreamCallbackFlags, void* userData)
{
  t_cb_userdata* d = reinterpret_cast<t_cb_userdata*>(userData);
    if (!(d && nfr > 0 && buf_in_ && buf_out_)) { return paContinue; }

  if (d->b_stop) { d->b_stopped = 1; return paAbort; }

  const int64_t nsmp = nfr * d->nch;
  const float* ps = (float*)buf_in_;
  float* pd = (float*)buf_out_;
  for (int64_t i = 0; i < nsmp; ++i) { pd[i] = ps[i]; }

  return paContinue;
}

int main(int argc, char** argv)
{
  int res = Pa_Initialize();
    if (!(res == paNoError)) { cerr << "ERR Pa_Initialize failed. res " << res << endl; return 1; }

  int rate = 48000;
  int nfr_buf = 48;
    if (argc >= 2) { nfr_buf = atoi(argv[1]); }
    if (nfr_buf <= 0) { cerr << "ERR nfr_buf <= 0. Use  \"echo <nfr_buf> <ind_device>\"  (nfr_buf > 0, ind_device >= 0)." << endl; return 1; }
  int idev_in = -1;
  int idev_out = -1;
    if (argc >= 3) { idev_in = idev_out = atoi(argv[2]); }
    if (idev_in < 0)
    {
      idev_in = Pa_GetDefaultInputDevice();
      idev_out = Pa_GetDefaultOutputDevice();
    }
    if (idev_in != idev_out) { cerr << "ERR Default rec/play devices are different.  Use  \"echo <nfr_buf> <ind_device>\"  (nfr_buf > 0, ind_device >= 0). ind_device is portaudio's index for single full duplex device. idev_in idev_out: " << idev_in << " " << idev_out << endl; return 1; }
    if (idev_in < 0) { cerr << "ERR Bad index of rec/play device: " << idev_in << endl; return 1; }
  int nch = 2;


  t_cb_userdata ud;
    ud.nch = nch;
  const PaDeviceInfo* di = Pa_GetDeviceInfo(idev_in);
    if (!di) { cerr << "ERR di == 0." << endl; return 1; }

  PaStreamParameters para;
    para.channelCount = nch;
    para.device = idev_in;
    para.sampleFormat = paFloat32;
    para.suggestedLatency = max(di->defaultLowInputLatency, di->defaultLowOutputLatency);
    para.hostApiSpecificStreamInfo = 0;
  PaStream* s = 0;

  res = Pa_OpenStream(&s, &para, &para, rate, nfr_buf, paClipOff | paDitherOff, &f_io_callback, &ud);
    if (!(s && res == paNoError)) { cerr << "ERR Pa_OpenStream failed. res " << res << endl; return 1; }

  res = Pa_StartStream(s);
    if (!(res == paNoError)) { Pa_CloseStream(s); cerr << "ERR Pa_StartStream failed. res " << res << endl; return 1; }

  cout << "NOTE Stream started successfully. Expected: playback echoes the output with min. latency. Press Enter to exit." << endl;
  while (!cin.get()) { Pa_Sleep(10); }

  ud.b_stop = 1;
  Pa_StopStream(s);
  while (!ud.b_stopped) { Pa_Sleep(1); }

  Pa_CloseStream(s);

  return 0;
}



============================================================
The patch I'm using
Need your comments on reliability
============================================================


void PaUtil_SetNoInput( PaUtilBufferProcessor* bp )
{
    assert( bp->inputChannelCount > 0 );
    bp->hostInputChannels[0][0].data = 0;
    if (1) { bp->hostInputFrameCount[0] = 0; bp->hostInputFrameCount[1] = 0; }
}
void PaUtil_SetNoOutput( PaUtilBufferProcessor* bp )
{
    assert( bp->outputChannelCount > 0 );
    bp->hostOutputChannels[0][0].data = 0;
    if (1) { bp->hostOutputFrameCount[0] = 0; bp->hostOutputFrameCount[1] = 0; }
}




prlce> Send Portaudio mailing list submissions to
prlce>         portaudio@lists.columbia.edu

prlce> To subscribe or unsubscribe via the World Wide Web, visit
prlce>         https://lists.columbia.edu/mailman/listinfo/portaudio
prlce> or, via email, send a message with subject or body 'help' to
prlce>         portaudio-request@lists.columbia.edu

prlce> You can reach the person managing the list at
prlce>         portaudio-owner@lists.columbia.edu

prlce> When replying, please edit your Subject line so it is more specific
prlce> than "Re: Contents of Portaudio digest..."


prlce> Today's Topics:

prlce>    1. Re: Bug found in PortAudio/ALSA impl. (Ross Bencina)


prlce> ----------------------------------------------------------------------

prlce> Message: 1
prlce> Date: Thu, 6 Aug 2020 09:44:22 +1000
prlce> From: Ross Bencina <rossb-lists@audiomulch.com>
prlce> To: portaudio list <portaudio@lists.columbia.edu>
prlce> Subject: Re: [Portaudio] Bug found in PortAudio/ALSA impl.
prlce> Message-ID: <bb4870d6-e7a9-2b80-7a65-7a8e821a5112@audiomulch.com>
prlce> Content-Type: text/plain; charset=utf-8; format=flowed

prlce> On 6/08/2020 6:26 am, Yevgueny wrote:
>> 2. I'm using latest stable version from portaudio.com (pa_stable_v190600_20161030.tgz).
>> Just checked daily snapshot (pa_snapshot.tgz, created Wednesday, 05-Aug-2020 01:23:04 UTC),
>> pa_linux_alsa.* and pa_process.* there are identical to the above stable version.
>> Thus the problem should occur in snapshot as well.

prlce> Thanks for clarifying.

prlce> Do you think that this is a bug in PA/ALSA or in pa_process?

prlce> I wonder whether this still happens with old versions of pa_process.

>> 4. Writing a program for reproducing the problem will require additional time,
>> because I'm using C++ application and custom wrapper library around PortAudio,
>> while you should receive from me clean code without additional dependencies.
>> So I'll make it in the next post.

prlce> Perhaps one of the existing files in the examples or tests directories
prlce> will help as a starting point. (From memory I think it is pa_fuzz or
prlce> pa_wire that is a simple full-duplex example).

prlce> Thank you,

prlce> Ross.
