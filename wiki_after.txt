
________________________________________________________________________________
Page Home.md
![portaudio_logo.png](http://www.portaudio.com/images/portaudio_logo.png)

# Welcome to the PortAudio Wiki

PortAudio is a portable API for audio I/O. It allows people writing audio programs to easily access the audio devices.

To download PortAudio or for more information visit http://www.portaudio.com

This is our Wiki. We use it to share information about development and use of PortAudio. You're welcome to contribute. If you'd like an account, please ask on the mailing list.

## Links for everyone

* [[Links to PortAudio content outside the Wiki|WhatIsntInTheWiki]]

* [[Using the PortAudio Git Repository|UsingTheGitRepository]]

* [Tutorial](http://portaudio.com/docs/v19-doxydocs/tutorial_start.html) (now hosted in the main documentation) *<== How to compile and call PortAudio*

* [[Building PortAudio with MinGW|Notes_about_building_PortAudio_with_MinGW]]

* [[Platform Specific Notes|Platforms]], eg. [[Mac OSX|Platforms_Mac_OS_X]], [[Raspberry Pi|Platforms_RaspberryPi]], [[Beagle Board|Platforms_BeagleBoard]]

* [[Useful Tips on real-time audio programming with PortAudio|Tips]]

* [[ReleaseNotes]]

 *  [[List of changes between pa_stable_v19_20071207 to pa_stable_v19_20110326 stable snapshots|pa_stable_v19_20110326]]

* [[People Who Contributed to V19|V19Contributors]], also see http://www.portaudio.com/people.html


## Links mainly for PortAudio developers

* [[V19ReleasePlan]]

* [[Tasks for New and Casual Contributors|TasksForNewContributors]] -- please help out

* Information about our development process: [[MilestonesAndTickets]] and [[AboutListReviewTickets]]

* [[DeveloperGuidelines]] for using Tickets, SVN and Doxygen

* [[Test Plan|TestPlan]] and  [[Test Status|TestStatus]] - Unit Tests and QA Strategy

* [[Win32 Audio Background Information|Win32AudioBackgroundInfo]]

* [[V19 Sample Data Converters Status|V19ConvertersStatus]]

* [[Changes to the public API for V19-M1 and  V19-M2 development milestones|V19ApiChanges]]

* [[Guidelines for implementing PortAudio buffering, latency and timing|BufferingLatencyAndTimingImplementationGuidelines]]

* [[AssemblaVsTracWikiMarkup]] - Hints on editing the new Wiki if you're more used to the old Trac markup

* [[MigrationToGitHub]] - Plan for migrating from Assembla to GitHub

If you're interested in contributing to the Wiki, the following pages have been suggested:
 * Link exchange page
 * A v18 vs v19 page

________________________________________________________________________________
Page WhatIsntInTheWiki.md
# What isn't in the Wiki

Some content is kept outside the PortAudio Wiki. Mostly this is because it is kept in the SVN repository so it can be distributed with PortAudio releases. This includes tutorials and core API documentation.

Here are some links to important non-Wiki content:

PortAudio 2.0 (v19-devel) doxygen-generated API Reference: http://www.portaudio.com/docs/v19-doxydocs/

PortAudio API change proposals: http://www.portaudio.com/docs/proposals/index.html

The current non-Wiki documentation page: http://www.portaudio.com/docs/

Source code tarballs are currently linked here: http://www.portaudio.com/download.html

________________________________________________________________________________
Page UsingThePortAudioSvnRepository.md
# The SVN repo is FROZEN! Use Git Instead.

We migrated the repo from SVN to Git on 5/1/2016.

________________________________________________________________________________
Page ReleaseNotes.md
# Release Notes

Change logs are linked below, most recent first.

* 19.6.0 [[pa_stable_v190600_20161030]] (October 30, 2016, Git 396fe4b669)
* pa_stable_v19_20140130 (January 30, 2014, SVN rev 1919)
* [[pa_stable_v19_20111121]] (November 21, 2011, SVN rev 1788)
* [[pa_stable_v19_20110326]] (March 26, 2011, SVN rev 1647) 
* pa_stable_v19_20071207 (December 7, 2007)

You can review the Git commit history here: https://github.com/PortAudio/portaudio/commits

In April 2016 we switched from SVN to Git. The SVN repo has been retained for reference. You can review the SVN commit history here: https://app.assembla.com/spaces/portaudio/subversion/commits/list.

________________________________________________________________________________
Page pa_stable_v19_20110326.md
# pa_stable_v19_20071207 to pa_stable_v19_20110326 -- what's changed?

This page answers the question "what has changed in version pa_stable_v19_20110326.tgz compared to pa_stable_v19_20071207"

There's a full log from SVN below. Some highlights have been cherry picked into the following lists. If you think something important has been missed, please let us know and we'll update the list.

You can get a list of the tickets that were closed during this period, here:
http://www.portaudio.com/trac/query?status=closed&changetime=12%2F6%2F07..03%2F26%2F11&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component&order=priority


## Highlights

* Fixed a lot of bugs on all platforms
* Fixed a lot of build system issues on all platforms (autotools, msvc, scons)
* Added more support for V19 API features on many platforms
* Added WASAPI implementation
* Ring buffer code was generalised into pa_ringbuffer.c with correct memory barriers. this is now used by many host api implementations
* Implemented blocking i/o for ASIO
* Made ALSA default host API on Linux
* Fixed stream info inputLatency and outputLatency calculations in a number of host APIs (r1598, r1599, r1600)
* WMME added support for ac3+wma spdif passthrough
* DirectSound added support for driver-level full duplex via DX8 DirectSoundFullDuplexCreate


## More details

These items are just cherry picked from the SVN log below as looking interesting. They aren't an exhaustive list. If you want more details you can search for the description text from these bullet points to find the log entry further down the page, then click on the revision number to get the diff for that change.

### Common infrastructure

* fixed inputBufferAdcTime calculation for AdaptingInputOnlyProcess
* implemented 'Int24_To_Int16_Dither' converter to allow 24-bit audio be played on 16 bit hardware
* implemented optimization for NonAdaptingProcess processor: avoid copying of input/output from temp user buffer to host buffer by providing host buffer pointer directly to user, e.g. achieving processing of host buffer in place
* skeleton host api implementation moved to hostapi/skeleton

### Windows
* always use vsnprintf with MSC
* change CreateThread to _beginthreadex (related to ticket #84)

### WMME host api
* added support for ac3+wma spdif passthrough
* Fixed bug (when PAWIN_USE_WDMKS_DEVICE_INFO is defined) where wmme device channel count would be incorrect for default device resulting in distorted sound if user tries to open device with more channels than device can handle. 

### Direct Sound host api
* derive ds output channel count from speaker configuration when pnpInterface is unavailable (eg wavemapper). Thanks to Dmitry Kostjuchenko for the patch.
* use a win32 Event object (aka condition variable) to signal timer process completio to Pa_StopStream in DirectSound? implementation. resolves race condition when stopping direct sounds streams.
* reworked DirectSound? stream completion to correctly flush the buffer processor and zero DS buffers when the callback returns paComplete or paAbort. resolves ticket #86. use test patest_stop_playout.c to verify.
* implemented paPrimeOutputBuffersUsingStreamCallback for DirectSound
* Added code to PortAudio/DirectSound? to use DX8 DirectSoundFullDuplexCreate API for full duplex streams where available. Define PAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE in your project to enable this feature.

### ASIO host api
* added explicit management of the asioDrivers instance creation and destruction. this fixes a leak where the asioDrivers instance was never destroyed.
* Blocking i/o implementation by Sven Fischer. adds pa_asio dependency on pa_ringbuffer.c. Added i386 memory barriers for MSVC and BORLAND
* Supports multiple threads using ASIO by adding CoInitialize?(0) and CoUninitialize?() calls.
* added cast to IsDebuggerPresentPtr?, fixes compilation of asio on some systems
* fixed ASIO thiscall resolver for GCC 4.+: CALL_THISCALL_1_DOUBLE was failing due to strong optimization of GCC compiler

### ASIHPI host api
* patch from Eliot Blennerhassett to use new stream read write functions that first appeared in HPI version 3.05.05. resolves ticket #51

### ALSA host api
* Apply Kevin Kofler's non-mmap patch
* Add PA ALSA extension to allow setting number of retries when busy
* Fix latency calculation in PA ALSA
* fixed deadlock in PaAlsaStream_WaitForFrames if device is paused, poll() results are now checked for 0 and if 64 times exceeded an error (paTimedOut) is returned
* removed hardcoded low-limit of latency for non-MMAPed devices, it is an obligation for user to set an acceptable/desired latency value
* tuned XRUN recovery sequence for MMAPed devices
* reverted buffer size (2048) hardcoding for non-MMAPed devices to avoid crash on wrong buffer size usage (whole area requires more work)
* optimized non-MMAPed device operation to avoid malloc(memset)/free usage on every processing call avoiding significant performance penalty
* releasing memory of non-MMAPed buffer on stream closure by Pa_CloseStream
* if polling loop is timed out (paTimedOut) PaAlsaStream_WaitForFrames will not report any frames available
* fixed latency setting dependence on user buffer size, now it is completely independent and user is able to set lowest possible/audible latency (approx. 3-4ms)
* fixed fixed min. latency for non-MMAPed devices, they do behave similar to MMAPed devices now without a limitation
* fixed seg.fault (caused by assertion) when using non-interleaved host i/o, now paNonInterleaved flag is provided to PaUtil_InitializeBufferProcessor to signal processor about host format being non-interleaved
* improved host buffer size calculation: taking into account obligatory double buffering utilising formula
* avoid SetApproximateSampleRate() excessive log messages when Pa_IsFormatSupported API method is used to test for supported sample rates and some of them are not supported by device
* fixed Segmentation fault due to dangling pointer left by snd_lib_error_set_handler() call which set callback pointer to ALSA during PaAlsa?_Initialize call. Segmentation fault happens only if application dynamically unloaded PortAudio while still using ALSA through other means, then next ALSA error which causes invocation of ALSA error handling callbacks would cause Segmentation fault. 
* implemented dynamic ALSA loading, you shall define PA_ALSA_DYNAMIC when compiling PortAudio library, by default PortAudio will use compile time linkage;

### OSS host api
* Tweaked error handling in PaOssStream_Stop
* OSS: Don't stat before trying to open device
* Patch from Stelios Bounanos: set host error info more consistently in OSS
* Fix call to PaUtil_SetLastHostErrorInfo in OSS
* Partial patch for NetBSD support -- Add configure-time test for libossaudio library.
* fixed compile for systems missing 'pthread_cancel' series of functions, this allows to compile PortAudio under Android platform with OSS as audio host back-end

### JACK host api
* fixed assertion in PA processor logics by informing processor that host format is non-interleaved (using paNonInterleaved flag) in PaUtil?_InitializeBufferProcessor
* fixed rare timeout on WaitCondition reported earlier by increasing timeout from 1 second to 10 minutes

### CoreAudio host api
* fixed code inside asserts as suggested by Jorge Acerda Macia.
* fix for xrun detection suggested by Jorge Acereda Macia for Core Audio
* some assertion cleanup
* applied patch to fix ticket #64 -- added list of listeners for xruns in CoreAudio
* added necessary include file to pa_mac_core_utilities.c
* tweaked handling of xruns in core audio slightly. should be cleaner this way
* added --enable-mac-debug flag to control -g and -DNDEBUG flags in mac build only.
* separated memory barrier code from ringbuffer for greater modularity
* fixed potential isues with accessing freed memory in Core Audio code when dealing with xruns
* simplified/cleaned configure code dealing with mac universal binaries.
* Patch to make universal binary optional. 
* removed memory barriers from section of code that is instead protected by mutex
* patch to use mach absolute time on mac OS X since apple advises against gettimeofday in IOProcs. 
* fixes for hardware samplerate changes
* fixed MacOSX "Snow Leopard" 10.6+ deadlock on sample-rate change 
* Replaced broken PaStreamCallbackTimeInfo calculations with calculation based on CoreAudio ioProc timestamps. 


### Documentation
* clarified documentation
* added API overview: http://portaudio.com/docs/v19-doxydocs/api_overview.html
* cleaned out most doxygen @todo comments and moved to trac

---

## Changelog

Full changelog from svn (using `svn log -r1307:1647` command):

---
r1647 | philburk | 2011-03-26 04:34:07 +1100 (Sat, 26 Mar 2011)

Add README for configure.

---
r1646 | philburk | 2011-03-26 03:59:27 +1100 (Sat, 26 Mar 2011)

Remove include for pa_unix_oss.h to fix "make install" on Linux.

---
r1645 | philburk | 2011-03-17 09:33:34 +1100 (Thu, 17 Mar 2011)

Ran autoreconf to update config.guess and other configure files.

---
r1644 | philburk | 2011-03-13 11:49:28 +1100 (Sun, 13 Mar 2011)

Added patest_mono and patest_two_rates to Makefile.in
Verified both and updated README.txt

---
r1643 | philburk | 2011-03-13 11:18:45 +1100 (Sun, 13 Mar 2011)

Ran autoconf to update configure file to fix INCLUDES bug.

---
r1642 | dmitrykos | 2011-03-09 04:20:07 +1100 (Wed, 09 Mar 2011)

wasapi: 
 - fixed warning of incompatible type usage when ring-buffer is used for blocking interface
 - fixed compilation using MSYS with MinGW compiler (regenerate makefile with configure)
---
r1641 | philburk | 2011-03-08 11:37:50 +1100 (Tue, 08 Mar 2011)

Improve latency measurement in loopback so it handles DC steps better.

---
r1640 | philburk | 2011-03-07 11:52:47 +1100 (Mon, 07 Mar 2011)

Convert patest_two_rates.c to V19.
Make paloopback over/underflow report easier to understand.

---
r1639 | philburk | 2011-03-06 11:35:24 +1100 (Sun, 06 Mar 2011)

Add include string.h to loopback test.
Use full duplex if input and output device the same.
Check for format conversion buffer overflow in case of huge framesPerBuffer.

---
r1638 | rossb | 2011-03-04 18:53:36 +1100 (Fri, 04 Mar 2011)

added newline to print statement
---
r1637 | rossb | 2011-03-04 18:19:04 +1100 (Fri, 04 Mar 2011)

print arguments at startup
---
r1636 | rossb | 2011-03-04 16:17:47 +1100 (Fri, 04 Mar 2011)

changes to get qa building on Windows with msvc. had to move variable declarations to the top of functions (ie ANSI C89)
---
r1635 | rossb | 2011-03-04 15:18:44 +1100 (Fri, 04 Mar 2011)

moved skeleton to end of win32 initializers list so it isn't considered default
---
r1634 | rossb | 2011-03-04 15:12:08 +1100 (Fri, 04 Mar 2011)

support building skeleton host api on windows
---
r1633 | rossb | 2011-03-04 14:01:44 +1100 (Fri, 04 Mar 2011)

paqa: removed non standard and unused #include <strings.h>. updated definitions of pi to double precision
---
r1632 | rossb | 2011-03-04 13:28:55 +1100 (Fri, 04 Mar 2011)

fixed build breakage of patest_wmme_ac3.c on windows
---
r1631 | rossb | 2011-03-04 12:45:06 +1100 (Fri, 04 Mar 2011)

use LoadLibraryA instead of LoadLibrary to support unicode build
---
r1630 | philburk | 2011-03-03 12:18:39 +1100 (Thu, 03 Mar 2011)

Add test for paInt8 to loopback test.
Add separate input and output latency setting options.
Add timeout when waiting for stream to finish.

---
r1629 | philburk | 2011-03-03 09:12:23 +1100 (Thu, 03 Mar 2011)

Fix random code insertion caused by buggy editor on Linux.
Report actual buffer sizes.

---
r1628 | philburk | 2011-03-03 08:03:45 +1100 (Thu, 03 Mar 2011)

Add latency control in loopback to fix Linux latency problems.

---
r1627 | philburk | 2011-03-03 04:49:46 +1100 (Thu, 03 Mar 2011)

Raise pop threshold for loopback test.

---
r1626 | philburk | 2011-03-03 04:03:23 +1100 (Thu, 03 Mar 2011)

Applied patches for Debian Linux for ticket 166.

---
r1625 | philburk | 2011-03-02 13:42:57 +1100 (Wed, 02 Mar 2011)

Set default latency in an attempt to reduce full duplex glitching.

---
r1624 | philburk | 2011-03-02 12:53:02 +1100 (Wed, 02 Mar 2011)

Add test for sample format conversion.

---
r1623 | philburk | 2011-03-02 10:02:52 +1100 (Wed, 02 Mar 2011)

Check for clipping even when loopback devices specified.

---
r1622 | philburk | 2011-03-02 09:48:50 +1100 (Wed, 02 Mar 2011)

Add check for clipping and noise in loopback test.

---
r1621 | philburk | 2011-03-01 20:36:31 +1100 (Tue, 01 Mar 2011)

Remove unused variable in loopback.

---
r1620 | philburk | 2011-03-01 20:22:48 +1100 (Tue, 01 Mar 2011)

Add loopback target to Makefile.
Fixes to loopback test for ALSA.

---
r1619 | philburk | 2011-03-01 19:34:46 +1100 (Tue, 01 Mar 2011)

tweak changeme.txt to test SVN on Ubuntu

---
r1618 | philburk | 2011-03-01 13:32:04 +1100 (Tue, 01 Mar 2011)

ANother attempt at fixing configure make.

---
r1617 | philburk | 2011-03-01 13:25:32 +1100 (Tue, 01 Mar 2011)

Try to fix oddly broken Makefile.in

---
r1616 | philburk | 2011-03-01 13:12:46 +1100 (Tue, 01 Mar 2011)

ANother C99 fix for loopback.

---
r1615 | philburk | 2011-03-01 13:02:46 +1100 (Tue, 01 Mar 2011)

Fix C99 error with modern for loops.

---
r1614 | philburk | 2011-03-01 12:54:20 +1100 (Tue, 01 Mar 2011)

Added paloopback test to the automated build.

---
r1613 | philburk | 2011-03-01 11:49:52 +1100 (Tue, 01 Mar 2011)

Ass semicolon to fix "label at end of compound statement" error
caused by pthread_cleanup_pop(1) macro.

---
r1612 | philburk | 2011-03-01 10:56:48 +1100 (Tue, 01 Mar 2011)

Added patest_write_sine_nonint to Makefile.
Check for paNonInterleaved on Mac and return paSampleFormatNotSupported.
Fix pa_minlat.c. Linux was complaining about not checking fgets return value.

---
r1611 | philburk | 2011-03-01 09:27:39 +1100 (Tue, 01 Mar 2011)

Add a test for non-interleaved blocking writes.
This is to address ticket 83.

---
r1610 | philburk | 2011-02-27 12:31:56 +1100 (Sun, 27 Feb 2011)

Speed up loopback test by testing each sample rate then each buffer size, not full matrix.

---
r1609 | philburk | 2011-02-27 11:06:07 +1100 (Sun, 27 Feb 2011)

Cleanup tests. Lots of small tweaks.
Delete the debug_ tests because they are V18 and are not needed.
We can just hack a V19 test if we need to debug.

---
r1608 | dmitrykos | 2011-02-22 09:41:06 +1100 (Tue, 22 Feb 2011)

wasapi: fixed the bug when on stream stop/start/stop/start sequence callback could be called with number of samples smaller than requested by user in Pa_OpenStream
---
r1607 | dmitrykos | 2011-02-21 19:02:21 +1100 (Mon, 21 Feb 2011)

fixed build by reverting 1604 revision where 'pa_ringbuffer.o' dependency was added to Makefile.in, modified configure.in for WASAPI build and added explicit 'pa_ringbuffer.o' dependency there instead
---
r1606 | rob_bielik | 2011-02-18 02:56:04 +1100 (Fri, 18 Feb 2011)

Ticket #132
---
r1605 | rossb | 2011-02-13 00:33:18 +1100 (Sun, 13 Feb 2011)

doc tweak
---
r1604 | dmitrykos | 2011-02-12 23:45:27 +1100 (Sat, 12 Feb 2011)

fixed compilation when Makefile is used by adding missing pa_ringbuffer.o object file
---
r1603 | rossb | 2011-02-12 21:22:00 +1100 (Sat, 12 Feb 2011)

moved src/common/pa_skeleton.c to src/hostapi/skeleton/pa_hostapi_skeleton.c. updated all build files accordingly.
---
r1602 | rossb | 2011-02-12 20:26:30 +1100 (Sat, 12 Feb 2011)

added braces to clarify precedence in latency calculation expression
---
r1601 | rossb | 2011-02-12 20:21:52 +1100 (Sat, 12 Feb 2011)

renamed some latency variables to make it clear they are in frames not seconds
---
r1600 | rossb | 2011-02-12 20:20:26 +1100 (Sat, 12 Feb 2011)

fixed stream info inputLatency and outputLatency calculations. PaUtil_GetBufferProcessorOutputLatency returns latency in <frames>, code assumed it was in seconds.
---
r1599 | rossb | 2011-02-12 20:19:37 +1100 (Sat, 12 Feb 2011)

fixed stream info inputLatency and outputLatency calculations. PaUtil_GetBufferProcessorOutputLatency returns latency in <frames>, code assumed it was in seconds.
---
r1598 | rossb | 2011-02-12 20:18:28 +1100 (Sat, 12 Feb 2011)

fixed stream info inputLatency and outputLatency calculations. PaUtil_GetBufferProcessorOutputLatency returns latency in <frames>, code assumed it was in seconds.
---
r1597 | dmitrykos | 2011-02-11 11:15:51 +1100 (Fri, 11 Feb 2011)

alsa:
- implemented dynamic ALSA loading, you shall define PA_ALSA_DYNAMIC when compiling PortAudio library, by default PortAudio will use compile time linkage;
- added PA_ALSA_PATHNAME define to redefine ALSA library path and filename to some other name and location, has effect only together with PA_ALSA_DYNAMIC;
- added extension function (PaAlsa_SetLibraryPathName) which allows to set ALSA library path and filename during application run-time overwriting default set by PA_ALSA_PATHNAME during compilation;
- added API compatibility with Android OS (although ALSA may not be available on your device and usually requires 'root' access rights to open an audio device), some missing ALSA functions are replaced with stubs (needs more input from interested parties), to compile on Android you need to add ALSA headers (get it from Android GIT source-code tree) to compiler's searchable path.
---
r1596 | dmitrykos | 2011-02-09 19:53:50 +1100 (Wed, 09 Feb 2011)

alsa:
- fixed callback thread to exit normally if error condition was satisfied during stream processing (OnExit wasn't called), it was possible cause of crash if error happened inside the thread
- modified processing thread to timeout during poll() within around 2 seconds instead of 64 milliseconds, this will help to fix problems on systems with low processing power and possible CPU overloading, like portable ARM devices
- timeout of poll() will not cause stream to stop but will cause Alsa stream restart, poll timeout will now set 'xrun' event to 1
---
r1594 | rossb | 2011-02-06 01:33:29 +1100 (Sun, 06 Feb 2011)

corrected typos as per jf_menards's patch in ticket #58
---
r1592 | rossb | 2011-02-04 21:41:58 +1100 (Fri, 04 Feb 2011)

added #include portaudio.h to pa_mac_core.h so it is consistent with all other host-api specific headers. closes ticket #7
---
r1589 | dmitrykos | 2011-02-04 02:37:12 +1100 (Fri, 04 Feb 2011)

wasapi: - releasing Input/Output buffer if error occurred inside the processing routine
---
r1588 | dmitrykos | 2011-02-04 02:15:44 +1100 (Fri, 04 Feb 2011)

wasapi: 
 - fixed blocking interface, Input and Output
 - improved Exclusive Input device latency tunning
 - applied path provided by Jean-François Charron (D-BOX Technologies Inc.) which improves handling of COM objects in multi-threaded environment and initialization stage which could under certain conditions return paNoError event when initialization failed
---
r1585 | rossb | 2011-02-03 06:31:27 +1100 (Thu, 03 Feb 2011)

removed reference to todo list from main doxygen page
---
r1584 | rossb | 2011-02-03 05:58:17 +1100 (Thu, 03 Feb 2011)

removed/cleaned up doxygen @todo items. moved to TRAC
---
r1583 | rossb | 2011-02-03 05:22:43 +1100 (Thu, 03 Feb 2011)

cleanup: changed if() to switch()
---
r1582 | rossb | 2011-02-03 04:29:26 +1100 (Thu, 03 Feb 2011)

clarified documentation for PaTime and Pa_GetStreamTime
---
r1579 | rossb | 2011-02-02 00:11:22 +1100 (Wed, 02 Feb 2011)

removed old doxygen @todo comments
---
r1578 | rossb | 2011-02-02 00:09:10 +1100 (Wed, 02 Feb 2011)

removed obsolete doxygen @todo comments
---
r1577 | rossb | 2011-02-02 00:03:45 +1100 (Wed, 02 Feb 2011)

referenced trac ticket #113 in doxy todo item
---
r1576 | rossb | 2011-02-01 23:58:26 +1100 (Tue, 01 Feb 2011)

referenced trac tickets #35 and #112 in pa_converters.c todo items
---
r1575 | rossb | 2011-02-01 23:52:14 +1100 (Tue, 01 Feb 2011)

removed doxygen TODO items from pa_asio implementation. migrated them to new trac tasks: #103, #104, #105, #106, #107, #108, #109, #110, #111
---
r1574 | rossb | 2011-02-01 22:18:16 +1100 (Tue, 01 Feb 2011)

corrected doc comment
---
r1573 | rossb | 2011-02-01 22:17:36 +1100 (Tue, 01 Feb 2011)

simplify doc tweak
---
r1565 | dmitrykos | 2011-01-04 05:33:32 +1100 (Tue, 04 Jan 2011)

wasapi: allow mono input/output streams be created when Blocking interface is used. Thanks to Chris (c319chris@aol.com) for providing the patch.
---
r1563 | philburk | 2010-12-29 10:03:56 +1100 (Wed, 29 Dec 2010)

test svn access
---
r1562 | dmitrykos | 2010-12-27 03:36:52 +1100 (Mon, 27 Dec 2010)

wasapi: fixed audio device not released to other applications if WASAPI Exclusive stream is stopped but not yet closed. Bug does not affect Shared mode streams. Fixed possible object's leakage in situation when WASAPI thread encountered an error and stopped and user decided to start stream again without prior closing it.
---
r1561 | dmitrykos | 2010-12-27 03:17:56 +1100 (Mon, 27 Dec 2010)

wasapi: fixed audio gain is decreased by 2 when audio stream is opened for capturing and 1 (Mono) channel selected, this bug occurs only if non-Stereo input source used (mono mic).
---
r1560 | dmitrykos | 2010-12-27 02:58:30 +1100 (Mon, 27 Dec 2010)

corrected Int24_To_Int16_Dither and implemented Int24_To_Int8_Dither, Float32_To_Int24 to use all 'double' types for optimal code generation (not mixing double with floats)
---
r1559 | rossb | 2010-12-26 17:43:58 +1100 (Sun, 26 Dec 2010)

disable dither conversion when host input format is 32 bit and user format is 24 bit. the converter for this is unimplemented anyway, and the host won't ever be sending us better than 24 bit data, so no need to dither it.
---
r1558 | dmitrykos | 2010-12-26 00:26:17 +1100 (Sun, 26 Dec 2010)

coreaudio: fixed incorrect value type used with OSAtomicOr32 API (xrunFlags were casted from long to unsigned int) which results in value truncation on systems where 'long' is 64 bits
---
r1557 | rossb | 2010-12-11 14:11:35 +1100 (Sat, 11 Dec 2010)

doc tweaks
---
r1556 | philburk | 2010-11-13 06:14:25 +1100 (Sat, 13 Nov 2010)

First checkin of new loopback unit test for PortAudio.

---
r1555 | richard_ash | 2010-11-13 04:16:21 +1100 (Sat, 13 Nov 2010)

Commit fix for crash during full-duplex operation with PulseAudio. Reported by Al Dimond, fix proposed by Ross Bencina, acked by Dmitry Kostjuchenko. This fixes a bug with Dmitry's zero-copy optimisations. Fix works in Audacity (where the bug was found), so comitting upstream.

---
r1554 | rossb | 2010-11-08 10:57:36 +1100 (Mon, 08 Nov 2010)

updated documentation main page and added api overview page to documentation
---
r1553 | dmitrykos | 2010-11-07 19:23:51 +1100 (Sun, 07 Nov 2010)

wasapi: 
 - using WAVE_FORMAT_PCM for mono/stereo 8/16-bit stream configuration to avoid possible driver refusal upon audio client creation
 - modified default speaker mask for 5.1 and 7.1 configuration to _SURROUND (correct) versions, added default speaker configuration for 2.1, 4.1, 6.1 cases
---
r1552 | dmitrykos | 2010-11-06 12:16:34 +1100 (Sat, 06 Nov 2010)

wasapi: fixed audio stream failing to open on Windows 7 in Exclusive mode if suggestedLatency parameter is 0 and user framesPerBuffer is less than 3 milliseconds
---
r1551 | richard_ash | 2010-10-30 07:41:50 +1100 (Sat, 30 Oct 2010)

Ignore the generated .pc file so it doesn't show up in SVN status output

---
r1550 | richard_ash | 2010-10-30 07:09:54 +1100 (Sat, 30 Oct 2010)

Remove frome the list of directories created by configure a directory that no
longer has any contents and is not needed any more. Original patch by Benjamin Drung (Ubuntu)

---
r1549 | rossb | 2010-10-24 21:21:35 +1100 (Sun, 24 Oct 2010)

clarified some doc comments in pa_ringbuffer.h including one typo that said <write> instead or <read>
---
r1548 | rossb | 2010-10-22 13:30:38 +1100 (Fri, 22 Oct 2010)

patch from Rafaël Carré: clear SHARED_FLAGS in configure.in when --disable-shared is used to avoid libtool setting -shared and breaking the build.
---
r1547 | rossb | 2010-10-22 13:23:33 +1100 (Fri, 22 Oct 2010)

patch from Richard Ash: updated Makefile.in to set SHELL variable expected by newer versions of libtool (was breaking in builds on Debian without this)
---
r1546 | dmitrykos | 2010-10-21 04:32:04 +1100 (Thu, 21 Oct 2010)

wasapi: fixed capturing (Input stream) if Polling mode is used, ProcessInputBuffer was broken erroneously returning AUDCLNT_S_BUFFER_EMPTY and thus breaking Input thread.
---
r1545 | dmitrykos | 2010-10-21 04:00:54 +1100 (Thu, 21 Oct 2010)

wasapi: improved audio quality stability in Shared mode if framesPerBuffer (from user-side) value is lower than 10 milliseconds, now even 1 frame provides stable quality. Exclusive mode is also affected by this improvement.
---
r1544 | bjornroche | 2010-10-17 05:48:29 +1100 (Sun, 17 Oct 2010)

Fixes issue where ringbuffer elements were of size 1, which might have lead to split data. This does not resolve the issue for ringbuffer use in blio.
---
r1543 | dmitrykos | 2010-10-16 07:39:23 +1100 (Sat, 16 Oct 2010)

alsa: fixed Segmentation fault due to dangling pointer left by snd_lib_error_set_handler() call which set callback pointer to ALSA during PaAlsa_Initialize call. Segmentation fault happens only if application dynamically unloaded PortAudio while still using ALSA through other means, then next ALSA error which causes invocation of ALSA error handling callbacks would cause Segmentation fault. Bug reported in: http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=563192, and re-announced by Phil Burk on 15.10.2010.
---
r1542 | rossb | 2010-10-14 14:34:34 +1100 (Thu, 14 Oct 2010)

improved documentation of paNoInterleaved flag
---
r1541 | dmitrykos | 2010-09-22 16:33:47 +1000 (Wed, 22 Sep 2010)

jack: fixed segmentation fault caused by PA Jack implementation if Pa_Initialize is called after Pa_Terminate due to bad pointer usage by realloc() call which was previously freed() in Pa_Terminate call. Many thanks to RJ Ryan for reporting, debugging and providing the solution for this bug.
---
r1540 | dmitrykos | 2010-09-21 02:23:30 +1000 (Tue, 21 Sep 2010)

alsa: avoid SetApproximateSampleRate() excessive log messages when Pa_IsFormatSupported API method is used to test for supported sample rates and some of them are not supported by device
---
r1539 | rossb | 2010-08-30 18:26:58 +1000 (Mon, 30 Aug 2010)

fixed missing return statements from latency listener procs
---
r1538 | dmitrykos | 2010-08-25 03:44:00 +1000 (Wed, 25 Aug 2010)

wasapi: 
 - fixed compile under MinGW64 compiler (gcc version 4.5.1 20100702)
 - cleaned portability typedefs, thanks to MinGW64 project added KS headers which also work well for MinGW32 (tested: gcc version 4.5.0)
wdmks:
 - made it possible to use additional WDM/KS info for WMME/DS back-ends by defining PAWIN_USE_WDMKS_DEVICE_INFO for compilation by MinGW32/64 compilers if you include modified headers located in '\src\hostapi\wasapi\mingw-include'
---
r1537 | rossb | 2010-08-20 21:47:02 +1000 (Fri, 20 Aug 2010)

Replaced broken PaStreamCallbackTimeInfo calculations with calculation based on CoreAudio ioProc timestamps. Notes: 1. inputBufferAdcTime is not computed correctly for all cases (eg full duplex with/without ring buffer). 2. This patch needs to be reviewed for the case where device and AUHAL sample rates differ (ie SRC is used) and if input and output sample rates differ. See FIXMES
---
r1536 | rossb | 2010-08-14 16:22:26 +1000 (Sat, 14 Aug 2010)

tweaked buffer settings in wmme low level parameters example
---
r1535 | dmitrykos | 2010-08-07 06:25:07 +1000 (Sat, 07 Aug 2010)

wasapi: 
 - fixed alignment missing for host buffer if overall buffer size was set to less than 3ms that results in device timeout
 - advanced Event driven mode and extended the range of host buffer size which can operate in this mode up up to 20.66 ms, e.g. your device buffer size will vary in range 3 - 20.66 ms, if goes above then Poll driven mode is switched on automatically
---
r1534 | dmitrykos | 2010-08-04 07:02:52 +1000 (Wed, 04 Aug 2010)

wasapi:
 - fixed compilation by MinGW, was failing due to double ambiguous jack describing enums used in KS
ds:
 - fixed compile by MinGW, was failing due to missing casts to LPVOID * and usage of UINT instead of DWORD by PaWinDsStream::previousPlayCursor
---
r1533 | dmitrykos | 2010-08-02 20:37:18 +1000 (Mon, 02 Aug 2010)

alsa:
 - trying to fix specific case of stream failing to open when min/max period is specifying fixed value with +/-1 difference, we try choosing middle then which seems to be aligned to 2
---
r1532 | dmitrykos | 2010-07-30 20:44:18 +1000 (Fri, 30 Jul 2010)

alsa: 
 - improved host buffer size calculation: taking into account obligatory double buffering utilising formula (userFrames + MAX( userFrames, SR * suggestedLatency)), aligning host buffer with user buffer size, additional testing of host buffer size to avoid failure on snd_pcm_hw_params_set_period_size_near, additional logging for more convenient debugging
---
r1531 | dmitrykos | 2010-07-30 04:54:45 +1000 (Fri, 30 Jul 2010)

alsa: 
 - fixed seg.fault (caused by assertion) when using non-interleaved host i/o, now paNonInterleaved flag is provided to PaUtil_InitializeBufferProcessor to signal processor about host format being non-interleaved
---
r1530 | dmitrykos | 2010-07-29 16:29:41 +1000 (Thu, 29 Jul 2010)

jack:
 - fixed assertion in PA processor logics by informing processor that host format is non-interleaved (using paNonInterleaved flag) in PaUtil_InitializeBufferProcessor
 - fixed rare timeout on WaitCondition reported earlier by increasing timeout from 1 second to 10 minutes
---
r1529 | dmitrykos | 2010-07-23 20:04:03 +1000 (Fri, 23 Jul 2010)

wasapi: 
 - added functionality to enumerate jacks and their description
 - added example which demonstrates jacks enumeration technique
Thanks Reid Bishop for providing the idea for this extended functionality and patch with implementation.
---
r1528 | dmitrykos | 2010-07-21 07:01:07 +1000 (Wed, 21 Jul 2010)

wasapi: - fixed frames preloading for buffer mode - paUtilFixedHostBufferSize
---
r1527 | dmitrykos | 2010-07-21 05:01:17 +1000 (Wed, 21 Jul 2010)

wasapi: - fixed occasional bug (affects Windows 7 mostly) which is related to stream start failure due to exceeding buffer size when preloading data for output stream in exclusive mode (thanks Ralph Irving for noticing and reporting this bug)
---
r1526 | dmitrykos | 2010-07-16 09:27:21 +1000 (Fri, 16 Jul 2010)

wasapi: 
 - fixed usage of uninitialized variable (Input)
---
r1525 | rossb | 2010-07-14 16:45:25 +1000 (Wed, 14 Jul 2010)

added pragma to auto-link winmm.lib when compiling with msvc
---
r1524 | dmitrykos | 2010-07-13 04:41:05 +1000 (Tue, 13 Jul 2010)

wasapi: 
 - reimplemented full-duplex processing to address changes to latency calculations (please note Exclusive mode due to some unknown reason will likely not be able to provide good audio quality yet)
 - fixed Pa_GetStreamInfo for WASAPI device if stream is opened as full-duplex (thanks to Reid Bishop for pointing to the bug)
---
r1523 | dmitrykos | 2010-07-11 03:41:25 +1000 (Sun, 11 Jul 2010)

optimized PA processor for case when host and user buffer match by type and size, now host buffer pointer will be passed to user space directly, additional copying of audio input/output data is thus avoided.
asio: apply paNonInterleaved flag on host formats for callback mode (required for processor compatibility).
---
r1522 | dmitrykos | 2010-07-10 09:57:51 +1000 (Sat, 10 Jul 2010)

wasapi: 
 - fixed memory corruption if format is set to non-interlieved and mono <> stereo mini-mixer is used for to convert mono to stereo (conversion is done due to WASAPI limitation)
 - made WASAPI fully passing patest_wire.c (full-duplex combinations) for shared and exclusive modes
 - if WASAPI device failed to open due to unsupported format it will not crash top PA layer anymore
 - improved full-duplex mode for shared/exclusive (although exclusive full-duplex mode still produces audio glitches due to difference in input/output device buffer size due to unknown WASAPI reason, with shared mode all is ok)
 - exclusive mode will now work with 1 channel audio always, even if it is not supported by WASAPI natively (we use own mono <> stereo mini-mixer)
---
r1521 | dmitrykos | 2010-07-10 03:53:52 +1000 (Sat, 10 Jul 2010)

reverted changes from revisions 1516-1517 due to incorrectly made changes to processor's core which result in corrupted audio in some specific situations
---
r1519 | dmitrykos | 2010-07-09 07:03:08 +1000 (Fri, 09 Jul 2010)

wasapi: 
 - fixed Exclusive/Event mode if latency used exceeds 100ms resulting in bad audio
 - fixed Exclusive mode if overall stream latency exceeds 1400-2000ms resulting in E_OUTOFMEMORY even under Vista, now PA WASAPI will gradually decrease overall latency until acceptable level
 - applied device period aligning if period was corrected
 - improved robustness of audio client creation
---
r1518 | dmitrykos | 2010-07-06 17:28:48 +1000 (Tue, 06 Jul 2010)

wasapi: 
 - reimplemented suggestedLatency and framesPerBuffer parameters in Pa_OpenStream call to opearate by the following formula - 'hostBufferFrames = userFramesPerBuffer + max(userFramesPerBuffer, (suggestedLatency * sampleRate))' as discussed on PA mailing-lists
 - it is now possible to achieve 5.33ms latency in Polling & Exclusive mode (WOW64 or Native)
 - Polling method for output will benefit from direct WASAPI buffer pointer exposure to a user space through a callback (no copying)
 
---
r1517 | dmitrykos | 2010-06-30 06:58:15 +1000 (Wed, 30 Jun 2010)

fixed processor optimization from previous release for non-interleaved host buffers case (for example ASIO)
---
r1516 | dmitrykos | 2010-06-29 07:35:04 +1000 (Tue, 29 Jun 2010)

implemented optimization for NonAdaptingProcess processor: avoid copying of input/output from temp user buffer to host buffer by providing host buffer pointer directly to user, e.g. achieving processing of host buffer in place
---
r1515 | dmitrykos | 2010-06-29 07:29:16 +1000 (Tue, 29 Jun 2010)

wasapi: 
 - made framesPerBuffer and suggestedLatency behavior as per PA specification, e.g. framesPerBuffer set main device period, suggestedLatency is a surplus if not 0
 - fixed bug with Input in situation when WASAPI operates in native not-WOW64 process and using event mechanism would provide less frames to a user callback than expected (due to the fact as WASAPI's audio client provides only 1 packet per GetBuffer call which)
---
r1514 | dmitrykos | 2010-06-29 07:19:15 +1000 (Tue, 29 Jun 2010)

alsa: reverted broken specification (by me) according device latency being not dependent on user buffer size, now framesPerBuffer parameter and suggestedLatency set overall stream latency
---
r1513 | dmitrykos | 2010-06-23 05:53:00 +1000 (Wed, 23 Jun 2010)

wasapi: fixed very rare bug causing a dead looping if WASAPI input stream is being aborted
---
r1512 | dmitrykos | 2010-06-10 19:45:54 +1000 (Thu, 10 Jun 2010)

wasapi: fixed full-duplex failure (when host sample types differ) due to incorrect check made on I/O host buffer sizes
---
r1511 | dmitrykos | 2010-06-10 19:09:19 +1000 (Thu, 10 Jun 2010)

wasapi: fixed host-WASAPI related bug when selected 24-bit Input does not produce any audio, while 16 and 32-bits do, now if 24-bits selected by user (paInt24) PA WASAPI asks 32-bits (paFloat32) from WASAPI device and PA converters provide 24-bit data which is converted from 32-bit host buffer.
---
r1510 | dmitrykos | 2010-06-10 18:05:29 +1000 (Thu, 10 Jun 2010)

unix: fixed compile failure due to warning about unused variable when compilation takes place with -Werror switch
---
r1509 | dmitrykos | 2010-06-07 03:36:33 +1000 (Mon, 07 Jun 2010)

oss: fixed compile for systems missing 'pthread_cancel' series of functions, this allows to compile PortAudio under Android platform with OSS as audio host back-end
---
r1508 | dmitrykos | 2010-06-04 06:09:33 +1000 (Fri, 04 Jun 2010)

alsa: 
 - fixed latency setting dependence on user buffer size, now it is completely independent and user is able to set lowest possible/audible latency (approx. 3-4ms)
 - fixed fixed min. latency for non-MMAPed devices, they do behave similar to MMAPed devices now without a limitation
---
r1507 | dmitrykos | 2010-06-02 03:26:37 +1000 (Wed, 02 Jun 2010)

wasapi: 
 - implemented support for full-duplex mode (it always uses polling(pull) WASAPI behavior, if latency <15msec needed then event interface must be done)
 - fixed mono-to-stereo converter for input stream
 - mono-to-stereo converter will also automatically operate in shared mode (if WASAPI driver does not support mono for output, or only stereo for input)
---
r1506 | dmitrykos | 2010-06-01 22:45:09 +1000 (Tue, 01 Jun 2010)

alsa: - if polling loop is timed out (paTimedOut) PaAlsaStream_WaitForFrames will not report any frames available
---
r1505 | dmitrykos | 2010-05-31 19:46:49 +1000 (Mon, 31 May 2010)

wasapi: 
 - implemented support of non-Interlieved buffers (paNonInterleaved) for WASAPI blocking interface for input and output
 - blocking methods will now use PA sample converters
---
r1504 | dmitrykos | 2010-05-31 16:00:16 +1000 (Mon, 31 May 2010)

alsa: - releasing memory of non-MMAPed buffer on stream closure by Pa_CloseStream
---
r1503 | dmitrykos | 2010-05-31 08:14:00 +1000 (Mon, 31 May 2010)

alsa:
 - reverted buffer size (2048) hardcoding for non-MMAPed devices to avoid crash on wrong buffer size usage (whole area requires more work)
 - optimized non-MMAPed device operation to avoid malloc(memset)/free usage on every processing call avoiding significant performance penalty
---
r1502 | dmitrykos | 2010-05-30 17:28:41 +1000 (Sun, 30 May 2010)

alsa:
 - fixed deadlock in PaAlsaStream_WaitForFrames if device is paused, poll() results are now checked for 0 and if 64 times exceeded an error (paTimedOut) is returned
 - removed hardcoded low-limit of latency for non-MMAPed devices, it is an obligation for user to set an acceptable/desired latency value
 - tuned XRUN recovery sequence for MMAPed devices
---
r1501 | dmitrykos | 2010-05-21 03:28:23 +1000 (Fri, 21 May 2010)

fixed compile for DirectSound implementation under MSYS, missing DSSPEAKER_7POINT1_SURROUND define
---
r1500 | dmitrykos | 2010-05-19 03:23:56 +1000 (Wed, 19 May 2010)

wasapi:
 - re-enabled Event-driven mode for Windows 7 x64 platform if application runs as WOW64 process
---
r1499 | dmitrykos | 2010-05-19 01:02:41 +1000 (Wed, 19 May 2010)

wasapi:
 - fixed Event-driven mode, broken in 1496 rev.
---
r1498 | dmitrykos | 2010-05-18 07:15:13 +1000 (Tue, 18 May 2010)

wasapi:
 - using WOW64 workaround (fall-back to a Poll-driven mode) for any WOW64 process regardless of Windows version due to report of same bug under Windows 7 x64
---
r1497 | dmitrykos | 2010-05-18 04:37:00 +1000 (Tue, 18 May 2010)

wasapi:
 - fixed object (IAudioRenderClient/IAudioCaptureClient) leak if stream is stopped and restarted without closing
 - improved IAudioClient event handle management on stream restart (not deleting/creating event handle but rather keeping it until stream is closed)
---
r1496 | dmitrykos | 2010-05-13 04:08:45 +1000 (Thu, 13 May 2010)

wasapi:
 - fixed occasional crash-bug which may be caused by a lightweight application that starts stream, checks if stream is running and if not terminates the stream: WASAPI implementation wasn't taking such behavior into account and stream termination (with structure deallocation) could happen during a thread start causing a crash on bad pointer usage
 - fixed Pa_IsStreamActive and similar not correctly reporting stopped stream if that was stopped from within a callback function (playback/capture) by returning paComplete
---
r1495 | dmitrykos | 2010-04-17 17:43:00 +1000 (Sat, 17 Apr 2010)

corrected comments to Int24_To_Int16_Dither
---
r1494 | dmitrykos | 2010-04-17 05:08:00 +1000 (Sat, 17 Apr 2010)

implemented 'Int24_To_Int16_Dither' converter to allow 24-bit audio be played (before was silence for WMME and DirectSound)
---
r1493 | dmitrykos | 2010-04-16 18:31:19 +1000 (Fri, 16 Apr 2010)

wasapi: 
 - new method PaWasapi_GetFramesPerHostBuffer which allows to get number of input/output frames per host (WASAPI) buffer, this method helps to find out maximal values for PaWasapiHostProcessorCallback
 - documentation fixes
---
r1492 | dmitrykos | 2010-04-16 03:44:13 +1000 (Fri, 16 Apr 2010)

wasapi:
 - added calling thread id checks to match Pa_Initialize/Pa_Uninitialize in the same calling thread, if not the case then console warning will be thrown and CoUninitialize will not be called (preferring leak over uninitializing user-side COM)
---
r1491 | dmitrykos | 2010-04-16 03:15:14 +1000 (Fri, 16 Apr 2010)

wasapi: 
 - fixed Windows 7/Server 2008 R2 and Future detection, this fixes minimal/maximal device periods correction
 - added CO_E_NOTINITIALIZED to text errors with action to take for user in case it happens
---
r1490 | dmitrykos | 2010-04-13 07:15:50 +1000 (Tue, 13 Apr 2010)

wasapi:
 - improved device buffer alignment calculation allowing to set as precise device latency as possible
---
r1489 | dmitrykos | 2010-04-13 06:55:34 +1000 (Tue, 13 Apr 2010)

wasapi: 
 - fixed crash in Pa_OpenStream call if WASAPI device did not open or something failed (happened on stream handle cleanup due to double attempt to free same pointer)
 - improved the way WASAPI device is opening, such error as AUDCLNT_E_BUFFER_SIZE_ERROR which comes due to incorrectly small device period is fixed for Vista (and all other, including future) systems as well, latency will be corrected to device minimum (usually 3ms).
 - if suggestedLatency is set to 0 in Pa_OpenStream call then WASAPI device will select device default latency (in Exclusive mode it is 10ms, in Shared 20ms)
 - improved on-screen logging of WASAPI devices available during WASAPI initialization phase
---
r1488 | dmitrykos | 2010-04-12 02:13:46 +1000 (Mon, 12 Apr 2010)

fixed ASIO thiscall resolver for GCC 4.+: CALL_THISCALL_1_DOUBLE was failing due to strong optimization of GCC compiler, added EDX in clobbered register list to warn GCC that resolver uses it explicitly
---
r1487 | dmitrykos | 2010-04-12 02:04:21 +1000 (Mon, 12 Apr 2010)

wasapi: 
 - fixed AUDCLNT_E_INVALID_DEVICE_PERIOD under Windows 7 if latency is set to lower than minimal device period
 - fixed AUDCLNT_E_INVALID_DEVICE_PERIOD under Windows 7 if latency for Exclusive mode is higher than 500ms, for Shared mode higher than 2000ms
---
r1486 | dmitrykos | 2010-04-08 07:07:55 +1000 (Thu, 08 Apr 2010)

excluded x86-64 platform from ASIO 'thiscall' resolver as x64 ABI does not have 'thiscall' calling convention anymore
---
r1485 | dmitrykos | 2010-03-26 10:27:27 +1100 (Fri, 26 Mar 2010)

wasapi: 
 - fixed int24 Mono to Stereo mixer (affects Mono streams starting in Exclusive mode)
pa_converters: 
 - avoid using 64-bit integer math for Int24_To_Float32 and Int24_To_Int32 under x64 Posix platforms (long is 64-bit there), now using explicit PaInt32 type
---
r1484 | dmitrykos | 2010-03-25 06:08:38 +1100 (Thu, 25 Mar 2010)

wasapi: 
 - fixed bug when Exclusive mode was wrongly opening Stereo stream if Mono stream was requested (note: WASAPI device usually does not support Mono in Exclusive mode), resulted in distorted sound
 - implemented workaround for WASAPI limitation - in Exclusive mode Mono stream is not supported: now PA creates internal audio device in Stereo mode, and after callback call Mono data is mixed into Stereo output, this workaround is not supported for Blocking mode. all this is done transparent for user, automatically.
---
r1483 | dmitrykos | 2010-03-18 22:26:47 +1100 (Thu, 18 Mar 2010)

maccore: fixed MacOSX "Snow Leopard" 10.6+ deadlock on sample-rate change submitted by Olivier Tristan
and Stephane Letz with the following details:
"When using paMacCoreChangeDeviceParameters option of PaMacCore_SetupStreamInfo, if the sample rate used in PortAudio do not match the one on the hardware, it automatically switches the hardware samplerate. This functionality stopped working on 10.6 and was blocking the application when trying to change the hardware samplerate (infinite wait) It now works fine on 10.6 as it used to on previous OSX version."

---
r1482 | dmitrykos | 2010-03-17 21:37:29 +1100 (Wed, 17 Mar 2010)

wasapi: small corrections to improve CoInitialize/CoUninitialize sequence (taken from DS implementation)
---
r1481 | dmitrykos | 2010-03-16 23:23:13 +1100 (Tue, 16 Mar 2010)

updated 'configure' file, many thanks to Stelios Bounanos for generating it
---
r1480 | dmitrykos | 2010-03-15 04:25:48 +1100 (Mon, 15 Mar 2010)

wasapi: removed excessive argument checks in stream management functions
---
r1479 | dmitrykos | 2010-03-14 06:13:06 +1100 (Sun, 14 Mar 2010)

wasapi: improved parameter checks for blocking API
---
r1478 | dmitrykos | 2010-03-14 05:53:40 +1100 (Sun, 14 Mar 2010)

wasapi: fixed extension functions: PaWasapi_GetDeviceDefaultFormat / PaWasapi_GetDeviceRole - device index was misinterpreted and as a result returning value was mismatched
---
r1477 | dmitrykos | 2010-03-11 08:47:01 +1100 (Thu, 11 Mar 2010)

implemented optional log output to Visual Studio Output window if PA_ENABLE_MSVC_DEBUG_OUTPUT is defined, this simplifies debugging of external process if Visual Studio is attached to process
---
r1476 | dmitrykos | 2010-03-11 02:03:22 +1100 (Thu, 11 Mar 2010)

wasapi: fixed portaudio.vcproj (wrong filename)
---
r1475 | dmitrykos | 2010-03-10 02:33:20 +1100 (Wed, 10 Mar 2010)

wasapi: finished changes of include names for case-sensitive build env.
---
r1474 | dmitrykos | 2010-03-10 02:27:21 +1100 (Wed, 10 Mar 2010)

wasapi: renaming file
---
r1473 | dmitrykos | 2010-03-10 02:26:45 +1100 (Wed, 10 Mar 2010)

wasapi: renaming file
---
r1472 | dmitrykos | 2010-03-10 02:26:05 +1100 (Wed, 10 Mar 2010)

wasapi: renaming file
---
r1471 | dmitrykos | 2010-03-10 02:25:18 +1100 (Wed, 10 Mar 2010)

wasapi: renaming file
---
r1470 | dmitrykos | 2010-03-10 02:24:25 +1100 (Wed, 10 Mar 2010)

wasapi: renaming file
---
r1469 | dmitrykos | 2010-03-09 23:29:36 +1100 (Tue, 09 Mar 2010)

wasapi: 
- fixed configure.in to compile WASAPI module under MSYS
- fixed include name cases for case-sensitive build environments
- defined LPCGUID for some MinGW compilers which are missing it
- fixed strict-aliasing rules break on line of getting device EndpointFormFactor in case '-Wstrict-aliasing' is specified or corresponding GCC optimization flag is used
---
r1468 | dmitrykos | 2010-03-08 21:33:58 +1100 (Mon, 08 Mar 2010)

wasapi: 
- improved debug log output: function name which returned error will be displayed as well
- fixed non-critical compiler warnings
---
r1467 | dmitrykos | 2010-03-04 22:02:06 +1100 (Thu, 04 Mar 2010)

wasapi: fixed initialization stage of PaWasapi_Initialize() which was returning error if WASAPI wasn't found (for example under Windows XP), this was causing PA's whole initialization to fail completely
---
r1466 | dmitrykos | 2010-03-04 09:57:16 +1100 (Thu, 04 Mar 2010)

+++ wasapi: 
 - converted PA WASAPI module to pure C
 - implemented compilation support for GCC [MinGW(32-bit)/MinGW64(64-bit)] compiler, special notes regarding MinGW compilation are included in 'readme.txt' file
---
r1465 | dmitrykos | 2010-03-03 06:08:13 +1100 (Wed, 03 Mar 2010)

+++ wasapi: corrected PaWasapi_Initialize() behavior in case of OS back-end failure: WASAPI will not be added to a list of available APIs now (instead of throwing error to InitializeHostApis() that causes PA initialization break), error is thrown only on low-memory condition (default behavior)
---
r1464 | dmitrykos | 2010-03-03 04:42:36 +1100 (Wed, 03 Mar 2010)

wasapi: 
- removed dependency from strsafe.h
- fixed crash in InitializeHostApis() if PaWasapi_Initialize() failed due to internal WASAPI error (error code was returned as paNoError in such case)
---
r1463 | dmitrykos | 2010-03-02 23:17:03 +1100 (Tue, 02 Mar 2010)

fixed dummy compilation of pa_win_wasapi.cpp using MinGW(GCC) compilers by adding missing Avrt type
---
r1462 | dmitrykos | 2010-02-26 19:57:44 +1100 (Fri, 26 Feb 2010)

+++ wasapi: Event-driven/Full-Duplex/Exclusive mode will be calling user-provided callbacks simultaneously when both input/output buffers are ready for IO
---
r1461 | rossb | 2010-02-23 03:29:48 +1100 (Tue, 23 Feb 2010)

changed buffer sizes
---
r1460 | rossb | 2010-02-23 03:07:56 +1100 (Tue, 23 Feb 2010)

added test for wmme low level latency params
---
r1459 | dmitrykos | 2010-02-20 23:03:57 +1100 (Sat, 20 Feb 2010)

wasapi: improved paFramesPerBufferUnspecified handling in case device does not provide default period, paInvalidSampleRate will be returned if sampleRate parameter is 0 for Pa_IsFormatSupported/Pa_OpenStream
---
r1458 | dmitrykos | 2010-02-20 22:55:20 +1100 (Sat, 20 Feb 2010)

wasapi: fixed capturing callback not called if paWinWasapiPolling flag specified, or WOW64 workaround is used, same bug was causing div/0 crash
---
r1457 | dmitrykos | 2010-02-19 22:16:01 +1100 (Fri, 19 Feb 2010)

windows WASAPI fixes/improvements:
- fixed dependency of framesPerBuffer parameter in Pa_OpenStream and latency (now only latency setting affects device latency which is correct behavior);
- paFramesPerBufferUnspecified is now supported for Pa_OpenStream;
- sound distortion fixed for Shared mode if framesPerBuffer is lower than device limit and when latency was set to 0;
- fixed timeout for Exclusive mode due to buffer misalignment;
- improved precision of DAC/ADC time for running stream;
- avoided memory leaks on failure of Pa_OpenStream;
- NULL checks on stream pointer for all external methods;
- correct host buffer mode for paWinWasapiPolling mode to deliver fixed number of frames to user space;
- implemented workaround for Vista x64 WOW64 bug if Event-mode is used for Shared mode (due to incorrect Event signaling audio dropouts were happening): will fall back to safe Polling method automatically.
---
r1456 | dmitrykos | 2010-02-17 21:11:40 +1100 (Wed, 17 Feb 2010)

improved PaWasapi_ThreadPriorityBoost by providing enum PaWasapiThreadPriority with explicit thread priority values for convenience. it is possible to override default thread priority setting for Event/Poll-driven modes by specifying new flag paWinWasapiThreadPriority and setting priority value through PaWasapiStreamInfo::threadPriority member.
---
r1455 | dmitrykos | 2010-02-16 22:52:19 +1100 (Tue, 16 Feb 2010)

fixed crash on NULL pointer  usage if hostApiSpecificStreamInfo was NULL in Pa_OpenStream method
---
r1454 | dmitrykos | 2010-02-16 22:18:52 +1100 (Tue, 16 Feb 2010)

provided ability not to depend on ksguid.lib when using WDMKS as it may not be provided for x64 SDK by default, define PA_WDMKS_NO_KSGUID_LIB to use static declarations, x64 MSVC project corrected to define PA_WDMKS_NO_KSGUID_LIB for x64 compilations. added WASAPI symbols to portaudio.def.
---
r1453 | dmitrykos | 2010-02-16 20:46:08 +1100 (Tue, 16 Feb 2010)

finished WASAPI implementation:
 - Callback/Blocking interface
 - Playback/Capture
 - Shared/Exclusive mode
to compile you must have installed recent Windows SDK(Vista SDK or higher) and min Visual Studio 2005 SP1. WASAPI is enabled by default, to disable you must define PA_NO_WASAPI prior compilation.
---
r1452 | dmitrykos | 2010-02-11 05:10:18 +1100 (Thu, 11 Feb 2010)

justtesting
---
r1451 | philburk | 2010-02-11 05:05:40 +1100 (Thu, 11 Feb 2010)

justtesting
---
r1450 | rossb | 2010-02-03 11:28:29 +1100 (Wed, 03 Feb 2010)

fix for undefined DirectSoundFullDuplex8 when PAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE wasn't defined. thanks Dmitry
---
r1449 | rossb | 2010-02-02 20:01:13 +1100 (Tue, 02 Feb 2010)

Added code to PortAudio/DirectSound to use DX8 DirectSoundFullDuplexCreate API for full duplex streams where available. Define PAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE in your project to enable this feature.
---
r1448 | rossb | 2010-01-25 00:17:31 +1100 (Mon, 25 Jan 2010)

implemented paPrimeOutputBuffersUsingStreamCallback for DirectSound (previously this was the default). invoke some buffer reset code to from StartStream (actually ClearOutputBuffer) instead of OpenStream which should give cleaner startup behavior if the stream is started and stopped multiple times. fixed leaks under error in InitOutputBuffer and fixed leak of primary buffer (previously was never released)
---
r1447 | rossb | 2010-01-24 23:35:36 +1100 (Sun, 24 Jan 2010)

reset oscillator phase at start of each test cycle so that the onsets sound the same
---
r1446 | rossb | 2010-01-24 23:27:31 +1100 (Sun, 24 Jan 2010)

removed hardwired device number from previous commit
---
r1445 | rossb | 2010-01-24 23:09:34 +1100 (Sun, 24 Jan 2010)

DirectSound don't crash when starting a blocking io (non-callback) stream. blocking io still not implemented though.
---
r1444 | rossb | 2010-01-24 22:48:06 +1100 (Sun, 24 Jan 2010)

added test case to patest_stop_playout.c which catches issues with host buffers looping/not being cleared if the callback returns paComplete
---
r1443 | rossb | 2010-01-24 22:42:56 +1100 (Sun, 24 Jan 2010)

reworked DirectSound stream completion to correctly flush the buffer processor and zero DS buffers when the callback returns paComplete or paAbort. resolves ticket #86. use test patest_stop_playout.c to verify.
---
r1442 | rossb | 2010-01-24 20:34:48 +1100 (Sun, 24 Jan 2010)

clean up resources better if DirectSound OpenStream fails
---
r1441 | rossb | 2010-01-24 20:21:50 +1100 (Sun, 24 Jan 2010)

fixes to DirectSound implementation to work in unicode builds
---
r1440 | rossb | 2010-01-24 20:20:23 +1100 (Sun, 24 Jan 2010)

use a win32 Event object (aka condition variable) to signal timer process completio to Pa_StopStream in DirectSound implementation. resolves race condition when stopping direct sounds streams.
---
r1439 | rossb | 2010-01-24 19:42:02 +1100 (Sun, 24 Jan 2010)

added msvc link pragma to require ksguid.lib
---
r1438 | rossb | 2009-12-23 16:35:08 +1100 (Wed, 23 Dec 2009)

made buffer in PaUtil_DebugPrint local rather than static to avoid multithreaded issues
---
r1437 | rossb | 2009-12-10 19:10:08 +1100 (Thu, 10 Dec 2009)

ifdefs for correct windows mobile compilation
---
r1436 | rossb | 2009-12-10 19:09:21 +1100 (Thu, 10 Dec 2009)

added cast to IsDebuggerPresentPtr, fixes compilation of asio on some systems
---
r1435 | bjornroche | 2009-12-10 12:37:02 +1100 (Thu, 10 Dec 2009)

updated configure with a simple run of autoconf. seems to work on mac.
---
r1434 | rossb | 2009-12-09 12:55:50 +1100 (Wed, 09 Dec 2009)

derive ds output channel count from speaker configuration when pnpInterface is unavailable (eg wavemapper). Thanks to Dmitry Kostjuchenko for the patch.
---
r1433 | rossb | 2009-12-09 12:42:59 +1100 (Wed, 09 Dec 2009)

fix for bad x64 DWORD_PTR define
---
r1432 | rossb | 2009-12-09 12:31:44 +1100 (Wed, 09 Dec 2009)

Fixed bug (when PAWIN_USE_WDMKS_DEVICE_INFO is defined) where wmme device channel count would be incorrect for default device resulting in distorted sound if user tries to open device with more channels than device can handle. Thanks to Dmitry Kostjuchenko for the patch.
---
r1431 | rossb | 2009-12-08 20:40:09 +1100 (Tue, 08 Dec 2009)

Update to Makefile.in and Configure.in from Stelios Bounanos: Pretty-print help strings, Support multiple APIs on win32 with mingw, Output a configuration summary at the end, Remove ASIO build configuration from OSX
---
r1430 | rossb | 2009-12-08 20:26:33 +1100 (Tue, 08 Dec 2009)

Patch from Dmitry Kostjuchenko: Fixes x64 issue with mis-casting DWORD_PTRs to DWORDs, support proper conversion of device names in UNICODE builds, use of CreateThread instead of _beginthreadex with cygwin.
---
r1429 | rossb | 2009-12-08 20:17:34 +1100 (Tue, 08 Dec 2009)

added empty memory barrier macros for WINCE thanks to Dmitry Kostjuchenko
---
r1428 | bjornroche | 2009-12-03 04:48:05 +1100 (Thu, 03 Dec 2009)

added and removed dummy property listener as this may be required by OS X 10.6. Also, returned no error on property timeout.
---
r1427 | bjornroche | 2009-12-02 02:58:37 +1100 (Wed, 02 Dec 2009)

cleanup of property change checking and error handling
---
r1426 | bjornroche | 2009-12-02 02:38:55 +1100 (Wed, 02 Dec 2009)

added return char
---
r1425 | bjornroche | 2009-12-02 02:38:08 +1100 (Wed, 02 Dec 2009)

removed some redundant code
---
r1424 | bjornroche | 2009-12-01 08:08:54 +1100 (Tue, 01 Dec 2009)

added new test for hardware samplerate changes. This is mostly targetted to the mac, but could be adapted to other platforms as well.
---
r1423 | bjornroche | 2009-12-01 08:07:43 +1100 (Tue, 01 Dec 2009)

fixes for hardware samplerate changes
---
r1422 | bjornroche | 2009-11-19 08:07:31 +1100 (Thu, 19 Nov 2009)

added assert back as suggested by Dmitry Kostjuchenko
---
r1421 | bjornroche | 2009-11-19 03:09:05 +1100 (Thu, 19 Nov 2009)

fix for ringbuffer problem on 64-bit macs. Also, this should make it possible to migrate away from using the long datatype on pa_ringbuffer.
---
r1420 | bjornroche | 2009-10-23 04:51:07 +1100 (Fri, 23 Oct 2009)

added two includes which should not be necessary but seem to help compiling in snow leopard
---
r1419 | bjornroche | 2009-10-23 04:28:35 +1100 (Fri, 23 Oct 2009)

patch to use mach absolute time on mac OS X since apple advises against gettimeofday in IOProcs. Patch due to Ross Bencina.
---
r1418 | philburk | 2009-10-13 08:00:53 +1100 (Tue, 13 Oct 2009)

Fixed dither for 64-bit targets.

---
r1417 | rossb | 2009-09-09 22:48:17 +1000 (Wed, 09 Sep 2009)

added instructions for building without ASIO support to the msvc readme
---
r1416 | rossb | 2009-06-17 02:12:41 +1000 (Wed, 17 Jun 2009)

removed reaper asio driver blacklisting
---
r1415 | aknudsen | 2009-06-04 04:57:56 +1000 (Thu, 04 Jun 2009)

Fix latency calculation in PA ALSA

---
r1414 | aknudsen | 2009-05-25 03:02:10 +1000 (Mon, 25 May 2009)

Add PA ALSA extension to allow setting number of retries when busy

---
r1413 | aknudsen | 2009-05-25 03:00:36 +1000 (Mon, 25 May 2009)

Clarify hostapi ordering somewhat

---
r1412 | aknudsen | 2009-05-25 02:54:22 +1000 (Mon, 25 May 2009)

Apply Kevin Kofler's non-mmap patch

---
r1411 | rossb | 2009-05-15 00:37:37 +1000 (Fri, 15 May 2009)

fix for half duplex and build issues from Toni Wilen.
---
r1410 | rossb | 2009-04-07 20:08:48 +1000 (Tue, 07 Apr 2009)

added pragma to autolink libwinmm with msvc to get timeGetTime symbol when only using ASIO. thanks Yann
---
r1409 | davidv | 2009-04-05 06:04:53 +1000 (Sun, 05 Apr 2009)

fixed a bug in WAVEFORMATEX casts, and warnings on sprintf
---
r1408 | rossb | 2009-03-14 03:41:39 +1100 (Sat, 14 Mar 2009)

fixed inputBufferAdcTime calculation for AdaptingInputOnlyProcess. patch from Yann.
---
r1407 | rossb | 2009-03-14 03:31:28 +1100 (Sat, 14 Mar 2009)

fixed bug in asio blocking i/o stream initialization which would cause crash (bad ptr). enabled timeout code in read/writestream. patch from sven fischer
---
r1406 | rossb | 2009-03-08 19:15:50 +1100 (Sun, 08 Mar 2009)

added notes to pa_test_ac3.c that the test stream file must include the correct spdif preamble on every ac3 frame
---
r1405 | rossb | 2009-03-08 19:10:55 +1100 (Sun, 08 Mar 2009)

always disable wmme clip and dither if an spdif passthrough wave format is requested
---
r1404 | rossb | 2009-03-08 18:15:03 +1100 (Sun, 08 Mar 2009)

minor code logic cleanup
---
r1403 | rossb | 2009-01-29 18:33:04 +1100 (Thu, 29 Jan 2009)

added patest_wmme_ac3.cp test for wmme ac3 spdif passthrough
---
r1402 | rossb | 2009-01-29 17:28:30 +1100 (Thu, 29 Jan 2009)

wmme host api: take account of paWinMmeWaveFormatDolbyAc3Spdif and paWinMmeWaveFormatWmaSpdif flags in Pa_IsFormatSupported
---
r1401 | rossb | 2009-01-21 23:07:32 +1100 (Wed, 21 Jan 2009)

initial support for ac3+wma spdif passthrough for pa_win_wmme. see flags in pa_win_wmme.h. flags currently work for OpenStream but are ignored for IsFormatSupported
---
r1400 | rossb | 2009-01-21 21:20:42 +1100 (Wed, 21 Jan 2009)

doccomment for PaAsio_SetStreamSampleRate()
---
r1399 | rossb | 2009-01-05 20:08:44 +1100 (Mon, 05 Jan 2009)

factored asio sample rate setting code into separate functions. added  PaAsio_SetStreamSampleRate() function.
---
r1398 | rossb | 2009-01-05 19:59:14 +1100 (Mon, 05 Jan 2009)

cleaned up logic related to theAsioStream singleton pointer (now gets set in OpenStream and cleared in CloseStream. added callback-completion waiting to StopStream (was only in AbortStream before). cleaned up isStopped/isActive logic
---
r1397 | rossb | 2009-01-04 19:28:42 +1100 (Sun, 04 Jan 2009)

 cleanup: moved blocking stream asio callback function next to other blocking related code
---
r1396 | philburk | 2008-11-04 06:31:30 +1100 (Tue, 04 Nov 2008)

remove extra parameter from debug statement to prevent pointer error
---
r1395 | bjornroche | 2008-10-25 01:10:04 +1100 (Sat, 25 Oct 2008)

fixed bug as suggested by Michael allen. This fixes issues with blocking IO on the mac when using different number of channels for input and output.
---
r1394 | gordon_gidluck | 2008-10-06 02:15:34 +1100 (Mon, 06 Oct 2008)

ticket#84
---
r1393 | gordon_gidluck | 2008-10-06 02:15:15 +1100 (Mon, 06 Oct 2008)

ticket#84
---
r1392 | gordon_gidluck | 2008-10-06 02:14:25 +1100 (Mon, 06 Oct 2008)

ticket #84. Fix for Cygwin. Added a #define called CREATE_THREAD. Cygwin will call CreateThread, whereas other dev environments will generate code to call _beginthreadex. endthreadex was handled in the same way.
---
r1391 | gordon_gidluck | 2008-09-15 01:24:58 +1000 (Mon, 15 Sep 2008)

ticket#84. Ran into a problem with conversion from CreateFile to _beginthreadex. Changing it back for now.
---
r1390 | gordon_gidluck | 2008-09-15 00:29:34 +1000 (Mon, 15 Sep 2008)

change CreateThread to _beginthreadex (related to ticket #84)
---
r1389 | gordon_gidluck | 2008-09-15 00:27:40 +1000 (Mon, 15 Sep 2008)

changed CreateThread to _beginthreadex and ExitThread to _endthreadex (related to ticket #84)
---
r1388 | gordon_gidluck | 2008-09-15 00:18:17 +1000 (Mon, 15 Sep 2008)

change CreateThread to _beginthreadex (see ticket #84)
---
r1387 | philburk | 2008-06-29 04:28:07 +1000 (Sun, 29 Jun 2008)

Add __TIME__ to version text.
---
r1386 | philburk | 2008-06-29 04:27:34 +1000 (Sun, 29 Jun 2008)

Supports multiple threads using ASIO by adding CoInitialize(0) and CoUninitialize() calls.
---
r1385 | aknudsen | 2008-06-06 07:13:54 +1000 (Fri, 06 Jun 2008)

OSS: clear trigger direction bits at correct time

---
r1384 | rossb | 2008-05-15 14:35:30 +1000 (Thu, 15 May 2008) | 1 line

always use __vsnprintf with MSC
---
r1383 | bjornroche | 2008-05-14 05:10:54 +1000 (Wed, 14 May 2008)

removed obsolete darwin compiling instructions
---
r1382 | philburk | 2008-05-14 02:31:34 +1000 (Wed, 14 May 2008)

tweak svn test

---
r1381 | aknudsen | 2008-03-31 08:02:09 +1100 (Mon, 31 Mar 2008)

Order Unix host api initializers depending on whether we're on Linux
---
r1380 | aknudsen | 2008-03-26 07:21:35 +1100 (Wed, 26 Mar 2008)

Avoid warnings about unused labels
---
r1379 | bjornroche | 2008-03-21 01:24:39 +1100 (Fri, 21 Mar 2008)

moved trunk into place
---
r1377 | bjornroche | 2008-03-21 01:18:47 +1100 (Fri, 21 Mar 2008)

moved trunk out of way. should disable accidental commits
---
r1374 | aknudsen | 2008-03-19 01:55:04 +1100 (Wed, 19 Mar 2008)

Choose ALSA before OSS on Linux
---
r1373 | rossb | 2008-03-12 16:24:55 +1100 (Wed, 12 Mar 2008)

a test to test all sample format converters in pa_converters.c step towards resolving ticket #35
---
r1372 | bjornroche | 2008-03-12 02:20:38 +1100 (Wed, 12 Mar 2008)

added FIXME for ringbuffer element size in Core Audio
---
r1371 | bjornroche | 2008-03-12 01:27:26 +1100 (Wed, 12 Mar 2008)

fixed uninitialized variable warning in patest_prime.c
---
r1370 | jpgrayson | 2008-03-07 04:14:06 +1100 (Fri, 07 Mar 2008)

Commit new configure that is up-to-date with latest changes to configure.in (asio build fixes).

---
r1369 | jpgrayson | 2008-03-07 04:10:28 +1100 (Fri, 07 Mar 2008)

Fix line endings.
Touch up other whitespace.

---
r1368 | rossb | 2008-03-01 11:38:27 +1100 (Sat, 01 Mar 2008)

patch from magnus jonsson to print error instead of crash in tests when there is no default input (or output) device. changes to paqa_errs are related to ticket #61 
---
r1367 | rossb | 2008-03-01 10:45:23 +1100 (Sat, 01 Mar 2008)

added pa_ringbuffer to portaudio.dsp (VC6 project) for pa_asio
---
r1366 | rossb | 2008-03-01 10:39:43 +1100 (Sat, 01 Mar 2008)

msvc memory barrier intrinsics from peter grayson
---
r1365 | rossb | 2008-03-01 10:29:29 +1100 (Sat, 01 Mar 2008)

added pa_ringbuffer to portaudio.vcproj for pa_asio
---
r1364 | rossb | 2008-03-01 10:23:16 +1100 (Sat, 01 Mar 2008)

added pa_ringbuffer to configure.in for pa_asio
---
r1363 | rossb | 2008-02-29 19:59:47 +1100 (Fri, 29 Feb 2008)

Blocking i/o implementation by Sven Fischer. adds pa_asio dependency on pa_ringbuffer.c. Added i386 memory barriers for MSVC and BORLAND
---
r1362 | aknudsen | 2008-02-29 08:43:57 +1100 (Fri, 29 Feb 2008)

Ensure stream validity in PaAlsa_GetStream*Card
---
r1361 | aknudsen | 2008-02-29 08:35:22 +1100 (Fri, 29 Feb 2008)

Fixed bug in SCons setup

---
r1360 | jpgrayson | 2008-02-24 06:10:38 +1100 (Sun, 24 Feb 2008)

Fix (or at least make less grossly broken) asio build for Mac and Windows.

---
r1359 | rossb | 2008-02-23 20:46:25 +1100 (Sat, 23 Feb 2008)

corrected README
---
r1358 | jpgrayson | 2008-02-23 07:48:22 +1100 (Sat, 23 Feb 2008)

- Small fixes to build system.
-- Fix some typos in configure.in affecting Mac ASIO build and C++ binding builds.
-- Remove unused LT_RELEASE variable from configure.in and Makefile.in.
-- Split really long PA_LDFLAGS assignment.
-- Substitute make built-in $(RM) for "rm -f".
-- Use variable for lib-stamp command; this reduces output noise at make-time.
-- Use simple variable expansion when assigning OBJS.

---
r1357 | rossb | 2008-02-22 18:58:10 +1100 (Fri, 22 Feb 2008)

fix for make uninstall breakage from pete ross
---
r1356 | rossb | 2008-02-22 16:35:29 +1100 (Fri, 22 Feb 2008)

patch from Eliot Blennerhassett to use new stream read write functions that first appeared in HPI version 3.05.05. resolves ticket #51
---
r1355 | jpgrayson | 2008-02-22 07:51:22 +1100 (Fri, 22 Feb 2008)

- Apply patch to adds NetBSD support to scons build.
-- Thanks to Jorge Maciá.

---
r1354 | jpgrayson | 2008-02-22 07:42:43 +1100 (Fri, 22 Feb 2008)

Modify scons build system to now work on MacOSX (darwin). Thanks Jorge Maciá.

---
r1353 | jpgrayson | 2008-02-22 07:34:00 +1100 (Fri, 22 Feb 2008)

- Applied initial part of darwin build fix patch from Jorge Maciá.
-- Move mac-specific hostapi stuff from pa_mac_hostapis.c into more generic pa_unix_hostapis.c.
-- Remove deprecated pa_mac_hostapis.c.
-- Update configure script to use pa_unix_hostapis.c for darwin builds.

---
r1352 | jpgrayson | 2008-02-22 03:42:04 +1100 (Fri, 22 Feb 2008)

Support Sun's cc compiler on solaris. Thanks Pete Ross.

---
r1351 | jpgrayson | 2008-02-22 03:40:18 +1100 (Fri, 22 Feb 2008)

More robust make recursion. Thanks Pete Ross.

---
r1350 | jpgrayson | 2008-02-22 03:08:28 +1100 (Fri, 22 Feb 2008)

- Partial patch for NetBSD support
-- Add configure-time test for libossaudio library.

---
r1349 | jpgrayson | 2008-02-22 03:07:31 +1100 (Fri, 22 Feb 2008)

- Partial patch for NetBSD support.
-- Change DEVICE_NAME_BASE when building for NetBSD.
-- Only use SNDCTL_DSP_GETODELAY ioctl() if it is available.

---
r1348 | rossb | 2008-02-21 16:31:26 +1100 (Thu, 21 Feb 2008)

cosmetic cleanups to bracket placement in pa_asio.c
---
r1347 | rossb | 2008-02-21 15:54:36 +1100 (Thu, 21 Feb 2008)

more ringbuffer comment docs and cleanups from Sven Fischer
---
r1346 | rossb | 2008-02-20 21:09:20 +1100 (Wed, 20 Feb 2008)

added support for multi-byte elements in pa_ringbuffer.c/h thanks to Sven Fischer
---
r1345 | rossb | 2008-02-20 15:21:56 +1100 (Wed, 20 Feb 2008)

fixed strings.h -> string.h : thanks Jorge Acereda
---
r1344 | rossb | 2008-02-18 19:36:54 +1100 (Mon, 18 Feb 2008)

fixed bug not clearing global asioDrivers variable introduced in prevous checkin r1343
---
r1343 | rossb | 2008-02-18 19:27:03 +1100 (Mon, 18 Feb 2008)

added explicit management of the asioDrivers instance creation and destruction. this fixes a leak where the asioDrivers instance was never destroyed.
---
r1342 | rossb | 2008-02-15 23:46:45 +1100 (Fri, 15 Feb 2008)

revised ASIO-README.txt
---
r1341 | rossb | 2008-02-15 22:43:43 +1100 (Fri, 15 Feb 2008)

Fixed ticket #3. removed code which zeroed timeInfo->currentTime in the buffer processor.
---
r1340 | rossb | 2008-02-15 19:31:42 +1100 (Fri, 15 Feb 2008)

added casts of result of alloca() for LCC compatibility, thanks Sven Fischer
---
r1339 | rossb | 2008-02-15 18:50:33 +1100 (Fri, 15 Feb 2008)

resolved ticket #4 deleted V19-devel-readme.txt and moved relevant information from it into doxygen comments. improved doxygen documentation. wrapped config flags in pa_trace.h with #ifndef to allow them to be overridden using compiler flags.
---
r1338 | rossb | 2008-02-15 18:50:00 +1100 (Fri, 15 Feb 2008)

replaced bzero() with memset() thanks pete ross
---
r1337 | rossb | 2008-02-15 18:32:09 +1100 (Fri, 15 Feb 2008)

resolved ticket #4 deleted V19-devel-readme.txt and moved relevant information from it into doxygen comments. improved doxygen documentation. wrapped config flags in pa_trace.h with #ifndef to allow them to be overridden using compiler flags.
---
r1336 | rossb | 2008-02-14 03:11:30 +1100 (Thu, 14 Feb 2008)

patch from Peter Ross to fixe cygwin/mingw ./configure builds
---
r1335 | rossb | 2008-02-14 03:00:30 +1100 (Thu, 14 Feb 2008)

added explanatory comment re DS API behavior
---
r1334 | bjornroche | 2008-02-09 03:31:43 +1100 (Sat, 09 Feb 2008)

added check for __ppc__ and __powerpc__ and comment that check for __PPC__ is probably not needed in membar code. Also linebreak. Thanks Peter Grayson.
---
r1333 | rossb | 2008-02-05 18:23:01 +1100 (Tue, 05 Feb 2008)

fix for msvc compiler warning, make literal explicitly single precision float. thanks peter grayson
---
r1332 | aknudsen | 2008-02-05 09:21:35 +1100 (Tue, 05 Feb 2008)

From Peter Grayson: fix pkg-config when using ALSA
---
r1331 | bjornroche | 2008-02-03 06:22:41 +1100 (Sun, 03 Feb 2008

removed memory barriers from section of code that is instead protected by mutex
---
r1330 | bjornroche | 2008-02-03 06:11:55 +1100 (Sun, 03 Feb 2008)

Patch to make universal binary optional. (This is not quite patch 5/5 from Peter Grayson referanced here: http://techweb.rfa.org/pipermail/portaudio/2008-January/008180.html, but rather this modicication: http://techweb.rfa.org/pipermail/portaudio/2008-February/008188.html)
---
r1329 | bjornroche | 2008-02-03 03:08:41 +1100 (Sun, 03 Feb 2008)

simplified/cleaned configure code dealing with mac universal binaries. (patch 4/5 from Peter Grayson: http://techweb.rfa.org/pipermail/portaudio/2008-January/008180.html)
---
r1328 | bjornroche | 2008-02-03 03:04:52 +1100 (Sun, 03 Feb 2008)

Fixed issue that caused CFLAGS from environment to be ignored in default case. also removed unnecessary assignemnt of CXXFLAGS. (patch 3/5 from Peter Grayson: http://techweb.rfa.org/pipermail/portaudio/2008-January/008180.html)
---
r1327 | bjornroche | 2008-02-03 02:58:42 +1100 (Sun, 03 Feb 2008)

Fixed typo that would have caused trouble in Mac OS X 10.4 builds. (patch 2/5 from Peter Grayson: http://techweb.rfa.org/pipermail/portaudio/2008-January/008180.html)
---
r1326 | bjornroche | 2008-02-03 02:54:23 +1100 (Sun, 03 Feb 2008)

Normalized whitespace (including tab removal) and semicolon usage in configure.in. (patch 1/5 from Peter Grayson: http://techweb.rfa.org/pipermail/portaudio/2008-January/008180.html)
---
r1325 | aknudsen | 2008-02-02 04:53:49 +1100 (Sat, 02 Feb 2008)

Patch by Jorge Maciá: Add error descriptions

---
r1324 | bjornroche | 2008-01-27 13:03:30 +1100 (Sun, 27 Jan 2008)

added -Werror flag back to all mac builds. This required slight tweak to pa_endianness to avoid unused variable warning.
---
r1323 | bjornroche | 2008-01-27 12:45:01 +1100 (Sun, 27 Jan 2008)

backout configure change accidentally added in last commit. I may be about to add it back, but it should not have been part of the previous commit.
---
r1322 | bjornroche | 2008-01-27 12:43:09 +1100 (Sun, 27 Jan 2008)

some error checking.
---
r1321 | bjornroche | 2008-01-27 12:27:22 +1100 (Sun, 27 Jan 2008)

fixed potential isues with accessing freed memory in Core Audio code when dealing with xruns
---
r1320 | bjornroche | 2008-01-27 12:03:39 +1100 (Sun, 27 Jan 2008)

separated memory barrier code from ringbuffer for greater modularity
---
r1319 | bjornroche | 2008-01-27 07:32:23 +1100 (Sun, 27 Jan 2008)

added --enable-mac-debug flag to control -g and -DNDEBUG flags in mac build only.
---
r1318 | bjornroche | 2008-01-27 06:18:29 +1100 (Sun, 27 Jan 2008)

tweaked handling of xruns in core audio slightly. should be cleaner this way
---
r1317 | bjornroche | 2008-01-24 08:11:48 +1100 (Thu, 24 Jan 2008)

added necessary include file to pa_mac_core_utilities.c
---
r1316 | bjornroche | 2008-01-24 07:40:38 +1100 (Thu, 24 Jan 2008)

applied patch to fix ticket 64 -- added list of listeners for xruns in CoreAudio.
---
r1315 | bjornroche | 2008-01-23 10:02:18 +1100 (Wed, 23 Jan 2008)

some assertion cleanup
---
r1314 | aknudsen | 2008-01-14 09:25:15 +1100 (Mon, 14 Jan 2008)

Fix call to PaUtil_SetLastHostErrorInfo in OSS
---
r1313 | aknudsen | 2008-01-14 09:22:36 +1100 (Mon, 14 Jan 2008)

Patch from Stelios Bounanos: set host error info more consistently in OSS
---
r1312 | bjornroche | 2008-01-14 03:11:07 +1100 (Mon, 14 Jan 2008)

fix for xrun detection suggested by Jorge Acereda Macia for Core Audio
---
r1311 | bjornroche | 2008-01-13 05:15:22 +1100 (Sun, 13 Jan 2008)

fixed code inside asserts as suggested by Jorge Acerda Macia.
---
r1310 | aknudsen | 2008-01-07 01:30:37 +1100 (Mon, 07 Jan 2008)

OSS: Don't stat before trying to open device
---
r1309 | aknudsen | 2008-01-02 09:02:42 +1100 (Wed, 02 Jan 2008)

Export extensions in shared library also when using autotools .....
---
r1308 | gordon_gidluck | 2007-12-26 13:45:15 +1100 (Wed, 26 Dec 2007)

pa_devs.c changed reference from Pa_CountDevices to Pa_GetDeviceCount
---
r1307 | aknudsen | 2007-12-17 02:40:10 +1100 (Mon, 17 Dec 2007)

Tweaked error handling in PaOssStream_Stop
---

________________________________________________________________________________
Page V19ReleasePlan.md
# V19 Development Status

[ *note* this page needs fixing, the links to the ticket reports are broken right now due to our trac=>assembla migration ]

V19 is the branch of PortAudio which was started some years ago to develop the 2.0 PortAudio API. This branch has been extensively developed and is now considered the main line of development by PortAudio developers. V19 is now developed on the svn trunk (the v19-devel branch is obsolete). The 2.0 API definition has been stable for several years, however some new V19 API features are not yet complete on all platforms/host APIs (most notably blocking i/o is not implemented everywhere, nor is the callback buffer time stamping). Version 2.0 API implementation status is documented here: http://www.portaudio.com/docs/proposals/status.html

In spite of lack of complete support for some version 2.0 features, the current (V19) trunk is used in a number of commercial and open source projects and is considered by most PortAudio developers to be more consistent and usable than the V18-patch branch. It implements a number of features which were not available in the version 1.0 API (support for multiple host-APIs in a single build, support for non-interleaved buffers, blocking i/o with some host APIs).

## V19 Stable Snapshot

A stable V19 snapshot release was made on March 26, 2011. It was designated as milestone:V19-SS2. Its main new feature was support for Windows WASAPI.

## Roadmap to a Final V19 Release

The TRAC report {1} lists open tickets by Milestone.

Currently we are planning a series of milestones on the road to a final V19 release.

- milestone:V19-M1 -- in progress. will include latency parameter related changes, API/ABI changes (see wiki:V19M1ApiChanges), and PortMixer support
- milestone:V19 -- currently assigned all other work planned for inclusion. 

We need to set some more intermediate milestones between M1 and the final release. We plan to review the situation when V19-M1 has been reached.

Support for WaveRT is in the works and may or may not be part of the final V19 depending on when it is completed.


## You Can Help

We'd love to accept contributions from new developers. 

- There are main areas for contributors listed here: http://www.portaudio.com/volunteer.html

- We've proposed some tickets that might be good for new developers here {3}

If you'd like to help out, please join the mailing list and let us know.


## Outstanding Tickets

A list of outstanding tickets sorted by milestone can be viewed here: {1}

A report with tickets to be completed for the next stable snapshot (V19-SS2): http://www.portaudio.com/trac/query?milestone=V19-SS2&col=id&col=summary&col=status&col=type&col=priority&col=milestone&col=component&order=priority

We have set up a work flow that separates out tickets that need review: {15} (LIST-REVIEW tickets) and tickets that are appropriate for new contributors: {3} (STARTER tickets). The bulk of the tickets (the non-LIST-REVIEW, non_STARTER) are listed by milestone on reports {1}, {16} and {17}, and by priority on report {2}.




### Notes from mailing list discussions

'''BUGS:''' Here are some bugs that should be fixed before V-19-Final:

 * Resolve latency issues.

 * Ross wrote: "pa_asio.cpp SelectHostBufferSize() doesn't take the user callback framesPerBuffer into account at all (as discussed recently). It should attempt to conform the ASIO buffer size to the callback framesPerBuffer (or multiples of it). This is pretty nasty since it impacts available CPU time in the audio callback, but we've been living with it forever apparently..."

 * Maybe the ASIO problem Reid reported with InterlockedIncrement_xxx functions in combase.h?

'''DOCUMENTATION: '''Not critical to the coding or operation of PortAudio, various aspects of the documentation need to be completed or updated on an ongoing basis:

 * Update various build tutorials in Wiki.

 * Document non-implemented 2.0 API features. 

 * Document lack of support for Mac 10.3.

'''Platforms and Builds to Test:'''
 * Linux: OSS, ALSA
 * Windows: Windows XP, Vista, Windows 7 with WMME, DS, WASAPI and ASIO
 * Mac OSX 10.4 (ppc32 & x86_32) , 10.5 (ppc32 & x86_32), 10.6 (x86_32 & x86_64)
 * gcc, msvc,...?
 * ./configure
 * msvc build files
 * sconscripts
 * any other build files which should be tested or deleted


We are also discussing possible changes to StructPackingAndApiCallingConvention as a result of ticket #58.


The following tasks will be deferred to V20:

 * Sample rate conversion (depending on the outcome of discussions)

In general, "new features" are unlikely to be included in V19 unless someone contributes a fully functional patch that works on all platforms. The core developers will be focusing on completing outstanding work.


### Task assignment

Please add/remove yourself from this as needed

 * Ross: latency stuff. etc etc
 * Dmitry et al: WASAPI
 * Phil: unit tests
 * Others: quality control, documentation
 * Everyone: list of what isn't implemented

________________________________________________________________________________
Page Tips.md
This section contains a variety of tips for working with PortAudio. Many of these tips were created because they are questions that are frequently asked on the mailing list, and many of them don't relate to PortAudio directly, but rather audio programing in general. For info on getting started with PortAudio, please see the [wiki:TutorialDir/TutorialStart PortAudio Tutorial].

* [[Audio Files|Tips_AudioFiles]]
* [[CPU Usage|Tips_CPUUsage]]
* [[Callbacks|Tips_Callbacks]]
* [[Clicking Noises|Tips_ClickingNoises]]
* [[Threading|Tips_Threading]]
* [[Changing the Volume of Audio|Tips_Volume]]
* [[C++|Tips_CPlusPlus]]

________________________________________________________________________________
Page Tips_AudioFiles.md
# Tips - Audio Files

Reading and writing audio from a file is one of the first things many people want to do with PortAudio. There are generally two considerations to keep in mind:

 * *PortAudio does not provide file I/O*: In order to read and write audio data from or to a file, you must either write the code to parse the file yourself, or use an existing library such as http://www.mega-nerd.com/libsndfile/ libsndfile. Note that at this time, we do not know of any audio file I/O libraries with licenses that are as unrestrictive as the PortAudio license (most are LGPL).

 * *Don't do I/O in the callback*: Because the callback is a sensitive place in most operating systems, it is a good idea to pass the data to another thread for file I/O rather than doing file I/O in the callback. Even if the OS docs say it's safe, doing I/O in the callback can cause unbounded delays which may cause [wiki:tips/ClickingNoises dropouts] in playback. If passing audio data between threads sounds hard to you, you're right; it's not easy. However, the task is made much easier by PortAudio's [wiki:TutorialDir/BlockingReadWrite Blocking IO] interface. (Users of the older version of PortAudio, V18, may be able to take advantage of the PABLIO interface). Because the blocking interface takes care of transferring audio between threads for you, it is safe to do file I/O in the same thread as your blocking I/O calls.

________________________________________________________________________________
Page Tips_CPUUsage.md
# Tips - CPU Usage

In many applications, it is important to keep the CPU usage to a minimum. Minimizing CPU usage may conflict with other objectives, such as minimizing latency, so it is up to you to decide which of these suggestions to use.

Here are some tips for things that might improve CPU performance:

 * *Use a high latency*: Try using a large latency, which keeps lots of audio data buffered, so that the OS doesn't need to constantly switch your audio app in and out of context. Of course, using too high a latency might cause cache misses, so you'll have to experiment to see what's best for your app.

 * *Use a large buffer size*: If you are using small buffer sizes, try something larger. Most platforms do well with something in the 128-1024 range, and powers of two usually work well. Often, using paFramesPerBufferUnspecified will result in both good CPU performance and low latency, though this depends on the platform.

 * *Try platform specific flags*: Some platforms offer special include files that offer platform specific features. For example, on Mac OS X, you can use the functions and constants in pa_mac_core.h to adjust sample-rate conversion settings and other things.

________________________________________________________________________________
Page Tips_Callbacks.md
# Tips - Callbacks

## What is permissible in a PortAudio callback function?

(This page is a summary of discussions from the mailing list.)

Audio callbacks are often executed at a very high priority. In general the only things that should be happening in the callback routine are math and data movement. One should avoid:

* memory allocation
* file or device I/O
* crossing language boundaries such as calling Java or Lua
* calling graphics routines or other OS services

If you need to gather input from MIDI, keyboards, a mouse or files then do that in a foreground thread and feed it into the audio callback via a command or data FIFO. If the audio callback needs to produce any output such as log files or graphics then that information should be put into an in-memory FIFO that is serviced by another foreground thread.

* Avoid acquiring locks which could be held by lower priority threads. This can cause priority inversion. http://en.wikipedia.org/wiki/Priority_inversion

* The execution time of your callback function must be guaranteed to be less than the callback framesPerBuffer duration. It could become time-unbounded due to acquiring locks (directly or inside OS API calls), waiting for something unbounded (like disk access or graphics card access) or performing computationally unbounded operations such as unbounded garbage collection sweeps, anything significant with time complexity over O(1) and variable working set size.

The above two points are basic principles of real-time programming. Most of the rest of the advice we are giving derives from these two points. Very little third-party code you will encounter on a desktop OS can give you the above guarantees because desktop OSes are generally not real-time OSes. There is plenty of code out there which uses safe O(1) algorithms, bounded time incremental GC, special memory allocators, but you need to research these things and not assume you are using them (you probably aren't) because simplicity and performance trump real-time operation for most desktop OS tasks.

On some platforms (i.e. OS X) Apple has explicitly made stipulations about what you can and can't do in the callback because it runs in a special real-time thread (they're based on what I said above: basically, anything at the BSD level or higher is unsafe, some Mach stuff might be OK). On other platforms, if you set the latency high enough, you might be able to get a way with calling a lot of unkosher stuff -- but if you start up Microsoft Office while you're doing audio you may get a surprise. From a portability point of view, in principle, on a target OS the callback could run in a special IOProc, interrupt or some other context where regular OS calls are not even available.

PortAudio often uses a very high priority thread for the audio callback -- it's usually not appropriate to make some calls on such a thread (forgetting real-time appropriateness) such as GUI drawing, because this will reduce the overall responsiveness of your machine and potentially starve out other tasks.

## Transferring data to/from your application

Transferring data between PortAudio and your application is typically accomplished using a ring buffer. A buffer is set up to hold approximately one-half second of audio data. During the callback function PortAudio reads data from or writes data to this buffer and keeps track of how much data has been read or written. A separate thread containing a timer "wakes up" at intervals of approximately 10 to 100 milliseconds and reads or writes this data from/to disk, performs graphics operations, memory allocation, etc. which involve calls to the operating system. The program pa_ringbuffer.c, available with the PortAudio source code, can be used for this purpose.

If you are simply capturing audio and writing it to disk or reading audio from disk and playing it to a sound card or audio interface, the blocking interface is suitable. If you are also doing low-latency processing or monitoring then you should use the callback interface. In the callback, read or write your data from/to a ring buffer and then use another thread to perform the file I/O.

## Regarding crossing language boundaries such as calling Java or Lua

In general it should be avoided. But, in fact, Lua has a bounded time GC (except in rare circumstances involving huge tables, and that's well documented) so, like the Supercollider language, it could be used in a PortAudio callback so long as you make sure it doesn't violate the points I made above: i.e. avoid calling the OS level memory allocator, file I/O, or doing other things which violate the above in your Lua user functions. (Lua AV used to run audio processing in the callback). That said, running Lua in a PortAudio callback is definitely at the experimental end of the spectrum. 

________________________________________________________________________________
Page Tips_ClickingNoises.md
# Tips - Clicking Noises

If there is a discontinuity in the audio, for example a jump from zero to half the maximum signal level in one sample, you will hear a clicking sound. These discontinuities are commonly caused by one of the following:

 * *Discontinuity in Audio Data*: either the sound file or waveform you are using has a discontinuity, or you've created a discontinuity with some sort of processing. For example, if you change volume suddenly, you may hear a click as the resulting waveform jumps from one value to another. The solution is usually to "ramp" your volume or other processing parameters so that the change is made gradually over several samples, rather than all at once. There are a number of ways to do this, the easiest of which is to just to change the value linearly over the course of, say, 20 to 100 samples. So instead of jumping from a gain coefficient of .1 to .2, you go from .1 to .101 to .102 to ... to .198 to .199 to .2.

 * *Dropouts*: if your software and CPU are unable to provide audio data fast enough for the hardware, the hardware is forced to substitute zeros or other data to fill in the gaps. !PortAudio can detect these dropouts on some platforms, but it does not do so reliably on all platforms. Make sure you have ample CPU power for the processing you are trying to do, and make sure you follow the advice for your platform about latency and threading. Choosing a good buffer size can help a lot, both with keeping CPU usage down and improving reliability of playback. If you are unsure how to set the buffer size, try using paFramesPerBufferUnspecified, and !PortAudio will do it's best to use an optimal (an possibly changing) buffer size.

## Detecting Dropouts

An effective way to detect dropouts is to record or play back 30 seconds to one minute of a low-frequency sine wave (about 100 Hz) and listen on a speaker. Any discontinuity in the sine wave will be readily apparent with a noticeable click in the audio. This has proven to be more effective than listening for dropouts in complex waveforms such as music or speech. The low frequency of the sine wave is fairly easy on the ears.

Note that an extremely loud pop or click can be damaging not only to your speakers, but also your ears, so keep the volume low while you are writing new software!

________________________________________________________________________________
Page Tips_Threading.md
# Tips - Threading

At the moment, the thread safety of PortAudio is technically unspecified and hence platform/implementation dependent.

 * Calls to open and close streams are definitely not thread safe on any platform. This means that if you plan to open and close streams from more than one thread, you will need to provide a locking mechanism to ensure that you don't open or close streams in different threads at the same time.

 * In general, calls to ReadStream and WriteStream on different streams in different threads are probably safe. That means that if you are doing [wiki:TutorialDir/BlockingReadWrite Blocking I/O], one thread may read and write to one stream, and another thread may read and write to another.

________________________________________________________________________________
Page Tips_Volume.md
# Tips - Changing the Volume of Audio

Audio data can easily be made louder or softer by multiplying each sample by a constant. For example, to make audio half as loud (which corresponds to about 6dB of gain reduction), simply multiply each sample by .5. Note that if you change this value abruptly, you might end up with [[Clicking Noises|Tips_ClickingNoises]].

________________________________________________________________________________
Page Tips_CPlusPlus.md
# Tips - C++

You do not need to use any special bindings to use PortAudio in C++ code. The only difficulty most people have is creating a callback function. The best way to do that is to use a static function, which appears to the compiler a a normal C function, and have the static function call a non-static function. (You can assign a pointer to your class as the userData argument when creating a stream).

For example, your .h file might look like this:

```
class MyPortaudioClass
{
[snip]

int myMemberCallback(const void *input, void *output,
  unsigned long frameCount,
  const PaStreamCallbackTimeInfo* timeInfo,
  PaStreamCallbackFlags statusFlags);

static int myPaCallback(
  const void *input, void *output,
  unsigned long frameCount,
  const PaStreamCallbackTimeInfo* timeInfo,
  PaStreamCallbackFlags statusFlags,
  void *userData )
{
  return ((MyPortaudioClass*)userData)
     ->myMemberCallback(input, output, frameCount, timeInfo, statusFlags);
}

[snip]
};
```

and your .cpp file might look like this:

```
int MyPortaudioClass::myMemberCallback(const void *input, void *output,
  unsigned long frameCount,
  const PaStreamCallbackTimeInfo* timeInfo,
  PaStreamCallbackFlags statusFlags)
{
  // Do what you need (having access to every part of MyPortaudioClass)

  return paContinue;
}
```

Once that's setup, you can open your stream using "this" as your userData:

```
PaError pa_error = Pa_OpenStream(
                    [snip]...
                    &MyPortaudioClass::myPaCallback,      // streamCallback
                    this);   // userData
```

You could also just use a reference to your class in your static function like (make sure the static function is a member of the class so
that you have access to "private" declared variables):

```
MyPortaudioClass* pThis = (MyPortaudioClass*)userData;
```

but this adds some complexity to the code.

This topic is covered on many C++ web sites, so try googling for the following terms: function pointer C++ static


Thanks to Robert Bielik for the sample code.

________________________________________________________________________________
Page TestStatus.md
# Current Status of PortAudio Tests

Here are the results of the PortAudio Test Suite on various platforms. Please see the [[Test Plan|TestPlan ]].

The core Test Suite consists of the following tests. They are placed in the "bin" directory when built using 'make':

* paloopback
* paqa_errs
* patest_multi_sine
* patest_leftright
* patest_record
* patest_stop_playout
* patest_wire
* patest_write_sine

## Last Result by Platform

For status, please use:
* "pass" if all tests pass.
* "FAIL" if any tests fail. List failing tests. Assume any test not listed has passed.

When you add a test result, please copy the old result to an Archive table below.

| OS | Device | API | Status | Failures | Test Date | Revision | Tester |
| --- | --- | --- | --- | --- | --- | --- | --- |
| Mac 10.6 | Built-In | Core Audio | FAIL | pops in paloopback | 2011-02-26 | 1609 | Phil Burk |
| Mac 10.6 | Firewire | Core Audio | ? |  |  |  |  |
| Linux | Built-In | ALSA | FAIL | massive pops in paloopback, missing blip in patest_stop_playout | 2011-03-02 | 1626 | Phil Burk |
| Linux | USB | ALSA | ? |  |  |  |  |
| Linux | Firewire | ALSA | ? |  |  |  |  |
| Windows XP | Built-In | WMME | ? |  |  |  |  |
| Windows XP | USB | ASIO | ? |  |  |  |  |
| Windows XP | Firewire | ASIO | ? |  |  |  |  |
| Windows 7 | Built-In | WMME | ? |  |  |  |  |
| Windows 7 | USB | ASIO | ? |  |  |  |  |
| Windows 7 | Firewire | ASIO | ? |  |  |  |  |

## Archive of Test Results

Please put newest results first.

### Macintosh

| OS | Device | API | Status | Failures | Test Date | Revision | Tester |
| --- | --- | --- | --- | --- | --- | --- | --- |


### Unix

| OS | Device | API | Status | Failures | Test Date | Revision | Tester |
| --- | --- | --- | --- | --- | --- | --- | --- |
| Linux | Built-In | ALSA | FAIL | massive pops in paloopback, missing blip in patest_stop_playout | 2011-03-02 | 1626 | Phil Burk |

### Windows

| OS | Device | API | Status | Failures | Test Date | Revision | Tester |
| --- | --- | --- | --- | --- | --- | --- | --- |

________________________________________________________________________________
Page TestPlan.md
# Test Plan and QA Strategy for PortAudio

Our goal is to have a set of tests that can be used to quickly verify PortAudio on multiple platforms.

Please see our [[test status for each platform|TestStatus current]].

We have two kinds of tests.

* Self Checking Unit Tests - These do not require a human to verify the results.

* Listening Tests - These require a human to run a program and listen to the results. We are converting these to unit tests.

We recommend that developers periodically run the Self Checking Unit Tests and a few selected Listening Tests before checking in changes to PortAudio.

## Self Checking Unit Tests

These tests can be run from the command line. They have a return code of zero if they pass, non-zero if they fail. This allows them to be run as part of an automated test suite.

*qa/paqa_errs.c* - This test deliberately generates errors then verifies that the appropriate error message is returned.

*qa/paqa_devs.c* - This test tries to output audio using many combinations of device, numChannels, format, interleave, etc.

*qa/paqa_latency.c* - This test verifies that the default latencies for each device are non-zero, and that suggestedLatency is honored.

*Loopback Test* - This test listens to its own output using a loopback cable. It plays sine waves then analyzes the audio input. It can detect pops, noise and phase errors. The loopback tests will ultimately be able to replace most of the Listening Tests. The loopback test can be built on Linux and Mac using "make loopback".

Please see this file for loopback instructions: http://www.assembla.com/code/portaudio/subversion/nodes/portaudio/trunk/qa/loopback/README.txt

## Listening Tests

We highly recommend that the following tests and examples be run before checking in changes to portaudio.

* examples/pa_devs.c - List the available devices and host APIs. Please verify that it seems complete and correct.
* examples/paex_sine.c - Plays a sine wave using a callback.
* examples/paex_write_sine.c - Plays a sine wave using a blocking write.
* examples/paex_record.c - The program will ask you to record a few seconds of audio then play it back. You will need a microphone or other audio source.

* test/patest_multi_sine.c - Listen for sine wave with no pops or clicks on every channel. This is a good test for N>2 channel devices.
* test/patest_leftright.c - A tone will be played on the left and right channel. Make sure you can hear both tones.
* test/patest_stop_playout.c - Tests stopping of a stream in various ways.
* test/patest_wire.c - Test full duplex input and output on one stream. You should hear the audio input passed to the output.

A list of additional tests can be found here: http://www.portaudio.com/docs/v19-doxydocs-dev/group__test__src.html

Most of those additional tests are useful and are expected to build and run. But the following tests have problems.

### Broken Build Tests

These tests do not build. They should be reviewed and probably deleted.

* patest_converters.c - Link error with PaUtil_SelectConverter.

### Failing Tests


* patest_in_overflow.c - Good test. But on a fast computer it takes too long to load up the CPU.
* patest_out_underflow.c - Good test. But on a fast computer it has trouble causing underflows.
* patest_clip.c - Test expects over-range sound to wrap and sound nasty. But Mac uses floats at device level so it does its own clipping. It does not sound nasty. It just works.
* patest_latency.c - Does not respond to key presses on Mac.
* patest_prime.c - Latency is never high enough on Mac to hear the difference between primed and non-primed.
* patest_read_write_wire.c - Use blocking read/write in full duplex mode. Fails quickly on Mac with input overflow so I had to disable the error checks. Needs redesign with priming of out output buffers.
* patest_sine_channelmaps.c - No sound heard on Mac.
* patest_stop.c - Sounds does not get cut short on Mac. Test relies on 3 second latency. Not possible on Mac.
* patest_write_sine_nonint.c - Test of blocking write with non-interleaved buffers. Broken on Mac.

### Pointless Tests

These programs are either redundant or unnecessary as tests. We should delete them instead of maintaining them. This is only a partial list.

* patest_pink.c - Nice demonstration of algorithm but not relevant as a PA test.
* patest_ringmix.c - Cute audio hack but pointless.
* patest_toomanysines.c - Redundant because of patest_out_overflow.c

## Platform Specific Tests

### Windows

* patest_dsound_surround.c
* patest_jack_wasapi.c
* patest_mono_asio_channel_select.c
* patest_wmme_ac3.c
* patest_wmme_low_level_latency_params.c
* patest_wmme_surround.c

### Linux

### Macintosh

* patest_sine_channelmaps.c


________________________________________________________________________________
Page StructPackingAndApiCallingConvention.md
# Struct Packing and API Calling Convention

Ticket #58 is a patch requesting that portaudio.h include explicit calling convention and structure packing #pragmas (on Windows). Since PA is cross-platform we need to make a cross-platform decision. This page documents the considerations relating to accepting/modifying/rejecting this patch.

We are discussing this issue in the "[LIST-REVIEW] #58 API calling convention and pack" mailing list thread, started here: http://music.columbia.edu/pipermail/portaudio/2011-February/011534.html

The goal is to definitively choose a position for V19 and beyond.


## Executive Summary

Currently portaudio.h doesn't specify explicit struct packing or calling convention. This means that a DLL or shared library will be built according to prevailing compiler settings and defaults. It also means that a user of the DLL or shared library needs to use the same calling conventions and struct packing settings used when the DLL was built. This is usually OK if the DLL is built by the same developer who uses the DLL, but not ideal if the consumer of the DLL is a third party, especially if the user in a different language or environment where the native C compiler defaults may be unsupported.

There are really two here issues:

1. Choice of whether and how to specify structure packing
2. Choice of whether to specify calling convention


These are addressed separately below.

It has been noted that these are completely separate issues. They are related in that they are both compiler settings that can get out of sync between DLLs and dependent executables, and they would both be configured in portaudio.h


## Known Issues with Current PA Situation

* Ticket #58 notes that for DLLs calling convention and pack needs to be specified in the header file if clients want or need to use different default settings in their projects.

* PA build instructions have previously suggested 4-byte struct alignment flag /Zp4 for making DLLs compatible with some environments (VisualBasic, PureBasic etc). Using this compiler setting creates DLLs that are incompatible with the usual MSVC default 8 byte alignment. Objections have been raised to having struct packing settings (eg /Zp4) in the build instructions and it has been suggested that using #pragma pack(4) in the header files would be preferable. [ NOTE: the build instructions have been revised to suggest /Zp4 only when needed ].

Thomas Blom notes that much of the controversy arises from providing or supporting binary libs:
> What you say seems sensible if we are in the business of providing binary libs.  If instead we officially only offer the source then it would seem people either build everything with compiler defaults, and it works, or people build everything with custom packing, and it works. 

Thus there is a subtext to this discussion that we may provide binary DLLs on Windows in the future.


## Choice of Structure Packing

### Background Reading, facts, options and opinions

Phil writes:
> Very good discussion of packing pragmas, padding and alignment here:
> http://en.wikipedia.org/wiki/Data_structure_alignment

VisualBasic/COM type libraries assumes 4 byte packing. MSVC default packing is 8 bytes. Default on Linux x86 is 4 bytes.

In C there are 4 different mechanisms that can be used to ensure consistent struct packing:
1. Compiler flags: These apply to the whole project and all #included header files where no packing is explicitly specified.
2. #pragma pack() directive: This is compiler-specific but available with MSVC and gcc at least. similar mechanisms are available in other compilers.
3. Manually pad structs with extra fields to ensure alignment.
4. Sort fields by size, largest first

In many (but not all) cases it is possible to make (2), (3) and (4) immune to compiler flags (1). These options are discussed further below.


Rob Bielik notes:
> gcc (as well as MSVC) supports the #pragma pack(push, n) and #pragma pack(pop) directives, which would remove (override) the need for /Zp4 setting.
 

#pragmas can only reduce alignment below compiler settings so #pragma pack(8) is not sufficient to provide compatibility with compilers with /Zp4 set.

Phil notes:
> We could also control alignment by reordering the members in our structures 
> or padding the structures. This might break the binary interface between 
> an application and a DLL. But so will changing structure alignment using 
> pragmas.  Once we do the reordering we will be pretty much immune to 
> compiler settings.

Note that manual padding is only legitimate if the size of all types is known. The PA API currently uses ints (for example), which may be 2, 4, or 8 bytes in size depending on compiler settings. We would need to update the PortAudio API to use types that have known size (ie PaInt32) for this to work.

Peter thinks that using #pragma pack is better than manual padding and notes that Delphi and Lazarus provides the $Align directive for this purpose:
http://www.delphibasics.co.uk/RTL.asp?Name=$Align

Chris and Phil determined that for PureBasic it is possible to manually pad the struct definitions to conform alignment (either on the PA side or the PB side).

Peter, Robert, Michael and Thomas dislike the padding approach, mostly for aesthetic reasons it appears:
>I would not recommend "padding the wholes".

>I think pad members are an ugly way to solve it

>I also consider padding parameters as very ugly and a long term maintainance load

>+1 to Michael.  I think manual padding is a hack.

Regarding manual padding, Phil counters:
> Well. It is kind of a hack. But a common one and somewhat useful. I 
> sometimes call pad members "reserved". Then it looks like I am planning 
> ahead and not just resorting to an ugly hack. My first choice for 
> avoiding alignment problems is to sort the members from big to small. 
> But it may be too late for that in PortAudio.
> 
> Note that these alignment problems are not restricted to foreign 
> language bindings. They can bite you even when calling from a 'C' 
> application to a 'C' DLL.

Note that calling fields "reserved" raises the issue of whether they are required to be set to zero and whether we do anticipate using them in the future or whether they are guaranteed to remain unused (and hence OK to contain garbage.


Thomas adds some analysis:
> There is a tradeoff in simplicity/transparency of implementation and requiring a user to do some amount of work to use the library.  If I were designing such a library, I'd opt for the simplest implementation, making it easiest to understand, working "out of the box" for the most common use-cases, and require that external bindings with special requirements use the facilities of the external language/platform to satisfy those requirements.  For me this would mean no pragmas and no manual padding, unless their are performance reasons even in the common use cases to do so.
>
> This probably depends a lot on how portable the lib aims to be.  I am amused when I see patches added to libs to support "modula-2 on my amiga 1000" ... this is obviously really cool in one sense (that example is actually from my own programming past) but is the kind of thing that makes portable libraries choc-full of #ifdef bs that make them seem way more complicated than they actually are, which has it's own set of problems in terms of maintenance by open-source contributors etc...  
> I suppose PortAudio in particular may be precisely the kind of library that folks with ancient hardware/software want to use in the realm of "retro" music synthesis etc...so my rant may be off base.  But you can always fork PA and mod it yourself if you're going to geek out with your old amiga.  ;)


### Informal Survey of Other Libs

Looking at other libs we would not be alone to leave structure pack unspecified in our header files:

| **library** | **Specifies pragma pack** | **pads/sorts to align data** | **notes** |
| --- | --- | --- | --- |
|GLFW | NO | ? | |
|freetype | NO | ? | |
|freeimage | pragma pack(1) | | |
|libsndfile | NO | ? | (and the win32 lib *is* provided as a binary) |
|ASIO | pragma pack(4) | ? | possibly due to ASIO using COM |
|Lua | NO | ? | |
|TinyXML | NO | ? | |
|Boost | YES | ? | (see config\abi_prefix.h config\abi_suffix.h) |
|mingw /include/*.h | YES | ? | (1,2,4,8 for different files) |
|zlib | NO | NO | (structs also interleave bytes and ints etc) |

Side note: Boost provides a BOOST_DISABLE_ABI_HEADERS macro to turn off enforcing pack.

Ross writes: 
> http://www.zlib.net/DLL_FAQ.txt
> 
> zlib is very widely used (in libpng for example).
> 
> Interestingly zlib doesn't appear to specify any packing in the header 
> files, and their data structures include unsorted fields with layout like 
> this:
> ```
> typedef struct z_stream_s {
>     Bytef    *next_in;  /* next input byte */
>     uInt     avail_in;  /* number of bytes available at next_in */
>     uLong    total_in;  /* total nb of input bytes read so far */
> ```

### Impact

It has been noted that any change to structure packing will break binary compatibility with clients. Some bindings can be updated with a simple change to set alignment. Others may require manual padding.

Reordering fields would break bindings a lot more (they would need to also re-do their struct declarations). Peter called for a version number API to deal with this. Ross noted that struct versioning is due for review under ticket #78.

The following PA structs contain 8 byte doubles that would not be 8-byte aligned with pack(4):

* PaDeviceInfo http://portaudio.com/docs/v19-doxydocs/structPaDeviceInfo.html
* PaStreamInfo http://portaudio.com/docs/v19-doxydocs/structPaStreamInfo.html
* PaStreamParameters http://portaudio.com/docs/v19-doxydocs/structPaStreamParameters.html

Note that structVersion fields are slated for removal under ticket #78 so only PaDeviceInfo may end up needing explicit padding.



### Pros / Cons

| **Pros** | **Cons** |
| --- | --- |
|\2. **Document current status quo (ie canonicalise dominant 'C' platform defaults)** |
| * No source code change. | * Sensitive to user changing compiler settings.  |
| * Don't have to decide on specifics, just use defaults. | * Windows default of pack(8) not directly compatible with some non-C environments. |
||
|\2. **#pragma pack() enforced status quo (ie pack(8) on Windows, pack(4) on Linux x86)** |
| | * pack(8) can be broken by /Zp4 on Windows -- so no real benefit, also risks confusion. |
||
|\2. **#pragma pack(4)** |
| * Makes things clear. | * 8 byte doubles are not perfectly aligned given current struct layouts. |
| * Compatible with VisualBasic, PureBasic etc. |  |
| * Enforces consistency with both Windows and Linux | |
||
|\2. **Manual padding** |
| * Gives tight as possible padding and correct alignment of doubles. | * Requires switching to known size types (e.g. defining PaInt32) to be meaningful on ia64 |
| * Shouldn't require #pragma pack() | * adds extra fields to current structs (won't break binary compatibilty with pack(8) users though. |
| * Compatible with VisualBasic, PureBasic etc. | * ugly. at least 50% of devs think it's a hack. |
| | * if fields are marked "reserved" and are expected to be zero, client code would need to change to init them to zero. |
||
|\2. **Re-sorting fields by size** |
| * doesn't require #pragma pack() | * Guarantees natural alignment. |
| * Compatible with VisualBasic, PureBasic etc.  | * Requires non-C bindings structure definitions to be re-written. |

## Choice of Calling Convention

So far this is a less contentious topic than structure alignment. It also seems more common for calling convention to be specified in library headers.

### Background Reading

On Windows, calling convention not only affects the actual calling convention mechanics, but also how exported function names are "decorated" (ie name mangling rules). Each compiler treats things differently as documented here: http://wyw.dcweb.cn/stdcall.htm

The zlib FAQ provides extensive discussion of the calling convention choices they made: http://www.zlib.net/DLL_FAQ.txt

Zlib provides multiple options for calling convention. By default it 
specifies none ( _ _cedecl on Windows) but provides an option to use WINAPI 
(_ _stdcall). The advantage of using the default is that clients don't need 
to specify a specific calling convention with their callback functions. The link makes a good argument that _ _cdecl should be/is the default for 'C' standard libraries. It means that user defined callbacks will just work. See 
their FAQ for further argument.

Using default (_ _cdecl) means you can't use their official zlib DLL with 
VisualBasic.


Ross notes:
> In addition to calling convention I was also thinking that on Windows we 
> want to give the option to use _ _declspec(dllimport) in the header for 
> clients using the dll:
> - http://msdn.microsoft.com/en-us/library/8fskxacy(VS.80).aspx
> - http://msdn.microsoft.com/en-us/library/ys435b3s(VS.80).aspx
> 
> This goes before the return value specification like this:
> 
> _ _declspec( dllimport ) int _ _stdcall Pa_GetVersion( void );
> 
> So the macros would look like either:
> 
> PA_DLL_IMPORT int PA_API_CC Pa_GetVersion( void );
> 
> or as I have seen elsewhere:
> 
> PA_API_FUNC(int) Pa_GetVersion( void );
> 
> e.g. Python's PyAPI_FUNC macro:
> http://svn.python.org/projects/python/branches/release25-maint/Include/pyport.h



________________________________________________________________________________
Page DeveloperGuidelines.md
# Guide to making life easy for everyone

An important aspect of distributed development is having everyone know what everyone else is doing (or not doing). When people only communicate via email, and often only when something goes wrong (a bug report for example), it's hard to keep track of who is doing what, who is planning to do something, who needs help, and so on. The tools PortAudio developers use offer a number of mechanisms to help with this. The main ones are:


 * [The changesets stream](http://www.assembla.com/code/portaudio/subversion/changesets), which lists all recent SVN commits.
 * [The ticket system](https://github.com/PortAudio/portaudio/issues) for tracking development tasks.
 * [Doxygen generated documentation](http://www.portaudio.com/docs/v19-doxydocs/)
 * [The portaudio mailing list](http://www.portaudio.com/contacts.html) for discussions between developers and users.
 * [The PortAudio wiki](https://github.com/PortAudio/portaudio/wiki)
 * [Change proposals](http://www.portaudio.com/docs/proposals/index.html) - more formalised documents for API changes (most recently used for the V19 API update).


## Use SVN responsibly

 * Follow the [[Rules For SVN Committers|RulesForSvnCommitters]]
 * [[Create branches and use them for code review|HowToUseCodeReview]]


## Write meaningful SVN commit messages

If you write meaningful SVN commit messages other people can see what you're working on.


## Add all future tasks to the ticket system

If you think of a task that needs to be done, but you haven't done it yet, or you want someone else to do it, create a new ticket:
https://github.com/PortAudio/portaudio/issues/new If you don't have Ticket admin priveledges email rossb@audiomulch.com and you'll be given some, it's that simple.


## Crossreferencing SVN commits and issue tickets

You can crossreference a ticket in an SVN commit message simply by including the ticket number with a # before it. You can crossreference an svn changeset in a ticket comment by putting the changeset number between square brackets [ [r:{id}] ]. Keep things crossreferenced whenever you can.


## Post patches to the ticket system

If someone sends you a patch, but you can't/won't action it, at least create a new ticket with the patch attached.
https://github.com/PortAudio/portaudio/issues/new


There are a couple of other things that can be done to help us keep track of where each other is up to (what has been done, what hasn't been done, what we're thinking about doing):


## Don't use doxygen @todo comments

We used to have a guideline to use doxygen @todo tags in the code. Don't do that. If you find things in the code that need doing, please create a ticket.

## Don't forget the style guide

There are PortAudio coding style guidelines, they live here:

[[Implementation Style Guidelines|ImplementationStyleGuidelines]]

________________________________________________________________________________
Page V19ConvertersStatus.md
# Converters Status

The following output was generated by /test/patest_converters.c on 12/3/2007. Note that the dBfs values should be taken with a grain of salt because the asymmetrical scaling used by PortAudio changes the values from those expected.

The most important thing to note is that those conversions marked with X are not implemented at all. The others seem to be working more-or-less OK although some analysis should be performed to understand the noise floor deviation from expected values.


## Sine wave in, something out

### flags = paNoFlag

#### Output contains non-zero data
Key: . - pass, X - fail

```
in|  out:      f32     i32     i24     i16      i8     ui8   
f32             .       .       .       .       .       X   
i32             .       .       X       .       .       X   
i24             .       .       .       X       X       X   
i16             .       .       .       .       X       X   
 i8             .       .       .       .       .       .   
ui8             .       .       .       .       .       .   
```

#### Combined dynamic range (src->dest->float32)
Key: Noise amplitude in dBfs, X - fail (either above failed or dest->float32 failed)

```
in|  out:      f32     i32     i24     i16      i8     ui8   
 f32          -1.$  -180.6  -138.5   -79.5   -31.5     X   
 i32        -144.5  -144.5     X     -86.1   -42.1     X   
 i24        -138.5  -138.5  -138.5     X       X       X   
 i16         -84.8   -84.8   -84.8   -84.8     X       X   
  i8         -36.6   -36.6   -36.6   -36.6   -36.6   -36.6 
 ui8         -36.4   -36.4   -36.4   -36.4   -36.4   -36.4 
```

### flags = paClipOff

#### Output contains non-zero data
Key: . - pass, X - fail

```
in|  out:      f32     i32     i24     i16      i8     ui8   
f32             .       .       .       .       .       X   
i32             .       .       X       .       .       X   
i24             .       .       .       X       X       X   
i16             .       .       .       .       X       X   
 i8             .       .       .       .       .       .   
ui8             .       .       .       .       .       .   
```

#### Combined dynamic range (src->dest->float32)
Key: Noise amplitude in dBfs, X - fail (either above failed or dest->float32 failed)

```
in|  out:      f32     i32     i24     i16      i8     ui8   
 f32          -1.$  -180.6  -138.5   -80.1   -31.3     X   
 i32        -144.5  -144.5     X     -85.4   -42.1     X   
 i24        -138.5  -138.5  -138.5     X       X       X   
 i16         -84.8   -84.8   -84.8   -84.8     X       X   
  i8         -36.6   -36.6   -36.6   -36.6   -36.6   -36.6 
 ui8         -36.4   -36.4   -36.4   -36.4   -36.4   -36.4 
```

### flags = paDitherOff

#### Output contains non-zero data
Key: . - pass, X - fail

```
in|  out:      f32     i32     i24     i16      i8     ui8   
f32             .       .       .       .       .       X   
i32             .       .       .       .       .       .   
i24             .       .       .       .       .       .   
i16             .       .       .       .       .       .   
 i8             .       .       .       .       .       .   
ui8             .       .       .       .       .       .   
```

#### Combined dynamic range (src->dest->float32)
Key: Noise amplitude in dBfs, X - fail (either above failed or dest->float32 failed)

```
in|  out:      f32     i32     i24     i16      i8     ui8   
 f32          -1.$  -187.2  -138.7   -84.8   -36.6     X   
 i32        -144.5  -144.5  -138.5   -90.3   -42.1   -42.1 
 i24        -138.5  -138.5  -138.5   -90.3   -42.1   -42.1 
 i16         -84.8   -84.8   -84.8   -84.8   -42.1   -42.1 
  i8         -36.6   -36.6   -36.6   -36.6   -36.6   -36.6 
 ui8         -36.4   -36.4   -36.4   -36.4   -36.4   -36.4 
```

### flags = paClipOff | paDitherOff

#### Output contains non-zero data
Key: . - pass, X - fail

```
in|  out:      f32     i32     i24     i16      i8     ui8   
f32             .       .       .       .       .       .   
i32             .       .       .       .       .       .   
i24             .       .       .       .       .       .   
i16             .       .       .       .       .       .   
 i8             .       .       .       .       .       .   
ui8             .       .       .       .       .       .   
```

#### Combined dynamic range (src->dest->float32)
Key: Noise amplitude in dBfs, X - fail (either above failed or dest->float32 failed)

```
in|  out:      f32     i32     i24     i16      i8     ui8   
 f32          -1.$  -187.2  -138.7   -84.8   -36.6   -36.6 
 i32        -144.5  -144.5  -138.5   -90.3   -42.1   -42.1 
 i24        -138.5  -138.5  -138.5   -90.3   -42.1   -42.1 
 i16         -84.8   -84.8   -84.8   -84.8   -42.1   -42.1 
  i8         -36.6   -36.6   -36.6   -36.6   -36.6   -36.6 
 ui8         -36.4   -36.4   -36.4   -36.4   -36.4   -36.4 
```

________________________________________________________________________________
Page V19ApiChanges.md
# Changes to the public PortAudio API for V19-M1 development milestone

The V19-M1 development milestone (which is now under way) will include a number of minor changes to the public PortAudio API and binary interface. This page documents those changes.

Our intention is to make source-level compatibility API changes in the V19-M1 iteration, ABI changes (breaking binary compatibility) in the V19-M2 iteration and then, after that, to only make internal changes until the final V19 release.

You can review all tickets scheduled for V19-M2 here:
https://github.com/PortAudio/portaudio/issues


## Changes made

* One ASIO-specific function will be renamed:
 . #111 rename PaAsio_GetAvailableLatencyValues => PaAsio_GetAvailableBufferSizes


## Changes planned 

The following public-visible changes are planned during the V19-M2 development iteration:

* The host-specific extension mechanism will be revised, this relates mainly to PortMixer interoperability. See:
 . #169 Portaudio should expose host API specific stream information

* We may break _binary_ compatibility to implement structure alignment clarifications:
 . #58 API calling convention and pack
but also because we will be removing some redundant fields:
 . #172 Remove structVersion field from PaHostApiInfo, PaDeviceInfo and PaStreamInfo

* We will rename one structure field, which will break source compatibility if you are using it:
 . #92 rename PaStreamParameters::hostApiSpecificStreamInfo to hostApiSpecificStreamParameters

* We may change/extend the library version API. This has not yet been discussed in detail:
 . #173 Improved API library version API


See also ticket: #174 Meta ticket: ABI/API changes before V19 final release

________________________________________________________________________________
Page V19Contributors.md
# PortAudio V19 Contributors

Thanks to all these folks for contributing to V19. If you contributed and don't see you name, please add it or ask us to add it!

  * Project Creators
    *  Ross Bencina
    *  Phil Burk
  * ASIO
    *  Stephane Letz <letz _at_ grame dot fr>
  * JACK
    *  Stefan Westerfeld <stefan _at_ space dot twc dot de>
    *  Arve Knudsen <aknuds-1 _at_ broadpark dot no>
    *  Joshua Haberman <joshua _at_ haberman dot com>
  * ALSA (Linux)
    *  Arve Knudsen <aknuds-1 _at_ broadpark dot no>
    *  Joshua Haberman <joshua _at_ haberman dot com>
  * Core Audio (Mac OS X)
    *  Bjorn Roche <bjorn _at_ xowave dot com>
    *  Dominic Mazzoni <dmazzoni _at_ aig dot jpl dot nasa dot gov>
    *  Phil Burk <phil _at_ softsynth dot com>
    *  Darren Gibbs <darreng _at_ mac dot com>
    *  Stephane Letz <letz _at_ grame dot fr>
    *  Greg Pfiel
    *  Gord Peters
    *  Brenton Partridge
    *  Special thanks to [http://www.z-sys.com/ Z Systems] and [http://www.xoaudio.com XO Audio].
  * Sound Manager (Mac OS <10)
    *  Phil Burk <phil _at_ softsynth dot com>
    *  Chris Rolfe
  * SGI (Irix)
    *  Pieter Suurmond <pieter.suurmond _at_ kmt dot hku dot nl>
  * Direct Sound (Windows)
    *  Phil Burk <phil _at_ softsynth dot com>
    *  Robert Marsanyi <robert _at_ mobileer dot com>
  * WASAPI
    *  David Viens <davidv _at_ plogue dot com>
    *  Dmitry Kostjuchenko
  * WDMKS (Windows)
    *  Andrew Baldwin <portaudio _at_ dehabit dot info>
    *  Eric Wachsmann and Flex Radio
    *  Robert Bielik

________________________________________________________________________________
Page Win32AudioBackgroundInfo.md
# Win32 Audio Background Info

From time to time people ask about the reasons PortAudio is implemented the way it is on Windows. This page doesn't try to answer that question, but it does outline some of the non-obvious issues and provides links to more information. Please contribute if you know something that isn't here.

Note that the titles of articles are used as the link text, so if there's a broken link you can try googling for the text in the link name.

Note when reading Microsoft documentation it is sometimes unclear which version(s) of Windows the documentation is referring to. Often information may only apply to specific versions. For example, information about KMixer is not always applicable to Windows Vista and later.

## KMixer and Windows Audio Architecture background

There is a nice discussion of changes to the Windows Audio Architecture under Vista [Creative Labs description of Vista audio architecture](http://forums.creative.com/creativelabs/board/message?board.id=Vista&message.id=1694). This is a good place to start as it reviews the architecture under Windows XP also. Although PortAudio needs to run on more than just the latest versions on Windows, Microsoft's [Audio Device Technologies for Windows](http://www.microsoft.com/whdc/device/audio/default.mspx) page has lots of information about current generation systems. See also the white paper [Microsoft Device Driver Interface for HD Audio](http://www.microsoft.com/whdc/device/audio/HDAudioDDI.mspx)

For a user-level view of WDM and kernel mixer issues check out the Windows Driver Model section of [PC Notes column of Sound on Sound magazine](http://www.soundonsound.com/sos/mar06/articles/pcnotes.htm).

> KMixer introduces a latency of 30 milliseconds into an audio stream. This is usually sufficient to absorb jitter resulting from competition for CPU time with ISRs (interrupt service routines) and other high-priority operations. 
[Windows Driver Kit > Device and Driver Technologies > Design Guide > WDM Audio Support in Different Versions of Windows > Factors Governing Wave-Output Latency > KMixer Latency](http://msdn.microsoft.com/en-us/library/ff537049.aspx)

Microsoft's overview of WAVE_FORMAT_EXTENSIBLE [Multiple Channel Audio Data and WAVE Files](http://www.microsoft.com/whdc/device/audio/multichaud.mspx) is especially relevant for multichannel and high-bit-depth support. See also [The evolution of a data structure - the WAVEFORMAT](http://blogs.msdn.com/larryosterman/archive/2007/10/18/the-evolution-of-a-data-structure-the-waveformat.aspx)

This page discusses that KMixer buffer sizes are 10ms:
> each buffer contains 10 milliseconds of data, the buffer size per IRP is calculated to be approximately 882 bytes:
> (4 bytes)*(22.05 kHz)*(10 milliseconds) = 882 bytes
> (The size cannot be exactly 882 bytes because the buffer contains an integral number of four-byte audio frames.) 
It's not clear if KMixer rounds up or down.
[How KMixer Handles Set-Format Requests](http://msdn.microsoft.com/en-us/library/ff536484(VS.85).aspx)


## Bypassing KMixer on Windows XP using DirectSound hardware pin

>DirectSound streams that feed into hardware mixer pins bypass KMixer and avoid the latency of software mixing in KMixer.
[Overview of DirectSound Hardware Acceleration](http://msdn.microsoft.com/en-us/library/ff537603(VS.85).aspx)

It is unclear whether PortAudio correctly engages hardware mixing where available.

It is unclear whether this feature is available on later versions of Windows, or how common it is on Windows XP.


## Mixing latency, Vista and Later

As discussed in the first comment here [Audio in Windows Vista (2)](http://forums.creative.com/t5/Windows-Vista/Audio-in-Windows-Vista/m-p/302341) Vista introduces a new audio architecture which doesn't use Kmixer. This implies that system level mixer latency is lower on Vista. This has supposedly been improved again on Windows 7:

>In Windows 7 share mode streams run in low-latency mode. The audio engine runs in pull mode with a significant reduction in latency. This is very useful for communication applications that require low audio stream latency for faster streaming.
[What's New for Core Audio APIs in Windows 7](http://msdn.microsoft.com/en-us/library/dd756612(VS.85).aspx)


## WDM/KS

Usually you access audio via high-level APIs such as DirectSound, WMME or WASAPI. WDM/KS is refers to directly accessing kernel audio drivers from user space. WDM is the low level driver model used by all Windows drivers. PortAudio provides a WDM/KS implementation. WDM audio drivers come in three flavours: WaveCyclic, WavePci and WaveRT. WaveRT was introduced in Vista and isn't available in older operating systems.

WDM is the driver model for Windows audio device drivers in current versions of Windows. API's like WMME, DirectSound and WASAPI are implemented on top of WDM/KS (Kernel Streaming) but you can also talk to WDM directly from user space. [WDM Audio Architecture: Basic Concepts](http://www.osronline.com/ddkx/stream/aud-design_4mqv.htm)

WDM WaveCyclic/WavePci "kernel streaming" source code example from Microsoft: [DirectKS Sample Application](http://www.microsoft.com/download/en/details.aspx?id=18989)

WDM WaveRT real-time streaming driver model is described in [A Wave Port Driver for Real-Time Audio Streaming](http://msdn.microsoft.com/en-us/windows/hardware/gg463060). Also has some info about older WaveCyclic/WavePci

## WDM APIs optionally used in PA/WMME and PA/DirectSound

PortAudio can optionally use some WDM facilities to query driver channel count in the DirectSound and WMME implementations. This bypasses the problem that the Kernel Mixer will usually return ((short)-1) as the number of supported channels rather than what the driver reports. To enable this feature make sure PAWIN_USE_WDMKS_DEVICE_INFO is defined in your Makefile or command line parameters.

## WASAPI

Our WASAPI version is working fine now, but does need to implement some workarounds for Windows bugs such as:
[Exclusive mode event-driven render across WOW64 is broken in Vista RTM. All event-driven capture is broken in Vista RTM](http://forums.microsoft.com/MSDN/ShowPost.aspx?PostID=1073607&SiteID=1).

________________________________________________________________________________
Page BufferingLatencyAndTimingImplementationGuidelines.md
# Guidelines for implementing PortAudio buffering, latency and timing

**UNDER CONSTRUCTION**

**DRAFT**

Contributors: Ross Bencina, Phil Burk, Dmitry Kostjuchenko

These guidelines are draft. 
* Input latency implementation details aren't addressed yet
* No explicit consideration of blocking i/o latency
* Everything is subject to change following feedback from the community
* People familiar with individual native audio APIs and host API implementations need to provide feedback on the last section that lists details of each host API.

This document is primarily intended for PortAudio host API implementors. It provides guidance for implementing and interpreting PortAudio latency, timing and buffering parameters and relating these to various host API constructs. Developers using PortAudio may also find the material useful, especially the first section of the document describing the latency and timing API from the user's perspective, and the final section, describing attributes of individual host APIs.

PortAudio latency and timing parameters can be considered from either the perspective of the user or the implementor. We first consider the user model as context for understanding the implementation model. We then consider the implementation model, which supports the user model and unifies PortAudio's behavior across a diverse range of Host API buffering and latency schemes.

## The User Model

### User Model: Latency fields and parameters

PortAudio uses a high-level latency model designed to be usable accross all host APIs. It is based on the principle of specifying latencies in seconds (using double precision floating point values).

The user model employs three types of latency values:
1. **PortAudio reported default high and low latency values**, returned by Pa_GetDeviceInfo() in a PaDeviceInfo struct.
2. **User specified suggested latency parameters** passed to Pa_OpenStream() in PaStreamParameters structs
3. **PortAudio reported actual known latency values** available after a stream has been opened, returned by Pa_GetStreamInfo() in a PaStreamInfo struct.

(1) Default latency values are provided as hints from the host API to the user about appropriate Pa_OpenStream() suggestedLatency parameters to use for particular use cases. The meaning of "default" here is as an appropriate starting value for a user interface slider that the end-user may then tune for best performance on their particular system. The definition of PortAudio supplied defaults is necessarily vague since the final latency may depend on Pa_OpenStream() parameters such as framesPerBuffer and sampleRate. Never the less, PortAudio seeks to report workable default values that should result in glitch-free operation. Both "high" and "low" latency defaults are provided to support different use cases. These are described in more detail in the next section.

A user opening a half-duplex stream specifying a default*Latency parameter, default sample rate and paFramesPerBufferUnspecified as the framesPerBuffer parameter should reasonably expect the suggested latency to be honoured. In other situations the final latency may differ from the suggested latency, as explained later.

(2) Suggested latency parameters to Pa_OpenStream() are the latencies requested by the user when a stream is opened. These may range from 0 to infinity. PortAudio will limit the actual latency to within implementable, although not necessarily workable bounds. For example, PortAudio allows the user to request latencies down to zero, in which case PortAudio will seek to reduce latency as much as technically possible, even if this leads to unreliable audio. If there are internal constraints that limit the available latency values, such as restrictions on buffer granularity, PortAudio will round up from the suggested latency to the next valid buffer size value. PortAudio accomodates host-API enforced constraints or limits (e.g. ASIO or JACK may require a fixed buffer size that limits the latency to only one value). Such limits may impact actual latency, however they don't constrain the user's buffer size because PortAudio will adapt between different host and user buffer sizes where necessary.

(3) After a stream is opened PortAudio reports the actual latency of the stream via Pa_GetStreamInfo(), PaStreamInfo::inputLatency and PaStreamInfo::outputLatency. As discussed below, for input PortAudio reports the minimum input latency (callback invocation may be delayed, increasing effective latency), whereas for output, PortAudio reports the maximum output latency (callbacks may be delayed, reducing effective latency). Some PortAudio host API implementations are not able to determine the total latency of a stream. In such cases PortAudio reports the known latencies. (In future PA may seek to model unknown latencies but at present it does not.)


#### Default high and low latency semantics

PortAudio reports two default latencies for each direction (input and output) of each device. The defaults are named "low" and "high" and loosely relate to the two use-cases described below.

##### defaultLowOutputLatency & defaultLowInputLatency

A recommended value for Pa_OpenStream() suggestedLatency for use in interactive low latency software (audio effects, instruments, etc.) 

This is the host API's "preferred" or "default" latency value, if such a value is defined. It is not necessarily the lowest workable latency. For APIs without a preferred or default value this is a value that is generally understood to be stable on most systems for low-latency operation.

It is expected that software using these low latency values should not glitch on the kind of correctly tuned systems commonly used for interactive computer music (i.e. systems with good drivers, no bad driver issues, no overloaded USB buses, no rogue software etc). It is not always possible to predict the breakdown point where the latency is too low to function, therefore on some systems lower latency settings may be possible, while on other systems this value may be too low.

Some host APIs do not provide a true "low latency" mode, for example only offering minimum latencies in excess of 50ms. In these cases the defaultLow*Latency will represent a workable minimum latency rather than a true "low latency" setting.

Low latency operation may also have power-consumption implications due to the high frequency of audio callbacks.

##### defaultHighOutputLatency & defaultHighInputLatency

A recommended value for Pa_OpenStream() suggestedLatency for use in software where latency is not critical (e.g. playing sound files). This is a "safe" value that should mask all expected sources of glitch-inducing jitter and transient delay in most systems. Note that if the host API doesn't support a high latency mode this value may be the same as defaultLow*Latency. 

Using high latency values may in some cases reduce power-consumption due to a lower frequency of audio callbacks.


#### User Pa_OpenStream parameters that affect latency

PaStreamParameters::suggestedLatency is intended to be a useful user tunable parameter. From the user's perspective, the final actual output latency of the stream should closely match the suggested output latency parameter to Pa_OpenStream(). Where possible the host API should configure internal buffering as close to but no lower than suggestedLatency. In practice this is not always possible. The user should anticipate that in some cases there may be significant difference between the suggested and configured latency and buffering due to constraints imposed by individual devices and host APIs. For example, it is possible for the output latency to be lower than requested if the device or host API limits the maximum host buffer size, or constrains the buffer to a fixed value. Similarly for input the host may constrain the amount of buffering PortAudio can introduce.

The following user-supplied parameters to Pa_OpenStream() may affect actual latency: input and output suggestedLatency, sampleRate, framesPerBuffer, host-API-specific flags. The framesPerBuffer user callback buffer size may be set to paFramesPerBufferUnspecified to give the implementation maximum freedom in selecting host buffer parameters. Opening a stream in half-duplex or full duplex mode may result in different stream latencies because PA sometimes needs to use extra buffering to ensure synchronisation between input and output.

The details of how the Pa_OpenStream parameters are mapped to host API specific values are private to each host API implementation and should not be relevant to the user. Later sections of this document describe unifying principles to align the behavior of individual implementations where possible.


#### Basic buffering/timing model

The user's view of PortAudio buffering is relatively opaque. PortAudio arranges for the host API to invoke a user callback function to process audio in "callback buffers." The callback buffer size is often fixed, in which case the callbacks are (ideally, in principle) periodic. In cases where the callback buffer size may vary (paFramesPerBufferUnspecified) the callbacks may be aperiodic but time aligned to the number of sample frames elapsed since the last callback. (In practice, callback periodicity is often violated due to host API specific constraints, but it is assumed to hold for the purposes of the timing model.)

In the output case the user fills the callback buffer which is then passed via the host API to the audio driver and hardware. Some time later the DAC outputs the samples. PortAudio defines the time from the idealised callback time, to when the first sample of the callback buffer appears at the analog output of the DAC as the "actual output latency." The actual output latency corresponds to the distance between the two orange samples highlighted in the diagram below, which shows a snapshot of buffer state at a moment in time. The callback fills the buffer ahead of the location where the DAC reads:

![Output_snapshot_of_state_at_callback%20invocation_time_general_case.png](http://rossbencina.com/static/portaudio/Output_snapshot_of_state_at_callback%20invocation_time_general_case.png)

As suggested by the diagram above, some portion of the latency may be unknown. The accuracy of PortAudio's latency reporting is dependent on the host API. PortAudio provides access to the known input and output latencies in the PaStreamInfo::inputLatency and PaStreamInfo::outputLatency fields returned by Pa_GetStreamInfo(). Often we treat the known latency as synonymous with the true actual latency.

When the callback is invoked a PaCallbackTimeInfo structure containing timing information is passed to the callback. PaStreamCallbackTimeInfo::currentTime indicates the actual callback invocation time. PaStreamCallbackTimeInfo::outputBufferDacTime indicates the time at which the first sample of the callback buffer will reach the DAC (the idealised callback invocation time plus the known actual output latency). Similarly for input, PaStreamCallbackTimeInfo::inputBufferAdcTime indicates the time at which the first sample of the callback buffer was captured by the ADC (the idealised callback invocation time minus the known actual input latency).

Keep in mind that the actual output latency is an idealised value based on perfectly scheduled, periodic callbacks. In practice, callback jitter may cause callbacks to be invoked later than the idealised time. The diagram above distinguishes between the idealised and actual callback execution time, showing the actual callback time occuring later (closer to the DAC playback position) than ideal.

Two reasons the actual callback invocation time may deviate from ideal are (1) processing overhead and (2) system scheduling jitter. A third is buffer size adaption mechanisms, which aren't considered here.

With regard to overhead, PortAudio may need to perform some processing prior to invoking the user callback. This is illustrated on the timeline below:

![Output_timeline_for_simplified_double-buffer_model.png](http://rossbencina.com/static/portaudio/Output_timeline_for_simplified_double-buffer_model.png)

The timeline illustrates idealised callback invocation events and callback execution duration over time. The coloured bar indicates the maximum theoretical timespan of a host callback for a single callback buffer. The light blue/green segment is the portion spent by the PortAudio user callback. The dark blue segments indicate time consumed by PortAudio prior to and following the user callback. 

##### "100% CPU utilisation" assumption

As implied by the previous diagram, PortAudio weakly assumes that internal buffering is configured so that the user callback may consume most of the available CPU time during a callback period. Put another way: the time taken to process N samples is allowed to approach the time taken to play or record N samples. The user should understand that this is a hypothetical limit. PortAudio and system processing and scheduling overhead reduces this number in stream-, device-, and system-dependent ways. 

In addition to processing overhead, system scheduling jitter is another major contributor to the difference between idealised and actual callback invocation time.

![Output_timeline_for_simplified_double-buffer_model_including_scheduling_jitter.png](http://rossbencina.com/static/portaudio/Output_timeline_for_simplified_double-buffer_model_including_scheduling_jitter.png)

The diagram above shows how scheduling jitter and processing overhead both delay the callback invocation time and reduce available callback execution duration. In some cases PortAudio or the host API may compensate for scheduling jitter by adding extra buffering allowing the callback to complete later.

Another way to think about idealised callback time and actual output latency is relative to a deadline when the device needs the buffer (marked on the diagram above). The idealised callback time is one buffer period prior to the deadline for delivering the buffer to the device. The actual callback may occur after that time.

Another assumption related to the "100% CPU utilisation" assumption is that when using a specified user callback buffer size, the actual latency of a stream is constrained to be no less than the duration of one user callback buffer period.

Strict conformance to CPU utilisation and latency constraint assumptions is not guaranteed. The actual limit on callback CPU utilisation is usually dependent on factors outside PortAudio's control. PortAudio may also be constrained by other conflicting requirements. For example if the user specifies a fixed buffer size and the host API is unable to supply that buffer size, PortAudio may perform synchronous buffer adaption. This may lower the effective available CPU time and introduce scheduling jitter dependent on the ratio of the host and callback buffer periods.

Even ignoring jitter potentially introduced by PortAudio host/user buffer size adaption, different host APIs have radically different scheduling and jitter behavior. This is one reason why it is often preferable to use paFramesPerBufferUnspecified for low latency operation as it gives PortAudio maximum flexibility in scheduling and dimensioning host buffers.


#### Asymmetry in definition of output and input latency

Thus far we have defined output latency as:

	**Maximum output latency: The time from the idealised callback time, to when the first sample of the callback buffer appears at the analog output of the DAC.**

It is the maximum in the sense that it represents the idealised amount of buffering between the callback and the DAC. A late callback generates samples that will reach the DAC sooner. This output latency is both the latency we are interested in specifying to increase stability, but also the latency we are interested in knowing to implement synchronisation, therefore we can say:

	**In the case of output latency, (1) the PaDeviceInfo::default*OutputLatency, (2) Pa_OpenStream() suggested output latency and (3) PaStreamInfo::outputLatency all refer to the maximum output latency.**


The situation is different for input. In this case we are interested in receiving samples as soon as they are available. No matter how much buffering we introduce, samples will always become available after some minimum time period.

![Input_snapshot_of_state_at_callback%20invocation_time_general_case.png](http://rossbencina.com/static/portaudio/Input_snapshot_of_state_at_callback%20invocation_time_general_case.png)

Thus the PortAudio reported actual input latency represents the earliest or minimum latency: 

	**Minimum input latency: Travelling backwards in time: the time from the idealised callback time, to when the first sample of the callback buffer entered the ADC as an analog signal.**

Respecting causality you can see that idealised callback time will never be closer to the ADC capture time than this minimum input latency.

In spite of this definition of input latency, extra buffering is often added to account for scheduling delays in the processing of input buffers. This creates an asymmetry between our definition of default and suggested latencies on the one hand, and actual latencies on the other. For stability we are interested in specifying a maximum input latency before overflow, whereas for synchronisation we are interested in knowing the minimum input latency. Therefore the definitions of the PortAudio fields for input latency are:

	**In the case of input latency, (1) the PaDeviceInfo::default*InputLatency and (2) Pa_OpenStream() suggested input latency refer to maximum input latency before overflow. (3) PaStreamInfo::inputLatency refers to the minimum input latency.**


### User Model: Timing

As described in the previous section, PaStreamCallbackTimeInfo fields correlate the first samples in the input and output callback buffers to a monotonic clock time returned by Pa_GetStreamTime(). This provides a means to synchronise non-audio events with the audio sample stream.

As with other aspects of PortAudio implementation, the quality of timing information returned by PortAudio is dependent on the host API. In the case of PaStreamCallbackTimeInfo, variability in timestamp quality may be due to the following factors:

* Granularity of the time base used by Pa_GetStreamTime()
* Accuracy and granularity of buffer timestamp information available from the host API
* Accuracy of known latency information, as this may be used to offset internal timestamps to DAC and ADC time
* Accuracy and availability of actual sample rate information used to convert latencies expressed in samples to seconds.

In future we may wish to document actual timing behavior of each native audio API and PortAudio Host-API implementation. For now we note that there is wide variability in timestamp quality accross operating systems and native audio APIs. For this reason we recommend that PortAudio clients assess the timing behavior of their target Host-APIs relative to their application requirements and deploy applicaton-specific clock recovery or time  smoothing algorithms as necessary.


See also:
[PaStreamCallbackTimeInfo Struct Reference](http://portaudio.com/docs/v19-doxydocs/structPaStreamCallbackTimeInfo.html)

[Pa_GetStreamTime() Reference](http://portaudio.com/docs/v19-doxydocs/portaudio_8h.html#2b3fb60e6949f37f7f134105ff425749)


## Implementation

We now turn our attention to the implementation. Here we consider the meaning of public PortAudio parameters from the perspective of host API implementations. We also consider mechanisms of specific native audio APIs and how they interact with PortAudio parameters.

We are mainly concerned with the implementation of PortAudio default, suggested and actual latency values as described above. Interpretation of these values also requires consideration of sample rates, buffer sizes and native audio API buffering models.


### Known Latencies

Before considering how to interpret and generate user-visible latency parameters it is important to note that total known latency of a stream is the sum of many smaller latencies, including:

* User-space native audio API buffering latencies

* Reported device latencies (including hardware latencies, driver latencies, etc.)

* Known system component latencies. (e.g. "KMixer has latency of 30ms on Windows XP")

* When a polling timer is involved it is sometimes possible or desirable to introduce a safety margin to accomodate timing jitter. Such a safety margin implies adding latency.

In some cases there may also be "adaption latencies" introduced by mechanisms employed by PortAudio:

* PA user to host callback buffer size adaption latency (usually 0). Only needed if PortAudio can't configure the host to use a buffer granularity that's an integer multiple of userFramesPerBuffer. The adaption latency is returned by PaUtil_GetBufferProcessorInputLatencyFrames() for input and PaUtil_GetBufferProcessorOutputLatencyFrames() for output.

* Full-duplex synchronisation/adaption buffer latency. This may be introduced when PA needs to use a ring-buffer to connect separate input and output streams. Not needed when the host API natively supports synchronous full-duplex operation.

* Sample rate conversion latency. E.g. the CoreAudio implementation uses a system component to perform sample rate conversion under some circumstances.

In general there are latencies that are fixed and known up-front, and those that can only be known once Pa_OpenStream() is called, for example:

* Some latencies may be expressed in sample frames, in which case the latency in seconds depends on the selected sample rate when the stream is opened.

* Some latencies defined above may depend on the user framesPerBuffer parameter or on native audio API buffer parameters. E.g. ASIO returns total stream latency only once the buffer size has been configured. 

* Some latencies may not be avilable or known until a stream is opened (some adaption latencies for example).

As noted earlier, there may also be unknown latencies.

There is one fact that is used as the basis of much of the discussion below:

	** Usually only "User-space native audio API buffering latencies" are directly adjustable by the host API implementation. **


### Unknown latencies

Some native audio APIs do not provide a comprehensive latency reporting model. In these cases PortAudio may not know the actual latency. The current PortAudio policy is to underreport these latencies by only reporting known components of the latency. No attempt is made to estimate unknown latencies, although in future it may make sense to do this.

Some native audio APIs or drivers do not directly support synchronised full-duplex streams. In these cases it may be difficult for PortAudio to provide deterministic alignment between input and output streams in full-duplex operation. This may manifest as non-deterministic round-trip latency.


### Use of sample rates when converting from frames to seconds

Some latency values are represented in frames, while others are represented in seconds. Conversion between these two units of measure requires multiplication or division by a sampling rate (in Hertz). 

PortAudio streams have two explicit sample rates: the requested sample rate, passed to Pa_OpenStream() and the nominal actual sample rate reported in PaStreamInfo::sampleRate. These may differ if the native audio API has an accurate measure of the hardware sample rate available to return in PaStreamInfo::sampleRate. If the nominal actual sample rate is unavailable, the requested rate is used for all calculations. The reported actual sample rate may be "nominal" in the sense that it's a value fixed when the stream is opened and may not exactly match the actual sample rate of the running stream. (In reality there is also an actual time varying sample rate, but this is not reported by PortAudio).

PaDeviceInfo::default*Latency values are reported outside the context of a stream and therefore without an explict sample rate.

The following rules should be used to determine the correct sample rate to use when converting between frames and seconds:

* For PaDeviceInfo default latencies, the PaDeviceInfo::defaultSampleRate should be assumed as the implict sample rate.

* For Pa_OpenStream() computations such as determining host buffer configuration, the nominal actual sample rate (PaStreamInfo::sampleRate) should be used when available. Otherwise the sampleRate parameter to Pa_OpenStream() should be used. By "when available" here it is understood that there may be cases where a host API implementation needs to convert values before it is able to access the nominal actual sample rate. 

* For Pa_GetStreamInfo() computations such as reporting actual latency, the nominal actual sample rate (PaStreamInfo::sampleRate) should always be used.


### Some issues with buffering models and buffering parameters

Later we describe the different native audio API buffering models in detail. These include: 

* opaque callback buffer
* double buffer
* n-buffer scatter-gather
* callback-aperiodic ringbuffer

All of these models have different parameters for dimensioning the buffer set (for example, respectively: a buffer size, a buffer size with implicit buffer count of 2, a buffer size and count, and a large ringbuffer size that may be subdivided by a periodic timer). For the purpose of the discussion below we call these sizes and counts native audio API buffering parameters or just "buffering parameters."

Native audio APIs may place soft or hard constraints on buffering parameter values. For example they may have preferred, default or required values. They may constrain buffer sizes to powers of two, or multiples of some base granularity. The goal of a host API Pa_OpenStream() implementation is to select the "best" buffer parameters. However, this selection is not necessarily trivial.

For a given native audio API buffering model, native audio API buffering parameters determine the user-space native audio API buffering latency by applying some function:

```
nativeAudioApiBufferingLatency = computeNativeAudioApiBufferingLatencyFromBufferingParameters(nativeAudioApiBufferingParameters)
```

Note that in general there is no inverse mapping:

```
// doesn't exist:
nativeAudioApiBufferingParameters  - computeNativeAudioApiBufferingParametersFromBufferingLatency(nativeAudioApiBufferingLatency)
```

One reason is that buffering parameters may be multi-valued (e.g. a size and a count). As a result, multiple buffering parameter values may represent the same latency. It is not desirable to force an (arbitrary) bijective mapping because buffer sizes interact with user framesPerBuffer, and it is desirable to select the best buffering parameters in consideration of framesPerBuffer (and other constraints). In general the choice of the best native audio API buffer parameters depends on Pa_OpenStream() parameters, particularly framesPerBuffer and sampleRate, but also potentially other parameters such as host-API-specific flags.


### General guidelines for computing PaDeviceInfo::default*Latency values

In the interests of a logical treatment we now consider PaDeviceInfo::default*Latency values. Note that a full understanding of default latency implementation requires understanding of the way PortAudio interprets suggestedLatency. Therefore you may wish to revisit this section after reading about suggestedLatency below.

PaDeviceInfo::default*Latency values represent hints from the host API to the user about appropriate latency values for different use cases. See the user-level model above for a user-level description of the default latencies. The user level description should be used to guide implementation in cases where the guidelines here are insufficient or inapplicable.

Some native audio APIs expose "default," "preferred," or fixed buffering parameters. The native audio API defaults may arise from the system, the driver, or in some cases, a driver-specific user interface. Where possible PaDeviceInfo::default*Latency values should be derived from these native audio API default parameters.

Individual native audio APIs are considered in more detail below during the discussion suggestedLatency. For now we can state a general formula:

```
nativeAudioApiBufferingLatency = computeNativeAudioApiBufferingLatencyFromBufferingParameters(defaultNativeAudioApiBufferingParameters)

defaultLatency = nativeAudioApiBufferingLatency + fixedKnownDeviceAndSystemLatencies
```

Where defaultNativeAudioApiBufferingParameters are usually provided by the native audio API and fixedKnownDeviceAndSystemLatencies are computed or derived in a host-API specific manner (but see above and later for lists of possible latency sources).

At the time PaDeviceInfo::default*Latency values are computed, PortAudio doesn't know the sample rate or callback framesPerBuffer that the user will choose. Therefore:

* As stated earlier, default*Latency values must be computed under the assumption that the sample rate is PaDeviceInfo::defaultSampleRate

* default*Latency values should be computed based on Pa_OpenStream() behavior when the user passes paFramesPerBufferUnspecified as the user framesPerBuffer parameter. (A corollary of this is that use of the paFramesPerBufferUnspecified parameter in combination with a default latency should usually result in the host API using the native audio API default or preferred host buffer parameters where they are available. See the next section for more on this.)

* default*Latency values should reflect native audio API default or preferred host buffer parameters. Furthermore, where possible:

* defaultLowLatency should be derived from the "default" or "preferred" Host API value where available. 

* defaultHighLatency should be derived from an "upper limit" or "max" Host API value, where available.

* defaultLatency values should relate to the host API's "normal mode." This means that the defaultLatency should be valid without passing any special (possibly host-API specific) flags to Pa_OpenStream(). For example, if a Host API implementation has a special "exclusive" low-latency mode that requires the user to specify a host-API-specific flag, this exclusive low latency value should *not* be returned as a default latency.

In cases where the native audio API supplies no default or preferred values, a suitable heuristic should be used both for choosing host API buffer parameters, and determining defaults. The heuristic may take into account, for example: anticipated scheduling jitter, known system buffering behavior, documented or experimentally established timing bounds.


#### Relation of defaultLatency to suggestedLatency and actualLatency

As noted above, a number of parameters to Pa_OpenStream() can affect how the suggestedLatency parameter is interpreted. This makes it impossible to define how defaultLatency will be interpreted in all cases (without reference to all internal details and inputs to Pa_OpenStream().) The only strictly testable behavior is:

	** Opening a half-duplex callback stream using Pa_OpenStream() parameters: framesPerBuffer=paFramesPerBufferUnspecified, sampleRate=PaDeviceInfo::defaultSampleRate and suggestedLatency=PaDeviceInfo::defaultHigh/Low*Latency with no host API-specific flags should result in a stream with reported actual latency that matches suggestedLatency, modulo any variation between the requested (Pa_OpenStream()) and nominal actual (PaStreamInfo) sample rate. **

Other scenarios such as full-duplex streams, user specified framesPerBuffer, non-default sample rates, or host API-specific modes may result in actual latency values that differ from the supplied suggestedLatency parameter. This may be due to host API implementation or device-specific behavior related to the process of selecting native buffer parameters and/or required adaption latencies.


### General guidelines for interpreting suggestedLatency

We now turn to the task of deriving native audio API buffering parameters from user supplied suggestedLatency and other Pa_OpenStream() parameters.

We can consider the interpretation of suggestedLatency at three levels. At the most general level there is commonality in the way that suggestedLatency is interpreted by all host API implementations. At the level of different buffering models we can define specific formulas that should be used by all host API implementations using a particular buffering model. At the lowest level, individual host API implementations may need to employ specific heuristics to resolve buffering parameter constraints, suggested latency and user framesPerBuffer. Here we consider the most general level, later sections consider buffering models and host-API specific details.


#### Computing targetNativeAudioApiBufferingLatency to factor out known constant latencies

PaStreamParameters::suggestedLatency values represent the latency the user would like. The actual latency will be a combination of latencies that PA can affect and latencies that are dictated by the Host API, platform, and sometimes PA itself. Prior to computing host API buffering parameters such as buffer sizes and count, implementations should should subtract all unchanging or computable minimum latencies from the user's suggestedLatency as follows:

```
targetNativeAudioApiBufferingLatency = suggestedLatency - fixedDeviceAndSystemLatencies - minimumKnownAdaptionLatencies;
```

targetNativeAudioApiBufferingLatency is then used to choose native audio API buffering parameters. To compute the actual stream latency, the latency resulting from the chosen buffering parameters is added to the device, system and actual adaption latencies.

fixedDeviceAndSystemLatencies includes latencies mentioned earlier in the discussion of possible latency sources. We identify specific latency sources below in the sections for individual host APIs.

minimumKnownAdaptionLatencies is the lower bound on adaption latencies introduced by PortAudio. In many cases it will be zero. Sometimes it may be possible to compute a lower bound on adaption buffering between input and output callbacks in full duplex streams, or the delay introduced by a required sample rate conversion component.

Some system or adaption latencies may not be computable until after the buffer parameters have been chosen. However, implementations should seek to factor out as many known fixed latencies as possible in the computation of targetNativeAudioApiBufferingLatency. The more accurate this value is, the closer the final actual latency will be to the user's suggestedLatency.


#### Mapping suggestedLatency/targetNativeAudioApiBufferingLatency to native audio API buffer parameters

When interpreting targetNativeAudioApiBufferingLatency (as derived from suggestedLatency in the previous section) there are two main cases to consider. The cases depend on the value of framesPerBuffer passed to Pa_OpenStream():
	1. paFramesPerBufferUnspecified
	2. A user specified framesPerBuffer value.

(1) As noted above, with paFramesPerBufferUnspecified a half duplex stream with suggestedLatency of PaDeviceInfo::default*Latency should result in a stream with actual latency of PaDeviceInfo::default*Latency, modulo any variation in the requested and nominal actual sample rate. A full-duplex stream may vary from the suggested values due to adaption latencies. In practice this means that the following assertion should hold:

```
// assuming paFramesPerBufferUnspecified and default sample rate...
targetNativeAudioApiBufferingLatency defaultLatency - fixedDeviceAndSystemLatencies - minimumKnownAdaptionLatencies;
targetNativeAudioApiBufferParameters computeBufferParameters( targetNativeAudioApiBufferingLatency )
assert( targetNativeAudioApiBufferParameters defaultOrPreferredNativeAudioApiBufferParameters )
```

(2) When a user specifies a framesPerBuffer value, the actual latency depends on the method used to select the native audio API buffering parameters. As we've already seen this may result in an actual latency that is greater, equal or less than the suggested value. The buffering model or the native audio API may constrain buffer sizes in certain ways. At the extreme, a fixed required host buffer size will result in variations in actual latency being due only to changes in PortAudio buffer adaption latency for different userFramesPerBuffer. 

As implied earlier in the user model section, when userFramesPerBuffer is specified there is an expected lower bound on latency of:

```
expectedLowestLatency = userFramesPerBuffer + fixedDeviceAndSystemLatencies + minimumKnownAdaptionLatencies
```

Except in cases where native audio API buffer constraints dictate otherwise.

We consider variations due to native audio API buffering models next.


## User-space native audio API buffering model latency

Native audio APIs employ a variety of user-space buffering models to communicate data between client program and the host driver and hardware.

Each buffering model implies different buffering parameters and hence a different way for PortAudio to configure latency. The final native audio API buffering latency is a function of the buffering parameters PortAudio selects. 

PortAudio makes decisions about native audio API buffering parameters based on formulas and heuristics that take the following inputs:
* The buffering model
* Native audio API imposed constraints on buffer sizes and/or buffering granularities
* Native audio API preferred/default buffer sizes (especially important when the user doesn't specify a callback framesPerBuffer)
* userFramesPerBuffer a.k.a. Pa_OpenStream() framesPerBuffer parameter, when not paFramesPerBufferUnspecified
* targetNativeAudioApiBufferingLatency derived from PaStreamParameters::suggestedLatency (see above)
* Sample rate (requested or nominal actual depending on availability, as discussed above)

In general, inputs to the buffering calculations should be observed in the following priority:
	1. Immutable buffering model and native API constraints
	2. Using a native buffer size or period that is a multiple of userFramesPerBuffer
	3. targetNativeAudioApiBufferingLatency

We review each buffering model below and state general formulas for computing buffer parameters from targetNativeAudioApiBufferingLatency and userFramesPerBuffer. 

**(Since this is a draft document, it is possible there are bugs in these formulas. Please report discrepancies or potential errors on the mailing list.)**


### Opaque host managed callback buffers

**Host APIs:** CoreAudio (but see notes later)

The opaque host managed model exposes very little detail about the actual buffer structure. The buffers themselves are host-managed and passed to the user at each callback. In terms of timing, the host managed callback can be considered a kind of implicit double-buffer, although the host may use a different buffering strategy internally.

In the opaque buffer model, the host callback buffer size is the only degree of freedom with which to tune latency. All other latencies are determined by the system.

We assume here a kind of pseudo-double-buffer latency model, where the size of the host buffer defines the host buffering latency based on the assumption that while one buffer fills, the other plays.

```
actualNativeAudioApiBufferingLatency = hostFramesPerBuffer
```

This is illustrated as "known buffering latency" in the figure below. 

![Output_double_buffer.png](http://rossbencina.com/static/portaudio/Output_double_buffer.png)

In practice it is possible that hostFramesPerBuffer latency is pre-factored into fixedDeviceAndSystemLatencies. Therefore it is important to understand the native audio API latency model to determine exactly how to structure the formulas below.


##### paFramesPerBufferUnspecified (opaque host managed callback buffers)

When the user requests paFramesPerBufferUnspecified, choose the closest available host buffer size to targetNativeAudioApiBufferingLatency. Consider breaking ties or snapping to native audio API "default" or "preferred" values.


##### specified userFramesPerBuffer (opaque host managed callback buffers)

When userFramesPerBuffer is specified, ideally the host callback buffer size should be the smallest integer multiple of userFramesPerBuffer equal or greater than targetNativeAudioApiBufferingLatency. Computed as follows:

```
targetNativeAudioApiBufferingLatency = suggestedLatency - fixedDeviceAndSystemLatencies - minimumKnownAdaptionLatencies;

hostFramesPerBuffer = conformToNativeAudioApiBufferingModelConstraints( userFramesPerBuffer, targetNativeAudioApiBufferingLatency )
```

Where fixedDeviceAndSystemLatencies and minimumKnownAdaptionLatencies are defined above.

The implementation of conformToNativeAudioApiBufferingModelConstraints() is ideally expressed as:

```
conformToNativeAudioApiBufferingModelConstraints( userFramesPerBuffer, targetNativeAudioApiBufferingLatency ){
	// adding (userFramesPerBuffer - 1) then dividing by userFramesPerBuffer rounds up to the next highest multiple
	return ( (targetNativeAudioApiBufferingLatency + userFramesPerBuffer - 1) / userFramesPerBuffer ) * userFramesPerBuffer;
}
```

This method adheres to the general principles that: (1) when there is a trade off, honouring userFramesPerBuffer should be given priority over honouring suggestedLatency, and (2) that userFramesPerBuffer is expected to impose a lower bound on latency.

In cases where hostFramesPerBuffer is constrained to incompatible values by the native audio API (e.g. fixed, enforced range, power of two, etc.) additional heuristics may be required to choose the best hostFramesPerBuffer. These heuristics are discussed under "Additional hostFramesPerBuffer selection heuristics" below. However, all other things being equal, hostFramesPerBuffer should be an integer multiple of userFramesPerBuffer.

When the hostFramesPerBuffer is not an integer multiple of userFramesPerBuffer, PortAudio may introduce additional buffer adaption latencies that were not subtracted from suggestedLatency when computing targetNativeAudioApiBufferingLatency. Theses adaption latencies must be added when computing the final actual latency:

```
actualLatency = actualNativeAudioApiBufferingLatency + fixedDeviceAndSystemLatencies + totalAdaptionLatencies;
```

Note that depending on the host API there may be additional system or device latencies that only crystalise once hostFramesPerBuffer is chosen. These should also be added when computing the actual latency.


### Fixed size opaque host managed callback buffer

**Host APIs:** JACK, ASIO with some devices

This is a special case of the previous opaque host managed buffer model where the device enforces a fixed host buffer size. We mention this here as a simplified case:

```
hostFramesPerBuffer = hostDefinedValue;
actualNativeAudioApiBufferingLatency = hostFramesPerBuffer;
actualLatency = actualNativeAudioApiBufferingLatency + fixedDeviceAndSystemLatencies + totalAdaptionLatencies;
```

As above, depending on the host API, hostFramesPerBuffer may already be factored into fixedDeviceAndSystemLatencies.


### Explicit double buffer

**Host APIs:** ASIO, WDM/WaveRT

![Output_double_buffer.png](http://rossbencina.com/static/portaudio/Output_double_buffer.png)

The double buffer model operates in the same way as the opaque host managed callback buffers model described earlier.


### N-buffer scatter gather or callback-synchronous ring buffer

**Host APIs:** WMME, WDM/WaveCyclic, WDM/WavePci

N-buffer scatter gather is an extension of double-buffering with more than two buffers. In the scatter-gather case the buffers are separate but logically organised in a ring. In a callback-synchronous ring buffer the buffer is a single contiguous ringbuffer with periodic notifications/callbacks spaced equally around the ring. For the purpose of this section the two structures are equivalent.

The actual buffering latency is given by:

```
actualNativeAudioApiBufferingLatency = hostFramesPerBuffer * (hostBufferCount - 1)
```

As indicated in the figure below:

![Output_N-buffer_scatter-gather_or_callback-synchronous_ringbuffer.png](http://rossbencina.com/static/portaudio/Output_N-buffer_scatter-gather_or_callback-synchronous_ringbuffer.png)

Calculation of buffering parameters is similar to the ring buffer case. We would like the value of hostFramesPerBuffer * (hostBufferCount - 1) to be the smallest value equal or greater than targetNativeAudioApiBufferingLatency. When userFramesPerBuffer is specified hostFramesPerBuffer should always be a multiple of userFramesPerBuffer.

We propose methods for calculating buffer parameters for the N-buffer scatter gather model below.


##### paFramesPerBufferUnspecified (N-buffer scatter gather)

With paFramesPerBufferUnspecified the host API needs to choose both hostFramesPerBuffer and hostBufferCount.

There is no generic formula for deriving the parameters from targetNativeAudioApiBufferingLatency without fixing one or other values. There are two main approaches:

A. Set hostBufferCount to some small integer and divide targetNativeAudioApiBufferingLatency by hostBufferCount:

```
hostFramesPerBuffer = targetNativeAudioApiBufferingLatency / (hostBufferCount-1)
```

Three scatter-gather buffers are usually more desirable than two on Windows. It may be desirable to round hostFramesPerBuffer to a multiple of 4, 8 or 16 to ensure good alignment for vectorising accelleration. Other platform-specific factors should also be considered where appropriate.

B. Set hostFramesPerBuffer to a fixed value and then compute hostBufferCount.

```
hostBufferCount = ((targetNativeAudioApiBufferingLatency + hostFramesPerBuffer - 1) / hostFramesPerBuffer) + 1
```

Another alternative is to ensure that hostFramesPerBuffer is a power of two and adjust both hostFramesPerBuffer and  hostBufferCount to best match targetNativeAudioApiBufferingLatency according to some accuracy requirement.

Windows XP KMixer is said to use 10ms buffers. In this case it may be desirable to match this buffer size to ensure callback periodicity.

As you can see, considerations of the host, and host-specific heuristics are needed here.


##### specified userFramesPerBuffer (N-buffer scatter gather)

The simplest method here is to use userFramesPerBuffer as the hostFramesPerBuffer, giving:

```
hostFramesPerBuffer = userFramesPerBuffer
hostBufferCount = ((targetNativeAudioApiBufferingLatency + hostFramesPerBuffer - 1) / hostFramesPerBuffer) + 1
```

A more flexible formula to consider is:

```
hostFramesPerBuffer = userFramesPerBuffer * M
hostBufferCount = ((targetNativeAudioApiBufferingLatency + hostFramesPerBuffer - 1) / hostFramesPerBuffer) + 1
```

Where M is chosen either to conform hostFramesPerBuffer to a reasonable range (say 5-15ms) or to limit hostBufferCount to a reasonable maximum (say 8 buffers).

Finally, in all cases the actual latency is given by:

```
totalAdaptionLatencies = 0; // should be zero since we're ensuring the host buffers are a multiple of hostFramesPerBuffer
actualNativeAudioApiBufferingLatency = hostFramesPerBuffer * (hostBufferCount - 1)
actualLatency = actualNativeAudioApiBufferingLatency + fixedDeviceAndSystemLatencies + totalAdaptionLatencies;
```


### Callback-asynchronous ringbuffer

**Host APIs:** DirectSound, WASPI

The callback-asynchronous ringbuffer is a large contiguous ring buffer. The host API polls the ringbuffer periodically to determine if samples should be consumed or filled. The callback-asynchronous ringbuffer is different from a scatter-gather or synchronous ringbuffer in that there is no requirement for the callbacks to occur at integer divisions of the buffer, or for the buffer to be a multiple of userFramesPerBuffer.  The host API has to determine the total length of the ring buffer and the polling period.

Given hostFramesPerBuffer as the total ringbuffer length, the ringbuffer latency can be defined as:

```
actualNativeAudioApiBufferingLatency = hostFramesPerBuffer - userFramesPerBuffer - pollingTimerJitterMargin
```

Where pollingTimerJitterMargin is intended to mask the jitter associated with the timer polling the ring buffer (on the order of a few milliseconds.)

![Output_callback-asynchronous_ringbuffer.png](http://rossbencina.com/static/portaudio/Output_callback-asynchronous_ringbuffer.png)


##### paFramesPerBufferUnspecified (callback-asynchronous ringbuffer)

With paFramesPerBufferUnspecified hostFramesPerBuffer can be computed similarly to the specified userFramesPerBuffer below.

```
pollingPeriod ?
hostFramesPerBuffer = pollingPeriod + max( pollingPeriod + pollingTimerJitter, targetNativeAudioApiBufferingLatency )
```

pollingPeriod will necessarily be a host API specific value based on power consumption requirements and timer granularities. For example, on Windows, high resolution polling requires calling timeBeginPeriod(1) which alters the scheduling behavior for the entire system, therefore it is not desireable to select a high-frequency polling period when the targetNativeAudioApiBufferingLatency is high.


##### specified userFramesPerBuffer (callback-asynchronous ringbuffer)

```
hostFramesPerBuffer = userFramesPerBuffer + max( userFramesPerBuffer + pollingTimerJitter, targetNativeAudioApiBufferingLatency )
pollingPeriod = userFramesPerBuffer
```


### Additional buffering parameter selection heuristics and guidelines

As discussed above, there are a number of factors to consider when faced with freedom to choose certain buffering parameters. Some of them are enumerated below.

The priority should be to support a specified userFramesPerBuffer value without additional adaption latency, and secondarily to honour suggestedLatency.

* native API "default" or "preferred" sizes should be favoured (especially with paFramsPerBufferUnspecified). Depending on the host API it may even be desirable to ignore suggestedLatency in order to honour a "preferred" size. For example, on Mac OSX, increasing the buffer size above the default may have no tangible benefit (not sure that's true, just saying).
* It may be desirable for buffer sizes to be powers of two (this was previously assumed in the WMME version for example, however no benefit is currently observed).
* It may be desirable for buffer sizes to meet multi-word alignments for SSE or other vector optimisations. Given a free choice of buffer size this heuristic should be honoured over selecting buffers of arbitrary integer size.
* For larger buffer sizes, cache line and memory page alignment may be desirable
* When host/user buffer size is required, it is desirable to maximise available callback compute-time and minimise callback jitter.
* Final actual latency should in-general equal or exceed suggestedLatency
* In n-buffer situations it is usually better to have more than 2 buffers as this keeps more samples between the callback and the DAC. 3 should definitely be preferred unless the only option for meeting suggestedLatency is switching to two buffers.
* In n-buffer situations it may be best not to have too many buffers, to avoid context-switch and buffer relay overhead
* In polling ring-buffer situations the above two points mean that it is usually better to poll a ringbuffer more than twice per total buffer duration.
* Polling frequency should be moderated to avoid over-taxing the system. Especially when suggestedLatency is high.
* Where possible the host API should seek to mask polling scheduling jitter by adding additional latency. This is usually only possible in polling callback-aperiodic ringbuffer scenarios.
* Prefer making buffers or polling intervals substantially larger than the system scheduling jitter
* Prefer making system scheduler granularity larger to avoid system load (e.g. timeBeginPeriod(1) should only be used with low-latency streams).
* When native API buffering constraints dictate that callback buffer size adaption is needed, but there are still choices to be made between different host buffer sizes, the best choice should: minimize user callback jitter, maximise available CPU time for each user callback, minimise buffer adaption latency. (When you have an algorithm for that let me know)


**Please suggest other considerations or heuristics for discussion on the mailing list.**

### Unknown Latencies

Currently PortAudio treats all latencies not reported by the native audio API as "unknown." It is possible that PortAudio could model these latencies. A model might include:

* nominal hardware FIFO size of 64 samples (a number mentioned in WDM documentation)
* nominal DAC FIR filter latency 24 samples (a value I read somewhere, check this)
* system mixer components e.g. Windows KMixer latency (On WinXP stated as 30ms, need to validate see [wiki:Win32AudioBackgroundInfo])
* driver buffering (we could guess?)

It may be better to include a conservative estimate of these latencies than to omit them entirely. Especially if we can validate the model across a range of hardware.


## Specific Host API Implementations

### ALSA

| | |
| --- | --- |
|Buffering model:| ? |
|Buffering latency:| ? |
|Buffer size constraints/restrictions:| ? |
|Buffer size constraints expressed as:| ? |
|Device and system latencies:| N/A |
|Exposes preferred or default latency:| ? |
|Unknown latencies:| Hardware buffering and A/D latencies |
|Provides actual device sample rate:| ? |
|PA callback invoked by:| ? |
|Native full duplex:| ? |
|May use host/user buffer size adaption:| ? |
|May use full-duplex synchronisation buffering:| ? |
|May introduce SRC latency:| ? |


### ASIHPI

FEED ME


### ASIO

| | |
| --- | --- |
|Buffering model:| double buffer |
|Buffering latency:| ASIOCreateBuffers(bufferSize) |
|Buffer size constraints/restrictions:| device dependent (fixed, range, power of two or multiplier granularity ) |
|Buffer size constraints expressed as:| AsioDriverInfo{ bufferMinSize, maxBufferSize. bufferPreferredSize, bufferGranularity } |
|Device and system latencies:| ASIOGetLatencies() returns latencies in frames once host buffer size has been set - thus can be used for reporting actual latency, but not while interpreting suggested latency. |
|Exposes preferred or default latency:| YES (preferred) |
|Unknown latencies:| NONE (actually, I don't think A/D hardware latencies are modelled) |
|Provides actual device sample rate:| ???? |
|PA callback invoked by:| callback from host |
|Native full duplex:| ALWAYS |
|May use host/user buffer size adaption:| YES (when no permissible host buffer size is an integer multiple of userFramesPerBuffer)  |
|May use full-duplex synchronisation buffering:| NO |
|May introduce SRC latency:| NO |

PA/ASIO selects a host buffer size based on the following requirements (in priority order):

1. The host buffer size must be permissible according to the ASIO 
driverInfo buffer size constraints (min, max, granularity or 
powers-of-two).

2. If the user specifies a non-zero framesPerBuffer parameter 
(userFramesPerBuffer here) the host buffer should be a multiple of 
this (subject to the constraints in (1) above).

[NOTE:| Where no permissible host buffer size is a multiple of 
userFramesPerBuffer, we choose a value as if userFramesPerBuffer were 
zero (i.e. we ignore it). This strategy is open for review ~ perhaps 
there are still "more optimal" buffer sizes related to 
userFramesPerBuffer that we could use.]

3. The host buffer size should be greater than or equal to 
targetBufferingLatencyFrames, subject to (1) and (2) above. Where it 
is not possible to select a host buffer size equal or greater than 
targetBufferingLatencyFrames, the highest buffer size conforming to  
(1) and (2) should be chosen.

See the following functions in pa_asio.cpp for details:| SelectHostBufferSize, SelectHostBufferSizeForSpecifiedUserFramesPerBuffer, SelectHostBufferSizeForUnspecifiedUserFramesPerBuffer


### CoreAudio

| | |
| --- | --- |
|Buffering model:| opaque host buffer |
|Buffering latency:| kAudioDevicePropertyBufferFrameSize |
|Buffer size constraints/restrictions:| must be within a range (min,max) |
|Buffer size constraints expressed as:| queryable device parameter kAudioDevicePropertyBufferFrameSizeRange |
|Device and system latencies:| kAudioDevicePropertySafetyOffset, kAudioDevicePropertyLatency, kAudioStreamPropertyLatency |
|Exposes preferred or default latency:| kind of. kAudioDevicePropertyBufferFrameSize is the current/default latency when created |
|Unknown latencies:| unknown |
|Provides actual device sample rate:| ????YES |
|PA callback invoked by:| callback from host |
|Native full duplex:| SOMETIMES (some drivers support full duplex, some don't) |
|May use host/user buffer size adaption:| YES ???CONFIRM??? |
|May use full-duplex synchronisation buffering:| YES (Stephane says we should be avoding this with aggregate devices from 10.5 onwards). |
|May introduce SRC latency:| YES |

For default high latency we use the kAudioDevicePropertyBufferFrameSize default that the device comes up with.

For default low latency we use a small constant that seems to work well on many systems min(64,deviceMinimum).

By default CoreAudio allows the callback to execute for the whole callback period, in which case it has the same timing characteristics as a double-buffer. It also provides a parameter kAudioDevicePropertyIOProcStreamUsage that reduces latency by requiring that the callback complete sooner than one buffer period. PortAudio doesn't currently use this feature.

CoreAudio may not implement the latency model very well at the moment. This needs to be reviewed. See tickets #175, #182 and #95.
See also callback time info related tickets #144, #149


### DirectSound

| | |
| --- | --- |
|Buffering model:| callback asynchronous ringbuffer |
|Buffering latency:| (bufferSize - userFramesPerBuffer) or (bufferSize - pollingPeriod) |
|Buffer size constraints/restrictions:| DSBSIZE_MIN (4) to DSBSIZE_MAX (0xFFFFFFFF) |
|Buffer size constraints expressed as:| Compile time constants DSBSIZE_MIN and DSBSIZE_MAX  |
|Device and system latencies:| N/A |
|Exposes preferred or default latency:| NO |
|Unknown latencies:| Everything below DirectSound API (see below) |
|Provides actual device sample rate:| NO |
|PA callback invoked by:| High priority thread with timer polling (waitable timer object or mm timer signalled Event) |
|Native full duplex:| Compile time option (when PAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE is defined) |
|May use host/user buffer size adaption:| NO |
|May use full-duplex synchronisation buffering:| NO (input buffer acts as adaption buffer) |
|May introduce SRC latency:| NO |

PA/DirectSound computes buffer sizes using the callback-asynchronous ringbuffer calculations described above. The timer polling period is currently decided as the greater of 1/4 of the user buffer period or 1/16 of the target latency. 1/4 of the user buffer period is intended to guarantee 75% CPU availability. It may be that we need to harmonise timer polling heuristics between implementations.

See CalculateBufferSettings in pa_win_ds.c for details.

Full duplex streams created without PAWIN_USE_DIRECTSOUNDFULLDUPLEXCREATE have unsynchronised input/output buffers and hence indeterminate loopback latency.

On Windows XP DirectSound can apparently bypass KMixer by talking to a hardware pin if one is available. Otherwise it incurs KMixer latency (30ms?). On later Windows versions other smaller system mixer latencies are involved. See our notes here:| [wiki:Win32AudioBackgroundInfo]


### JACK

| | |
| --- | --- |
|Buffering model:| Opaque host managed |
|Buffering latency:| bufferSize |
|Buffer size constraints/restrictions:| fixed buffer size |
|Buffer size constraints expressed as:| fixed??? |
|Device and system latencies:| Each node can query for input and output latency (see below) |
|Exposes preferred or default latency:| N/A |
|Unknown latencies:| i/o latency is dependent on correct user calibration |
|Provides actual device sample rate:| fixed sample rate??? |
|PA callback invoked by:| callback |
|Native full duplex:| YES |
|May use host/user buffer size adaption:| YES |
|May use full-duplex synchronisation buffering:| NO |
|May introduce SRC latency:| NO |

The latency at a JACK port is a function of the delay introduced by all nodes connected to that port plus the -I or -O user-configured hardware latencies as illustrated below:

![jack-latency.png](http://jackaudio.org/files/jack-latency.png)

-I and -O are configured by the user, after being measured using a physical loopback cable and jack_iodelay(1) see the man page for details:| http://trac.jackaudio.org/browser/jack2/trunk/jackmp/man/jack_iodelay.0



### OSS

FEED ME


### WMME

| | |
| --- | --- |
|Buffering model:| N-buffer scatter-gather |
|Buffering latency:| (bufferSize * (bufferCount - 1)) |
|Buffer size constraints/restrictions:| PA limits buffers to 32k since there is a comment indicating some drivers crashed with larger buffers |
|Buffer size constraints expressed as:| PA #defines |
|Device and system latencies:| N/A |
|Exposes preferred or default latency:| NO |
|Unknown latencies:| Everything below WMME API |
|Provides actual device sample rate:| NO |
|PA callback invoked by:| High priority thread blocking on Event |
|Native full duplex:| NO |
|May use host/user buffer size adaption:| NO |
|May use full-duplex synchronisation buffering:| NO |
|May introduce SRC latency:| NO |

PA/WMME computes buffer sizes and counts based on the following procedure:| it begins by assuming a host buffer size of userFramesPerBuffer or a default granularity of 16 frames when userFramesPerBuffer unspecified. It then computes a buffer count based on suggested latency using the formulas above, enforcing a minimum buffer count of 2 or 3 depending on whether the buffer ring is for full or half duplex use. The algorithm then checks whether the buffer count falls within an acceptable range, if not it coalesces multiple user buffers into a single host buffer and then recomputes the buffer count.

When the userFramesPerBuffer exceeds the 32k host buffer size upper limit we try to choose a host buffer size that is a large integer factor of userFramesPerBuffer so as to evenly distribute computation (and timing jitter) across buffers.

See the following functions in pa_win_wmme.c for details:| CalculateBufferSettings, SelectHostBufferSizeFramesAndHostBufferCount, ComputeHostBufferSizeGivenHardUpperLimit, ComputeHostBufferCountForFixedBufferSizeFrames

A survey of workable WMME buffer sizes was conducted on the mailing list using the patest_wmme_find_best_latency_params.c test. The results are graphed in the pdf attached to ticket #185. These results have been used to tune the default latency #defines in pa_win_wmme.c

Full duplex streams have unsynchronised input/output buffers and hence indeterminate loopback latency. The latency is bounded by the size of one host buffer. PA usually sizes input and output buffers to the same size, and allocates one extra input buffer to accomodate any possible phase relationship between input and output buffering.


### WASAPI

| | |
| --- | --- |
|Buffering model:| callback asynchronous ringbuffer |
|Buffering latency: |
|Buffer size constraints/restrictions:| ??? |
|Buffer size constraints expressed as:| ??? |
|Device and system latencies:| ??? |
|Exposes preferred or default latency:| ??? |
|Unknown latencies:| ??? |
|Provides actual device sample rate:| ??? |
|PA callback invoked by:| High priority thread with timer polling ??? or Event notification? |
|Native full duplex:| ??? |
|May use host/user buffer size adaption:| ??? |
|May use full-duplex synchronisation buffering:| ??? |
|May introduce SRC latency:| ??? |

Dmitry has indicated that PA/WASAPI uses the following formula:

```
static PaUint32 PaUtil_GetFramesPerHostBuffer(PaUint32 userFramesPerBuffer, 
PaTime suggestedLatency, double sampleRate, PaUint32 TimerJitterMs)
{
    PaUint32 frames userFramesPerBuffer + max( userFramesPerBuffer, 
        (PaUint32)(suggestedLatency * sampleRate) );
    frames += (PaUint32)((sampleRate * 0.001) * TimerJitterMs);
    return frames;
}
```
[Mailing list email July 14 2010](http://music.columbia.edu/pipermail/portaudio/2010-July/010681.html)



### WDM/KS (WaveCyclic & WavePci)

| | |
| --- | --- |
|Buffering model:| N-buffer scatter-gather |
|Buffering latency:| (bufferSize * (bufferCount - 1)) |
|Buffer size constraints/restrictions:| ??? |
|Buffer size constraints expressed as:| ??? |
|Device and system latencies:| ??? |
|Exposes preferred or default latency:| ??? |
|Unknown latencies:| ??? |
|Provides actual device sample rate:| ??? |
|PA callback invoked by:| High priority thread with timer polling ??? or Event notification? |
|Native full duplex:| ??? |
|May use host/user buffer size adaption:| ??? |
|May use full-duplex synchronisation buffering:| ??? |
|May introduce SRC latency:| ??? |


### WDM/KS (WaveRt)

| | |
| --- | --- |
|Buffering model:| double buffer |
|Buffering latency:| buffer size / 2 |
|Buffer size constraints/restrictions:| ??? |
|Buffer size constraints expressed as:| driver can change/reject buffer sizes? |
|Device and system latencies:| ??? |
|Exposes preferred or default latency:| ??? |
|Unknown latencies:| ??? |
|Provides actual device sample rate:| ??? |
|PA callback invoked by:| High priority thread with timer polling or Event notification |
|Native full duplex:| ??? |
|May use host/user buffer size adaption:| ??? |
|May use full-duplex synchronisation buffering:| ??? |
|May introduce SRC latency:| ??? |

________________________________________________________________________________
Page AssemblaVsTracWikiMarkup.md
# Assembla vs. Trac Wiki Markup

Assembla uses a wiki markup system called "Textile". This has a number of differences from the Trac markup we used to use. When you edit Assembla Wiki pages there's a bunch of useful Textile info at the bottom of the edit area. This page summarises some of the main points of difference with Trac markup to get you started quickly.

## Headings

Trac used one or more equals signs (=) to mark headings. Assembla uses a hN. prefix, like so:

| Trac | Assembla |
| --- | --- |
| = first heading = | h1. first heading |
| == second heading == |  h2. second heading |
Et cetera.

## Code quotes

Trac let you surround multiline code blocks with ` code goes here `. Assembla requires you to use HTML pre and code tags: ` <pre><code> code goes here <&#47;code><&#47;pre> `

` like this `

You can also quote code with @ signs (all on one line).

`like this`

## Escaping camel case

Trac used CamelCase syntax to automatically create Wiki links. You used to have to escape words like PortAudio and DirectSound with a ! to stop them being Wiki links. You don't need to do that any more, we've disabled auto camel case links in Assembla.

## Bold and emphasis

For bolding Trac allowed three asterisks, and also used ''' (three single quotes) around bold words. In Assembla **bold** and __emphasis__ can be done by surrounding words with one or two * or _ , but not with three. 

## Links

### Links to tickets and revisions

As in Trac, you can link to tickets by writing the ticket number preceded with a hash sign. e.g. #201

As in Trac, You can link to revisions by writing the revision number preceded by an 'r'. e.g. r1000. Note that this doesn't seem to work in Assembla tickets at the moment. Hopefully they'll fix that. The  `{id}` syntax probably works.

### Wiki links and external links

In Assembla, wiki links work much like Wikipedia by surrounding the targed with two sets of square brackets. `[[` and `]]`. You can use a pipe character to separate the link target and the text of the link. e.g. `[[TestPlan| the test plan]]` comes out like this: [[the test plan|TestPlan]]

Links to URLs work much the same except you need to prefix the HTTP url with "url:" e.g. `[[url:http://www.portaudio.com|the PortAudio website]]`

[the PortAudio website](http://www.portaudio.com)

## Bullet lists

Bullet lists use *. Don't try to use - for bullets, it doesn't work.

## Tables

Trac uses double pipes `||` to separate table columns. Assembla uses single pipes. Trac used the heading syntax with equals signs to mark header rows in tables. Assembla uses |_. at the start of a header column. It's all explained here: http://redcloth.org/hobix.com/textile/quick.html#tables

One thing to watch out for: make sure your final | on each line is *at the end of the line*. If there's whitespace after it Assembla will get confused.

## Image embedding

If you want to include an image from an external site, just write the URL, surrounded with an ! on either side. Like so:

`!http://www.portaudio.com/images/portaudio_logo.png!`

![portaudio_logo.png](http://www.portaudio.com/images/portaudio_logo.png)


That's all I know. Beyond this you should read the documentation and links at the bottom of the edit area.





________________________________________________________________________________
Page TasksForNewContributors.md
# Tasks for New and Casual Contributors

We've tagged tasks that we think are suitable for new and casual PortAudio contributors with the STARTER or  STARTER-PLUS keywords. You can get a list of active starter tasks here:

[Active STARTER tickets](http://www.assembla.com/spaces/arhHGeUuSr4k70eJe4gwI3/tickets/report/u165783)

* *STARTER* tickets involve a small code or documentation change, or a number of repeated similar code changes. They may also be QA type tasks such as compiling and running a set of tests against a particular host API.

* *STARTER-PLUS* tickets may require some study of the code to work out how to implement the ticket. Usually there's existing code in another host API you can refer to.

If you'd like to work on one of these tickets let us know on the mailing list so we can assign the ticket to you, help you out and answer your questions, review your work and commit the results.

We've tried to annotate each starter ticket with enough information to make it clear what needs to be done. Please ask for more info on the mailing list if a ticket doesn't make sense to you, or doesn't have enough detail for you to act on.

## Time estimates with the TIME keyword

These tickets also have a TIME keyword to indicate how long we think it might take you to finish the task. (TIME-1H means one hour, TIME-2D means two full days). These are very rough estimates but should give you a quick idea about the relative complexity of the tasks -- if you think we're way off let us know.

## Guidelines for developers tagging new STARTER tickets

If you find other tasks that belong here please tag them or post to the mailing list to discuss.

Make sure the task can be done by a competent developer with minimal experience with the PortAudio source code.
Use STARTER for short tasks and STARTER-PLUS for tasks that might require a bit more stamina or investment of time and research.
Make sure the ticket includes a description and comments sufficient for the contributor to understand what needs to be done.
Include a TIME-XX keyword to indicate how long it might take to complete the task. TIME-XH for hours, TIME-XD for days.

________________________________________________________________________________
Page AboutListReviewTickets.md
# About LIST-REVIEW Tickets

Active tickets tagged with the LIST-REVIEW keyword are stalled because the real problem is not doing the work, but uncertainty about whether the work should be done, or how it should be done.

[Active LIST-REVIEW tickets](http://www.assembla.com/spaces/arhHGeUuSr4k70eJe4gwI3/tickets/report/u165793)

The idea is to review these tickets, discuss alternatives, decide on action, remove the LIST-REVIEW keyword, and finally perform the task. Some tickets may be STARTER tickets but we haven't tagged them as such because a new contributor isn't going to be able to make a decision about the appropriate course of action on their own.

Tickets currently being discussed on the mailing list should be tagged with the IN-REVIEW keyword. The report below automatically lists them in the 'Review in progress' section below.

If you'd like to discuss one of these tickets on the mailing list, please create a new subject using the following subject line format:

[LIST-REVIEW] #<ticket-number> <ticket title>

________________________________________________________________________________
Page MilestonesAndTickets.md
# Ticket wrangling: Milestones and Tickets

The list of all open PortAudio development tickets, grouped by milestone is here: https://github.com/PortAudio/portaudio/issues. You can choose different filters to get other views, such as sorting by priority rather than milestone.

Tickets that might be good for new contributing developers to tackle are tickets tagged with STARTER* keywords. See [[TasksForNewContributors]] for details.

Tickets that need discussion and/or review by the mailing list are tagged with the LIST-REVIEW keyword. See [[AboutListReviewTickets]] for more details.

## Milestones

Each milestone has a specific goal, listed in the descriptions here: https://github.com/PortAudio/portaudio/milestones

The milestone names can be interpreted according to the following guidelines:

| Milestone | Description |
| --- | --- |
|Not assigned... |all tickets that havn't been assigned a milestone. unscheduled work. |
|V19-SS* |next stable snapshot |
|V19-M*|development milestones towards next major release |
|V19 |Next major release. |
|V20 |n+1 major release. Stuff we're committed to tackling once V19 is out the door.   |

See the [[V19ReleasePlan]] for further discussion.






________________________________________________________________________________
Page Platforms_BeagleBoard.md
# Building for BeagleBoard XM

These notes are from a build for BeagleBoard XM Rev C1 running the Angstrom demo.

You can probably cross compile from most Linux distributions. I used Ubuntu 11.10 on a Mac running as a VMWare application.
It was downloaded from.

http://www.trendsigma.net/vmware/ubuntu1110t.html

Install the ALSA development packet for the BeagleBoard target into the
cross compiler toolchain. In Ubuntu Linux enter:

```
su -
source /usr/local/angstrom/arm/environment-setup
opkg-target update
opkg-target install alsa-dev
```

I recommend using the nightly snapshot of PortAudio V19 from  http://www.portaudio.com/download.html

Copy it to a "Work" directory in a user account on Ubuntu.

Move to the PortAudio directory:
```
cd ~/Work/portaudio
```

You will need to pass options to "configure" to tell it to cross-compile for BeagleBoard and not for your desktop Linux. 
The settings below will cause it to link directly with the static library "lib/.libs/libportaudio.a".

The first command below, starting with CFLAGS, is all on one line:

```
CFLAGS="-march=armv7-a -mtune=cortex-a8 -mfpu=neon -mfloat-abi=softfp" ./configure --host=arm-angstrom-linux-gnueabi --prefix=/usr/local/angstrom/arm --disable-shared

make
ls bin
```

You should end up with a bunch of test files in the bin folder.
Copy a test file from Ubuntu to your BeagleBoard using scp. You will
need to change the IP address and account name to match your setup.

```
scp bin/paex_sine phil@192.168.1.120:/home/phil/.
```

Then on the BeagleBoard, as root, enter:

```
cd ~phil
./paex_sine
```

If you have speakers hooked up, then you should hear a sine wave play
for 5 seconds.

________________________________________________________________________________
Page Platforms.md
# Platform Specific Notes


[[Mac OS X|Platforms Mac OS X]]

[[Linux|Platforms_Linux]]

[[BeagleBoard XM|Platforms_BeagleBoard]]

[[Raspberry Pi|Platforms_RaspberryPi]]

________________________________________________________________________________
Page Notes_about_building_PortAudio_with_MinGW.md
_Most of the information about building PortAudio is in the [official documentation](http://portaudio.com/docs/v19-doxydocs/tutorial_start.html). This page is a staging area while we work out how to document building with MinGW._

MinGW is a port of the gcc compiler toolchain to MS Windows. A related project is MSYS, which provides the Unix basic command line tools such as bash, ls, cp, etc. These are needed for running shell scripts. Note that the mingw project has now forked into two different projects (mingw and mingw-w64), the relevant differences are discussed later.

## PortAudio with MingGW: status and compatibility

Compiling PortAudio with MinGW is supported. However you will need an installation of MinGW that has system header files for the host APIs that you want to target. As installed, MinGW can only build PortAudio targetting WMME and ASIO. Targeting DirectSound is possible. At the time of writing we're less sure about WASAPI and WD/MKS (see below for details). If you have trouble building PortAudio after reading this page, please let us know on the PortAudio mailing list and we'll try to help.

## Installing and Running MinGW

Before you can use the MinGW compiler you need to install it. You'll also need to install MSYS, which provides the command line environment for running ./configure and make.

MinGW recommends using their automated gui installer _mingw-get-setup.exe_ . Check out the [MinGW Getting Started page](http://www.mingw.org/wiki/Getting_Started) for details.

Once MinGW and  MSYS  are installed you need to run the command shell. You can do this by manually running bash from a Windows command prompt, or by setting up a shortcut or batch file to do the same. If you install the GUI version of MSYS you may even get a separate command shell GUI that you can run. Whatever you do you need to make sure that you have the MSYS and MinGW tools in your path. One way to do this temporarily, at a Windows command prompt is the following:

First open a Windows command prompt, then (temporarily) add MinGW and MSYS binary directories to your path. (Important: MinGW recommends that you do not edit your global path). Note that I add the directories to the start of the search path here to avoid conflict with other commands in my path:

bc. C:\Users\Ross> set PATH=c:\MinGW\bin;c:\MinGW\msys\1.0\bin;%PATH%

Now you should be able to run bash (the MSYS shell):

bc. C:\Users\Ross> bash
bash-3.1$

And gcc should be available:

bc. bash-3.1$ gcc --version
gcc.exe (GCC) 4.8.1
Copyright (C) 2013 Free Software Foundation, Inc.
This is free software; see the source for copying conditions.  There is NO
warranty; not even for MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.

From that point you should be in a position to build PortAudio.

## Basic Build Instructions

To build PortAudio from an MSYS shell prompt, change to the PortAudio directory and run ./configure and make (notice that the C: drive becomes /c/ in the MSYS path):

bc. bash-3.1$ cd /c/PortAudio/pa_stable_v19_20140121_rc/portaudio/
bash-3.1$ ./configure
bash-3.1$ make

This will build the PortAudio library and all of the examples and tests into the bin directory.

Once make has finished you can run the examples, e.g.:

bc. bash-3.1$ bin/pa_devs

Will list the available devices, and 

bc. bash-3.1$ bin/paex_sine

Should play a sine wave. There are a bunch of other examples.

## Building in support for other native host audio APIs

By default ./configure will only build in support for the WMME audio API. This is a lowest common denominator audio API that is supported on all versions of Windows and can be reliably built with MinGW without any additional work. But with additional command line flags ./configure can try to build PortAudio with any of the supported host APIs. You can build a single PortAudio library that supports multiple native audio APIs.

You can get the full list of supported /configure parameters using the --help flag:

.bc $ ./configure --help

Of particular importance on Windows are the following options:

bc.  --with-winapi           Select Windows API support
                          ([wmme|directx|asio|wasapi|wdmks][,...]) [wmme]
 --with-asiodir          ASIO directory [/usr/local/asiosdk2]
 --with-dxdir            DirectX directory [/usr/local/dx7sdk]

For example, to build PortAudio with support for WMME and DirectSound you could use the following ./configure command:

bc. $ ./configure --with-winapi=wmme,directx

Although that probably won't work because you need to have valid DirectX headers installed in /usr/local/dx7sdk, or somewhere else referenced by the --with-dxdir flag. This is discussed below.

*NOTE:* if you decide to reconfigure with different parameters, you should "make clean" prior to invoking "make".

## Building the DirectSound host API

To build PortAudio with DirectSound support you need a working set of DirectSound header files. MinGW does not ship with working DirectSound header files. Microsoft distribute these headers in the DirectX SDK, and more recently (since Windows 8) in the platform SDK. However the Microsoft headers probably won't work with MinGW. Furthermore, it is not so easy to find working header files. If you search the web you might get lucky, or you might find headers that do not work (e.g. the mingwdx headers didn't work for us).

As of this writing, the Allegro game programming library provide a set of DirectX headers that work:

http://alleg.sourceforge.net/files/dx9mgw.zip

Unzip them and then pass the path to ./configure using the --with-dxdir flag:

bc. $ ./configure --with-winapi=directx --with-dxdir=../dx9mgw

An alternative to finding some working DirectX headers is to use the mingw-w64 toolchain, which ships with working headers. See the section about mingw-w64 below.

## Building the ASIO host API

To build PortAudio with ASIO support you need to get the ASIO SDK from Steinberg. It's a free download.

Then you need to pass the ASIO SDK directory to .configure, e.g.:

bc. $ ./configure --with-winapi=asio --with-asiodir=../ASIOSDK2.3

## Building WASAPI and WDM/KS host APIs

The MinGW distribution does not appear to ship with the correct headers for building WASAPI or WDM/KS. You might have better luck with MinGW-w64. Or you can go looking for a working header file set.

At least one developer used to compile PA/WASAPI with MinGW. We're not sure about WDM/KS.

## MinGW-w64

MinGW-w64 is a fork of mingw that supports compiling both 32 bit and 64 bit applications. The mingw-w64 project has a different policy towards managing proprietary Microsoft header file issues, and ships with a more extensive set of header files sourced in-part from ReactOS and WINE (see http://sourceforge.net/apps/trac/mingw-w64/wiki/History for details).

MinGW-w64 can be used for building PortAudio with DirectSound support and may be useful for buidling WASAPI and WDM/KS support (untested at the time of writing).

The MinGW-w64 home page is here: http://mingw-w64.sourceforge.net/

You can get pre-built MinGW-w64 binaries from here: http://sourceforge.net/projects/mingwbuilds

On 31/01/2014, sqweek wrote:
```
I used mingw-builds-install.exe from http://sourceforge.net/projects/mingwbuilds to install the x64-4.8.1-posix-seh-rev5 build.

mingw-get-setup.exe from http://sourceforge.net/projects/mingw to install the CLI mingw-get tool, which I used to install the following:

bash bzip2 coreutils diffutils dos2unix file findutils gawk grep gzip less libbz2 libiconv libintl liblzma libmagic libminires libopenssl libregex libtermcap make mingwrt msysCORE openssh sed tar termcap texinfo w32api xz zlib

You probably get most of them from "mingw-get install msys-core", I don't remember which I installed explicitly.

Then I've just setup a shortcut to run "C:\Mingw\msys\1.0\bin\bash.exe -l", and made sure /c/Mingw/bin and /c/Mingw/builds/x64-4.8.1-posix-seh-rev5/mingw64/bin are in PATH.

I think that's it to get a windows environment where ./configure && make works.
```



________________________________________________________________________________
Page RulesForGitCommitters.md
# Rules For Git Committers

This page is for people with Git commit access. "Committers" are listed as Owner or Member [here](https://www.assembla.com/spaces/portaudio/team).

We also have [[DeveloperGuidelines]] with general guidelines for development methodology.

## Background

People depend on PortAudio. We don't hand out commit access lightly. New contributors are expected to submit patches for review. Once we trust you, and we think that there is utility in giving you commit access, then you may be offered commit access. Usually commit access is granted for a specific purpose, such as maintaining a particular module or host API. That said, if we trust you with commit access, we trust you to do the right thing by PortAudio and to help out wherever you can. Just follow the rules.

## THE RULES

These are *RULES*. Rules help us all stay on the same page. Problems have occurred when the rules were not followed.

* Rule 0: communicate. The PortAudio Git repo is not your private playground. Before you commit something to Git make sure that you are confident that other committers would approve. When in doubt, communicate. Email the mailing list, or failing that, email Ross or Phil privately.

* PortAudio follows a trunk stable methodology. Don't check in untested code. Do your work in a Git branch and then submit a MergeRequest. Review contributed patches before merging them. Have someone else from the PA team review your code. Assembla has great code review tools, use them.

* PortAudio follows the module ownership principle. We like modules to have an owner, a default maintainer or a group of maintainers. No one is an expert in all native APIs, but the module maintainers have the best idea about their modules. They are most likely working on things behind the scenes. If you're not a maintainer, discuss changes with a module maintainer before making non-trivial changes to a module. Discussions on the mailing list are best. If you are unsure about who maintains a module, please ask (see below for a rough guide at the time of writing). Committing to a module does not bless you as exclusive maintainer of a module.

* Do not make a big new change and then disappear on holiday or project crunch. Be around on the mailing list to deal with potential fallout from your change.

* If you are the sole maintainer of a module then you have more scope to act freely. We will praise you for your great work. Keep in mind that with power comes great responsibility (and user bug reports.)

* Some modules don't have an owner, or the owner may be too busy to be useful. The above rules should not prevent obvious fixes from being checked in. Resolve these situations through discussion on the mailing list.


### Rough guide to module ownership

Below is an overview of module maintainership/ownership. It was updated on 10 Sept, 2016. It could be out of date by the time that you read this. If anything is incorrect or missing please let us know. A reasonable way to keep track of this is to check who has been committing to a module lately. 

```
src/common - Ross and Phil
src/os/unix - Alan, Bjorn, ???
src/os/win - Ross, Rob
src/hostapi/alsa - Alan
src/hostapi/asihpi - Eliot
src/hostapi/asio - Ross
src/hostapi/coreaudio - Bjorn, Phil, (Ross)
src/hostapi/dsound - Ross
src/hostapi/jack - ???
src/hostapi/oss - Alan
src/hostapi/skeleton - Ross
src/hostapi/wasapi - Dmitry
src/hostapi/wdmks - Rob
src/hostapi/wmme - Ross
test/ - none/everyone
qa/ - Phil
examples/ - none/everyone
./configure - no strict maintainer
Cmake scripts - Rob
static Visual Studio projects - David

Key:
 ??? means not sure
 Names in brackets have various meanings: Ross has done some work on hostapi/coreaudio; 
 hostapi/jack doesn't currently have an official maintainer.

Note:
 This list does not imply anything about module authorship. Most modules have had multiple contributors. 
 Many modules were developed by someone other than the current maintainer(s).
```

________________________________________________________________________________
Page HowToUseCodeReview.md

This page is only for PortAudio developers who have write permission to the SVN repository.

# How to Use Assembla Code Review for PortAudio

If you want to make a change to PortAudio then please do your work in an SVN branch, request a code review, then merge your code back into the main trunk. 

## Creating a Branch

For efficiency sake, create the branch in the SVN repository then checkout a working copy of your branch. This will create a copy of the trunk that is mostly just softlinks on the server.

First find a name that has not already been taken. You can see a list of [existing branches here.](https://www.assembla.com/code/portaudio/subversion/nodes/1934/portaudio/branches) Look in "portaudio/branches".

I suggest putting your initials in the branch name to avoid collisions. (Or should we use personal folders?) Suppose your initials are azx and you want to create a branch called "azx_fix_underflow". Enter:

```
cd {workarea}
mkdir azx_fix_underflow
cd azx_fix_underflow

svn copy https://subversion.assembla.com/svn/portaudio/portaudio/trunk \
    https://subversion.assembla.com/svn/portaudio/portaudio/branches/azx_fix_underflow \
   -m "Fix underflow in the thingie."

svn co https://subversion.assembla.com/svn/portaudio/portaudio/branches/versioning .
```

To learn more about branching, read the [Red-Bean chapter on Branches.](http://svnbook.red-bean.com/en/1.7/svn.branchmerge.using.html)

## Checking in Changes

TBW

## Requesting a Code Review

TBW

## Submitting the Final Change

TBW

________________________________________________________________________________
Page V20VersionABIChanges.md
*DRAFT WORK IN PROGRESS*

September 2014

## Summary

This page is about changes to the version API. We are in the process of revising this API for PA V20. See the References section at the end for links to mailing list discussions and tickets.

We will move to a "traditional" dotted version number scheme with real releases. Phil notes that "there are some bugs that need fixing and we have not implemented all the things that we have planned. We should continue to work toward those goals.":http://music.columbia.edu/pipermail/portaudio/2014-February/015720.html  However that should not prevent us for moving from date-stamped snapshots to numbered releases.

There are at least two important ML threads on this topic:

"New stable release? (Jan-Feb 2014)":http://music.columbia.edu/pipermail/portaudio/2014-January/015570.html

"trying to create Assembla merge request (Feb 2014)":http://music.columbia.edu/pipermail/portaudio/2014-February/015824.html


## Existing V19 version interfaces

The current public "official" PA V19 source version numbering is based on the timestamp of the stable or nightly tarball, e.g. pa_stable_v19_20140130.tgz

V19 API provides the following two functions to query the API version (see "portaudio.h":http://portaudio.com/docs/v19-doxydocs/portaudio_8h.html, originally added via "this proposal":http://www.portaudio.com/docs/proposals/018-VersionInformationInterface.html):

```
int 	Pa_GetVersion (void)
const char * Pa_GetVersionText (void)
```

Note: Pa_GetVersion has so far always returned 1899 and is hence not very useful. The content of Pa_GetVersionText() is not strictly specified and could be changed or improved.

Some PA structs have a _structVersion_ field. These structVersion fields have not been consistently updated when structs were modified -- therefore they are not a very reliably mechanism.

The following structs contain structVersion fields:

"PaHostApiInfo":http://portaudio.com/docs/v19-doxydocs/structPaHostApiInfo.html
"PaDeviceInfo":http://portaudio.com/docs/v19-doxydocs/structPaDeviceInfo.html
"PaStreamInfo":http://portaudio.com/docs/v19-doxydocs/structPaStreamInfo.html

These structs don't:

"PaHostErrorInfo":http://portaudio.com/docs/v19-doxydocs/structPaHostErrorInfo.html
"PaStreamParameters":http://portaudio.com/docs/v19-doxydocs/structPaStreamParameters.html
"PaStreamCallbackTimeInfo":http://portaudio.com/docs/v19-doxydocs/structPaStreamCallbackTimeInfo.html

Host-API specific data structures may also have some kind of versioning field. e.g PaAsioStreamInfo has a _size_ field rather than a _structVersion_ field:

"PaAsioStreamInfo":http://portaudio.com/docs/v19-doxydocs/structPaAsioStreamInfo.html

TODO: review other host-API specific structs.

Removal of struct version fields is covered in issue #172.


## Requirements (in no particular order)

This section lists requirements and uses-cases for version API features. It is intended to be *exhaustive* so that we can assess interactions between requirements. Some of these requirements need-not be addressed immediately.

### A regular release schedule with actual releases (not just snapshots).

"Graham Goode explains a number of points in this post":http://music.columbia.edu/pipermail/portaudio/2014-January/015588.html

He writes: "from a users perspective what I am trying to communicate is - with this snapshot release please use a release number and not just a snapshot-date. Make it an official release with a version number so there can be release announcements and so that we can reference a defined PortAudio release in our release notes as well."

The main points are:
* Having official release versions allows to formally state that things have been fixed (sends a clearer message about which version to use).
* Increasing version numbers send a clear message that progress has been made (timestamps: not so much).
* Downstream open source projects need a version identifier they can use to point people at who want to build from source. Potentially they could use a newer minor release if there was a policy about when breaking changes happen.
* Announcing a release version would allow package managers of the various Linux Distributions to package the latest code.
* Provide a framework for regular releases (e.g. bug fixes can be rolled into a minor release every 6 months, major release when things are 'complete'.)

### Version numbers should be harmonised across all media

The version number on the tarball should be the same as the one in the code.

### Use "19" to refer to the current API revision (as of start 2014)

"Phil starts the discussion about exactly how to number the current releases here":http://music.columbia.edu/pipermail/portaudio/2014-February/015720.html (this is also the beginning of the discussion about the actual version number format to use)


### Use sane version number format that we can use to refer to releases. 

e.g. "20.0.1"

It is desirable to also use this version number for code-based checks, i.e. _compile-time_ and _run-time_.

Question: we could also encode whether a tarball is an RC or a final release in this version number (or at least in the version info string).


### Have a single increasing number that can be used for comparisons in the code. 

e.g. 20.0.1 might be encoded as 200001


### An API for retrieving the version number of the current executing PortAudio

Allows the user of a program to report running version for debugging [must-have]

This may take three forms, possibly only the first is critical

* A single integer
* A struct with the unpacked version fields
* A string


### Provide a policy and a run-time mechanism that allows the client program to determine API/ABI compatibility when loading a shared library

Allow the client program to detect whether the API/ABI version is compatible at runtime. This may simply mean matching ABI versions, or we may provide backward compatibility within a major version. We need to specify what guarantees we make regarding API/ABI breakage. We could adopt the Linux model "as described by Alan here":http://music.columbia.edu/pipermail/portaudio/2014-February/015728.html

Allows client code to answer the following question(s):
* Can I use this version of the library?


### Provide a policy and a run-time mechanism that allows the client program to determine API/ABI availability when loading a shared library

Answers questions: 
* does this struct have the expected format? 
* does it have an expected field? 

Considerations:
 * function signatures (number and types of params and return values)
 * layout of structs
 * availability of fields in structs


### Compile-time macros for testing the version number

Allows conditional compilation of client code so that it uses PA features only if they are available and/or allows conditional compilation of clients against multiple incompatible PA APIs.

"Users should be able to use Pa_GetVersion() or Pa_GetVersionInfo() to determine the ABI (i.e. it should be usable in place of the old buggy struct version fields."

More discussion here in ticket #173

 
### SVN version number should be queryable at runtime

Assists with PA developers debugging.

Alan notes: "A date tag is OK, but it is a problem  that the svn version is not also available in the compiled library, and this discussion has already taken place, but without resolution.  I would like to see it always there as the master record of the code.": http://music.columbia.edu/pipermail/portaudio/2014-February/015728.html


### Releases should have SVN revision numbers associated with them and be tagged in the repository

A requirement on the release process (possibly already in place)


## Policy Considerations

We need to establish a revision controlled document that documents ABI changes when they are made (ABICHANGES.txt ?)

We need a policy about when ABI changes will be made (major/minor version number increments)

We need a clear version migration path. At what point do we call this V20 (probably when the ABI breaks, see below).


## Decisions that have already been made

As soon as we change the ABI we bump the major version number to 20. We won't be supporting v19 after that.


## Proposals (Unconfirmed)

### V19 to V20 transition

The current API and ABI should be frozen as-is and called major version "19." When we break the ABI or API we'll change to V20. To be specific: no breaking changes will be made at all for V19, not even "simple" or "minimal" changes.

We may move to V20 very soon (and hence break ABI/API) .

We will make a branch for maintaining V19, but we don't have any plans to support V19 once we release a V20 build.

"Transition discussion starts here":http://music.columbia.edu/pipermail/portaudio/2014-February/015799.html


### Version number scheme

Phil's proposal:http://music.columbia.edu/pipermail/portaudio/2014-February/015720.html

```
I think we should use a common version number scheme based on major, 
minor and revision numbering.

Major is bumped when the API changes or significant features are added.
Minor is bumped when lots of changes are made.
Revision is bumped when only minor changes are made.

We could label the releases as follow:

V19.0.0 - 12/7/2007, first release with V19 API so we bump "major"
V19.1.0 - 3/26/2011
V19.1.1 - 11/21/2011
V19.2.0 - 1/30/2014, our most recent "snapshot"

The V19 release that has all the bugs fixed might be something like 
V19.7.3. If we later find and fix a bug then we can put out V19.7.4.

When do we "release" code? I think we should release when we have a 
stable version that is better than the last stable version. We cannot 
wait for perfect code because it will never happen.

Are you OK with this compound version number?

#define VERSION ((MAJOR<<16) + (MINOR<<8) + REVISION)
```


"Alan's summary of the Linux version number landscape *very important information*, also one of the summing-up emails in that thread":http://music.columbia.edu/pipermail/portaudio/2014-February/015728.html

We need to decide exactly what policy we adopt regarding the meaning of the version numbers.


### Version number API

Retain Pa_GetVersion() as a minimal single version number API. Don't deprecate it (was previously suggested).

Add new API in V20 that supports split numbers and SVN revision (what happens if we switch to Git?)

"Back in 2008 Ross proposed":http://music.columbia.edu/pipermail/portaudio/2008-February/008347.html

```
PaVersionInfo{
    int majorVersion;
    int minorVersion;
    int buildNumber;
    int svnRevision;
    const char *versionText;
};

const PaVersionInfo* Pa_GetVersionInfo();
```

We need to keep Pa_GetVersion() to have a single number for comparison, and also because it's the only way to version the PaVersionInfo struct.


### Have only a single ABI version, not per-struct version info.

Remove version numbers from structs:
[#172](../issues/172)

The proposal is not to add struct length fields, but I think this needs to at least be considered -- RB

bq. "I can see the value in having struct sizes too. Should we consider that? The main down side I see is that it will force *everyone* to update their code, for the benefit of us /maybe/ adding fields to the end. It kind of gives us two revision mechanisms: (1) increase struct length to add optional fields, (2) bump major version number to break ABI any way we like (also supports adding fields if clients know about the ABI changes). Do we need 2 mechanisms?"


## Proposed Immediate action (subject to review)

"Phil drew the following conclusions (Ross agrees)": http://music.columbia.edu/pipermail/portaudio/2014-February/015810.html

- We stop releasing anything called V19. Make the needed API/ABI changes (including fixing all the version stuff, see below, release it as V20.0.0. Continue development as we are now. The folks who want to call the current code "V19" can continue doing so.  They can consider the 20140130 snapshot as the "final V19 release".  Officially, we will just skip V19 and go to V20.
- Let's keep trunk-stable.
- Let's just make a V19 branch in case we ever need to patch it. We don't have to patch it. It just gives us the option.

Phil proposed these steps:

#1 Create a "V19" branch and then just leave it. Declare it deprecated.
#2 First change in V20 is to implement version numbering as 20.0.0.
#3 Follow up with all the API changes.
#4 Create a stable snapshot of "V20.0.x". 

(Alternatively we could add the version number changes, then do one last V19 release.)

### The repo needs to be structured to support merge requests (remove redundant/old top level repos).

We have 3 projects in one.

https://www.assembla.com/code/portaudio/subversion/nodes

I guess we should have had a trunk and branches at the root and put our projects under trunk.

Not sure what to do about that. I tried the suggested workaround and it seems to work but is clunky. Maybe some svn moves...



## References

* #173 "Improved API library version API":[#173](../issues/173)

* #172 "Remove structVersion field from PaHostApiInfo, PaDeviceInfo and PaStreamInfo":[#172](../issues/172)

* #174 "[META] ABI/API changes before V19 final release":[#174](../issues/174)
- #58 API calling convention and pack
- #169 Portaudio should expose host API specific stream information
- #172 Remove structVersion field from PaHostApiInfo, PaDeviceInfo and PaStreamInfo
- #173 Improved API library version API
- #225 PA should expose host API specific device information

________________________________________________________________________________
Page ImplementationStyleGuidelines.md
# Implementation style guidelines

This page specifies coding guidelines for PortAudio contributors. Some guidelines pertain to mechanical style, others to quality of implementation issues. Since the PortAudio code is edited on many different platforms, using many different editors, these guideline should be followed to improve readability and consistency.

## PortAudio API design guidelines

The PortAudio design guidelines are restated below. They apply to implementation as well as to API design:
 * Implementation should be possible on all common computer music platforms.
 * Clients of PortAudio should be able to achieve efficient, and ideally optimal use of the audio services on all target platforms.
 * The API should be simple enough to be used by music students with minimal experience in C programming.
 * The API should seek to provide only low-level audio services, and to only support those services directly available on the host platform.

Note that the last guideline has been relaxed with regard to audio sample formats and user buffer sizes - PortAudio can convert between a number of sample formats and can adapt to the user's buffer size requirements.

## Formatting conventions

The following formatting conventions should be adhered to in all PortAudio code:

 * TABs should NOT be used in .c and .h files; instead 4 spaces should be used. Makefiles should continue to use TABs since this is required by Make.
 * Line-end characters will be consistent with the platform on which the source has been checked out of SVN (SVN handles this).
 * Brace placement will follow ANSI style:
```
if( aCondition )
{
    DoSomething();
}
else
{
    DoSomethingElse();
}
```
 * C-Style comments should be used:
```
/* this comment is OK */
// this comment is NOT OK
```
* Multi-line comments should match this format:
```
/* In multi-line comments, the first line of text
 * should be on the same line as the opening *
 * The left margin should be vertically aligned with
 * one space between the * and the text.
 */
```

If the style is not specified here, when in doubt, follow the conventions of the surrounding code.

## Tools for checking code compliance to style guidelines

"AStyle":http://astyle.sourceforge.net <"http://astyle.sourceforge.net":http://astyle.sourceforge.net> has been proposed as helpful tool for cleaning code, however we don't intend to use it on an ongoing basis. It is expected that contributors of each implementation will take responsibility for keeping their code clean.

## Quality of implementation guidelines

The following coding guidelines should be followed in order to establish a quality baseline for our implementations:

 * All code should be written in C++-compatible plain ANSI C89. We suggest that all implementations should compile silently with both "`gcc -ansi -pedantic -Wall`" and "`g++ -ansi -pedantic -Wall`". An exception is host-api modules that must be written in C++ (e.g. pa_asio.cpp). In this case a maximally compatible dialect of C++98 should be used.
 * Always code defensively. Where necessary, think of PortAudio as a heavyweight library rather than a lightweight wrapper. Efficiency is important where it matters (e.g. in real-time callbacks) but safety is important everywhere.
 * All parameters passed to PortAudio by the user should be validated, and error codes returned where necessary. All reasonable efforts should be made to minimise the risk of a crash resulting from passing incorrect parameters to PortAudio.
 * Error handling should be complete. Every host function that can return an error condition should have its status checked. PortAudio may attempt to recover from errors in some cases, but generally error codes should be returned to the client.
 * In almost all cases, a PortAudio error code should be preferred to returning `paHostError`. If a new PortAudio error code is needed it should be discussed on the mailing list to coordinate updating portaudio.h
 * PortAudio code should not leak resources. After `Pa_Terminate()` is called, implementations should ensure that all dynamically allocated resources have been freed.
 * The definition of the PortAudio API should minimise "implementation defined behavior". For example, calling functions such as `Pa_Initialize()` after PortAudio is initialized, or `Pa_Terminate()` after PortAudio has been terminated has well defined behavior.
 * Minimise dependence on ANSI C runtime on platforms where it would have to be loaded separately (e.g. on Win32 prefer Win32 API functions such as `GlobalAlloc()` to ANSI C functions such as `malloc()`).

It has been suggested that we make an effort to minimise the use of global and static data in PortAudio implementations. Another related goal is to reduce name pollution in the global scope. Some provisional guidelines are:

 * Implementations should avoid exporting any symbols except where absolutely necessary. Specifically, global data must be declared statically. The next section documents naming conventions for all PortAudio symbols.
 * Implementations should minimise their use of static data.

When in doubt, discuss it on the mailing list.

## Naming conventions

 * All `#defines` begin with `PA_`
 * All `#defines` local to a file end with `_`
 * All global utility variables begin with `paUtil`
 * All global utility types begin with `PaUtil` (including function types)
 * All global utility functions begin with `PaUtil_`
 * All static variables end with `_`
 * All static constants begin with `const` and end with `_` (e.g.: `constMyMagicNumber_`)
 * All static functions have no special prefix/suffix
 * Platform-specific shared functions should begin with `Pa<PN>`_ where `PN` is the platform name. eg. `PaWin_` for Windows, `PaUnix_` for Unix.

In general, implementations should declare all of their members static, except for their initializer, which should be exported. All exported names should be preceded by `Pa<MN>_` where `<MN>` is the module name, for example the Windows MME initializer should be named `PaWinMme_Initialize()`.

If it is necessary for implementations to define non-static symbols, they should use the following naming conventions, where <MN> is the module name such as WinMme.

 * global variables should begin with `pa<MN>`
 * global types should begin with `Pa<MN>`
 * global utility functions should begin with `Pa<MN>_`

## Debug message logging

Two utilities for debug messages are provided:

 * The PA_DEBUG macro defined in `pa_debugprint.h` provides a simple way to print debug messages to stderr. In order to enable this feature, PortAudio should be built with `PA_ENABLE_DEBUG_OUTPUT` defined (passing the `--enable-debug-output` flag to the configure script or setting it in the "Preprocessor definitions"). Due to real-time performance issues, `PA_DEBUG` may not be suitable for use within the PortAudio processing callback, or in other threads.
 * When real-time event tracing is required it is best to use the facility provided in `pa_trace.h`. In order to enabled this feature, `PA_TRACE_REALTIME_EVENTS` should be set to 1 in the file `pa_trace.h` when building PortAudio. If `PA_LOG_API_CALLS` is defined, all calls to the public PortAudio API will be logged to stderr along with parameters and return values.

## Doxygen doc comments

At a minimum, each source and header file should contain a doxygen `file` doc comment with a `brief` description and an `in_group` specification. For example:

```
/** @file
 @ingroup common_src

 @brief Buffer Processor implementation.
*/
```

Note that these requirements can be checked by running the `doc/utils/checkfiledocs.py` script as follows:
```
$ cd doc/utils
$ python checkfiledocs.py
```

It will print a list of all violations.

Functions and structures intended for use by other modules should contain doxygen doc strings for each function and its parameters, and for each structure and its members. For an example, see `src/common/pa_ringbuffer.h`.

________________________________________________________________________________
Page Platforms_RaspberryPi.md
# PortAudio on Raspberry Pi

Please make sure that ALSA audio is working before trying to use PortAudio. I recommend starting with the analog headphone jack.  Here are two blogs that can get you started:

http://karuppuswamy.com/wordpress/2015/08/15/configuring-alsa-audio-output-on-analog-and-hdmi-of-raspberry-pi/
http://cagewebdev.com/index.php/raspberry-pi-getting-audio-working/

You can compile PortAudio directly on the Raspberry Pi.

PortAudio uses ALSA. So you will need to install the ALSA developer library
`sudo apt-get install libasound-dev`

I recommend using the nightly snapshot of PortAudio V19 from http://www.portaudio.com/download.html

Then compile PortAudio and the examples.
```
cd portaudio
./configure
make
```

You can execute some examples in the bin folder:

```
bin/pa_devs
bin/paex_sine
```

Note that the default latency may be too low: [#246](../issues/246)

You may see lots of errors like this: ALSA lib pcm.c:2565:(snd_pcm_open_noupdate) Unknown PCM cards.pcm.front

They can be safely ignored. That is a known issue:  [#163](../issues/163)

Also note that: Alberto di Bene reported that he had to link with -lgcc to avoid linker errors when statically linking with libportaudio.a on Raspbian.


________________________________________________________________________________
Page Administration_Log.md
This is a diary of administrative change to the PortAudio source control system and websites.

5/1/2016 - [[Migrate SVN to Git|20160501 Migrate SVN To Git]]


________________________________________________________________________________
Page 20160501_Migrate_SVN_To_Git.md
Phil Burk

We wanted to enable Merge Requests and Code Review. Also Git has better branching. So the community decided to move to Git.

Assembla did not seem to have a good SVN to Git conversion tool. SO I imported the Assembla SVN repo into GitHub, which preserved all the branches and tags.

I then cloned the GitHub repo and pushed it to Assembla. Somewhere along the way we lost the branches. But they are old and not very active. So we may be able to just pull out the changes manually from SVN and remerge them.

Also the author information was not completely preserved. We have names on the commit history. But the names do not link to Assembla accounts.

Here are the steps I followed to upload the repo to Assembla.

```
git clone https://github.com/philburk/portaudio-xfer.git portaudio
cd portaudio/
git remote rename origin github
git remote add origin git@git.assembla.com:portaudio.git
git config --local user.email "burkphil@gmail.com"
ssh-keygen -t rsa -C "burkphil@gmail.com"
git push --all -u origin
```

________________________________________________________________________________
Page UsingTheGitRepository.md
# Using Git with PortAudio

This page has brief instructions for using Git. Git is extremely powerful so it is worth learning more about Git. Here are some links to more information.

* [Atlassion Git Tutorial](https://www.atlassian.com/git/tutorials/)
* [Interactive Git Tutorial on GitHub](https://try.github.io/levels/1/challenges/1)
* [Git Reference](http://gitref.org/index.html)

## Checking Out the Git Repo

Visit [this page](https://github.com/PortAudio/portaudio/) to get the URL for cloning the repo. For example, to clone using HTTP:

```
git clone  https://github.com/PortAudio/portaudio.git
```

## Making a Change

Before making a change, you should start a new branch. You should never work in the master branch. If you are working on fixing a ticketed bug, eg. #123,  you could name the branch ticket_123. To start a branch named "ticket_123", enter:

```
cd portaudio
git checkout -b ticket_123
```

You can see a list of current branches:

```
git branch
```

Make changes to the code using your favorite text editor or IDE. Then to see what is changed enter:

```
git status
git diff
```

You can stage these changes and make them ready to be committed. You can either add individual files by filename or by folder. Or add everything under the current directory using a dot:

```
git add .
git status
```

Now commit the changes to your local repository.

```
git commit
git diff HEAD^
```

You will be asked to enter a change log. Please put a summary on the first line. Then leave a blank line. Then add more text.

Now you can push your "ticket_123" branch to Assembla.

```
git push origin ticket_123
```

## Creating a Merge Request

Now go to Assembla and create a Merge Request for your branch into master. On this page:

https://github.com/PortAudio/portaudio/

click on a "New Merge Request" near the top right of the page.
Then select your branch, eg. "ticket_123" as the "From" branch and "master as the "To" branch.
You will see a button appear to "Create a Merge Request".

After creating a Merge Request, please ask for a code review. You can send an email to the PortAudio mail list along with a link
to the Merge Request.

## Modifying a Merge Request

If your request is approved then you can merge it. But you may need to make a change to Merge Request. Go back to the same branch:

```
git checkout ticket_123
```

Edit the files as needed. Then add and make a new commit. (Do not amend the old commit.)

```
git status
git add .
git commit
git push origin ticket_123
```

Your latest change will be a new "changeset" or "version" in the same Merge Request.

## Submitting the Merge Request

After it has been approved, you can merge your new code by clicking the Merge button in the Merge Request.

## Cleaning Up

When you are certain that the merge is complete, you can delete the branch in your local repository:

```
git branch -D ticket_123
```

You can also delete the branch in the main remote repository by pushing an empty source branch. Note the ':' before the important branch name. If you don't feel comfortable doing this then we will periodically delete stale branches.

```
git push origin :ticket_123
```

## Commenting on a MergeRequest

Please use the Assembla code review system to critique code instead of the PA mail list.

If you want to leave a comment specific to a line of code then:

1. Go to the MergeRequest page.
1. Click on the "Files" tab.
1. Click on "View Diff" or "Expand all diffs".
1. Hover over a line number and notice the little black rectangle that appears.
1. Click on the little rectangle.
1. An edit box will appear and you can enter a line comment.
1. Click "Submit" to save it.

If you want to leave an overall comment then you can do that in the "Activities" tab.

________________________________________________________________________________
Page Platforms_Mac_OS_X.md
# Developing PortAudio on Mac

Create an XCode Command Line project.

Add Mac OS Frameworks
1. click on the project
1. click on "Build Phases"
1. click on "Link Binary with Libraries"
1. click on "+" then add
   *  AudioToolbox.framework
   *  AudioUnit.framework
   *  Carbon.framework
   *  CoreAudio.framework
   *  CoreServices.framework

Add PortAudio Source Code
1. right click on the project
1. select "Add files to {your project}"
1. navigate to the "portaudio/src/common" folder and "Add" it
1. repeat for "portaudio/src/hostapis/coreaudio"
1. repeat for "portaudio/src/os/unix"
1. repeat for "portaudio/includes"

You will need to delete the reference to "coreaudio/pa_mac_core_old.c" because it has some duplicate symbol names.

Now use the same procedure to add an example program, eg. "portaudio/examples/paex_sine.c".

If you tried to build and run that program now you would probably get an error like:  "Error: No default output device."

So we need to define some preprocessor variables:
1. click on project
1. click on "Build Settings"
1. scroll down to "Apple LLVM # Preprocessing"
1. Add PA_USE_COREAUDIO=1 to both the Debug and Release Preprocessor Macros


________________________________________________________________________________
Page HotPlug.md
HotPlug refers to the capability to detect newly connected devices once PortAudio is running, and also to gracefully deal with disconnected devices. We would like to add support for this to PortAudio. Some progress has already been made by David Stuart, Robert Bielik and Ross Bencina.

The feature was originally discussed in ticket #11.

The feature has a work-in-progress implementation on the *hotplug* branch, now available in the git repo here:
https://github.com/PortAudio/portaudio/tree/hotplug

API Design
-----------------

Key requirement: the new hotplug feature should be transparent to existing clients that don’t directly use the hotplug API.

### API Invariants

Prior to calling `Pa_RefreshDeviceList()`:

* There are no observable changes to the PA device list.
* `Pa_OpenStream` on a disconnected device results in a "device unavailable" error
* Opening the specified device actually opens that device (not some other device). i.e. not only is the PA device list stable, but the PA device indices reliably map to unchanging native devices, even if native devices are connected and disconnected. [note: this may not be the case in some host APIs right now.]

During/after calling `Pa_RefreshDeviceList()`:

* Unrelated open streams are unaffected by device connection/disconnection. Audio is not interrupted (unless a device associated device with the stream is disconnected). In all cases, open stream handles remain valid and must be closed by the client.
* The device list is updated with the currently connected devices (similar to calling `Pa_Initialize()`)
* No device notifications are dropped during refresh. If devices are inserted/removed during refresh an additional notification may be received just before `Pa_RefreshDeviceList()` returns.
* (?) `PaDeviceInfo` pointers for disconnected devices become invalid 
* (Sept. 19) The following values relating to default devices may change after a successful call to `Pa_RefreshDeviceList()`: `PaHostApiInfo::defaultInputDevice`, `PaHostApiInfo::defaultOutputDevice`, `Pa_GetDefaultHostApi()`, `Pa_GetDefaultInputDevice()` and `Pa_GetDefaultOutputDevice()`. On failure they are unchanged.


Unclear:

* There may be scope for a notification race around `Pa_Initialize`. Possibly allow for setting the connection notification callback prior to calling `Pa_Initialize`


Current Proposed API, From GIT Hotplug Branch
------------------------------------------------

(Updated September 19, 2016)

This section describes the current proposed API that is available in the hotplug branch in GIT here:
https://github.com/PortAudio/portaudio/tree/hotplug

### Public API

The public hotplug API is listed below in full (this was derived from a diff of `portaudio.h` in the hotplug branch.

`Pa_Initialize()` is extended with the following information:

```
 @note The device list returned by Pa_GetDeviceCount() et al, default devices,
 and the default host API are all frozen when Pa_Initialize() is called. The
 device list is not automatically updated when hardware devices are connected or
 disconnected. To refresh the list of devices, and default devices, either call
 Pa_RefreshDeviceList() or uninitialize PortAudio using Pa_Terminate(),
 and then reinitialize it by calling Pa_Initialize(). To register a callback
 when native devices or defaults change, call Pa_SetDevicesChangedCallback().
```

### Pa_RefreshDeviceList()

A new `Pa_RefreshDeviceList()` function is added:

```
/** Refresh PortAudio's list of devices to reflect currently available
 native audio devices. Also refreshes default devices and default host API.

 PortAudio's list of devices is usually frozen when Pa_Initialize() is
 called. Call Pa_RefreshDeviceList() to refresh PortAudio's device list
 at any time while PortAudio is initialized.

 @return an error code indicating whether the refresh was successful.

 If the function succeeds, future calls to Pa_GetDeviceCount() may return
 a different count than before, all device indexes may refer to
 different devices, and any previously returned PaDeviceInfo pointers are
 invalidated. Default devices reflected by PaHostApiInfo.defaultInputDevice,
 PaHostApiInfo.defaultOutputDevice and global defaults returned by
 Pa_GetDefaultHostApi(), Pa_GetDefaultInputDevice() and
 Pa_GetDefaultOutputDevice() may changed.

 If the function fails, the device list and defaults are unchanged.

 @note Open streams will not be affected by calls to this function.
 */
PaError Pa_RefreshDeviceList( void );
```

(Sept. 19) In addition to refreshing the device list, `Pa_RefreshDeviceList()` updates default devices. This was already being done in the prototype implementations and is now explicit in the API documentation. Updating default devices has the consequence that the default host API may change. (The default host API is specified as the first host API with an available device.) The implementation of `Pa_RefreshDeviceList()` has been updated to correctly update the default host API in hotplug branch.

### Get a Callback When Native Devices Are Connected/Disconnected

It is possible to register a callback that is called when devices are inserted and/or removed:

```
/** Functions of type PaDevicesChangedCallback are implemented by PortAudio
 clients. They can be registered with PortAudio using the Pa_SetDevicesChangedCallback
 function. Once registered, a callback is invoked whenever available native audio
 devices may have changed. For example, when a USB audio device is connected or
 disconnected. The callback is also invoked whenever the native default device
 selection changes.

 When the callback is invoked, there is no change to the devices listed by
 PortAudio. To update PortAudio's view of the device list, the client
 must call Pa_RefreshDeviceList(). This must not be done from within
 the callback.

 The callback may occur on any thread. The client should not call other PortAudio
 functions from within a PaDevicesChangedCallback. In particular, the client
 should not directly call Pa_RefreshDeviceList() from within the notification
 callback. Instead, the client should set an atomic flag, or queue a message to
 notify a controller thread that would then call Pa_RefreshDeviceList().

 @param userData The userData parameter supplied to Pa_SetDevicesChangedCallback()

 @see Pa_SetDevicesChangedCallback
*/
typedef void PaDevicesChangedCallback( void *userData );


/** Register a callback function that will be called when native audio devices
 become available or unavailable, and when native default devices change.
 See the description of PaDevicesChangedCallback for further details about
 when the callback will be called.

 @param userData A client supplied pointer that is passed to the devices changed
 callback.

 @param devicesChangedCallback a pointer to a callback function with the same
 signature as PaDevicesChangedCallback. Passing NULL for this parameter will
 un-register a previously registered callback function.

 @return on success returns paNoError, otherwise an error code indicating the
 cause of the error.

 @note Only one function pointer may be registered at a time.

 @see PaDevicesChangedCallback
*/
PaError Pa_SetDevicesChangedCallback( void *userData, PaDevicesChangedCallback* devicesChangedCallback );
```

### Added “connectionId” Field to PaDeviceInfo. 

Connection ids uniquely identifies a device, so long as the device is plugged in and PortAudio is initialized. There is now a stub implementation in all host APIs. The stub implementation works fine for APIs that don't support refreshing the device list.

```
/** An integer id that uniquely identifies a device, so long as the device is
 plugged in and PortAudio is initialized. Its purpose is to identify (correlate)
 devices across calls to Pa_RefreshDeviceList().

 Each device reported by Pa_GetDeviceInfo() has a distinct connectionId.

 PortAudio makes a best-effort to ensure that a persistent underlying device
 has the same connectionId before and after a single call to Pa_RefreshDeviceList().

 If a device is disconnected and later reconnected it may be assigned a new
 connectionId.

 @see Pa_RefreshDeviceList()
*/
typedef unsigned long PaDeviceConnectionId;
```

```
typedef struct {
...
    PaDeviceConnectionId connectionId; /**< @see PaDeviceConnectionId */
} PaDeviceInfo;
```

`connectionId`s are unique and not reused (until PA is terminated). Disconnecting and reconnecting a device results in a new `connectionId` value. If a device is not disconnected, it should retain the same `connectionId` across calls to `Pa_RefreshDeviceList()`. There may be corner-cases where there is no programmatic way to implement this behavior -- we will have to finish the implementations to learn this.

(Sept. 19) *IMPLEMENTATION GOAL:* We are currently trying to implement the invariant: "The `connectionId` is guaranteed to change whenever the device is disconnected, even if it is immediately reconnected." If experience shows that this is not feasible we will fall back to the  relaxed specification "may be assigned a new `connectionId`".

Use case: 5 identical USB microphones (all with the same name, indistinguishable except for their PA device index and connection id), use `connectionId` to correlate individual devices across device list refresh. Disconnect one device, others retain their `connectionIds`. (Host API implementations will need to use low-level knowledge such as USB connection paths to implement this).

N.B.: `connectionId` is considered orthogonal to the “persistent device identifiers” concept discussed below.

A `PaUtil_MakeDeviceConnectionId()` internal method is available to implementers to generate new Ids.

Possible alternative names: monotonic device id, hotplug seed, device locator, insert id, session id, hotplug id


### Internal Host API Interface For Refreshing Device List

This is the interface that each host API implementation must implement in order to support hot-plug. Three methods are added to `PaUtilHostApiRepresentation` defined in `pa_hostapi.h`. The interface involves 3 methods: `ScanDeviceInfos`, `CommitDeviceInfos`, `DisposeDeviceInfos`. `pa_front.c` calls these methods to update the device list using a two-phase approach. It first rescans all of the host APIs by calling `ScanDeviceInfos` on each host API, if this succeeds then `pa_front` calls `CommitDeviceInfos` to "install" the new device infos, on failure it calls `DisposeDeviceInfos`.

```
   /** ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos are used to refresh the device list.
    
      You can think of the caller doing something like:

      void *scanResults = 0;
      int newDeviceCount = 0;
      if( hostApi->ScanDeviceInfos(hostApi, hostApiIndex, &scanResults, &newDeviceCount) == paNoError )
      {
        ... do other stuff ...

        if( ok to commit )
        {
            hostApi->CommitDeviceInfos(hostApi, hostApiIndex, scanResults, newDeviceCount);
        }
        else
        {
            hostApi->DisposeDeviceInfos(hostApi, hostApiIndex, scanResults, newDeviceCount);
        }
      }

      NB: ScanDeviceInfos may be called on all host APIs first, prior to pa_front
      deciding whether to commit or cleanup.
    */

    /**
     Scan for current native device information and compute a new device count.
     Preparation step of a two-stage transaction that updates the active device list.

     @param hostApi The target host API.

     @param index The host API index of the target host API.

     @param scanResults (OUT) Result parameter. Upon success, set to point to an 
     opaque structure containing collected device information. Ignored on failure.

     @param newDeviceCount (Out) Result parameter. Upon success, set to the 
     number of discovered devices. Ignored on failure.
     
     @return on success returns paNoError, otherwise an error code indicating
     the cause of the error.

     This function should not make any visible changes to the host API's internal
     state. In particular, it should not update the active device list, device
     information or device count.

     If the function returns successfully, the caller will either (1) pass 
     scanResults and newDeviceCount to CommitDeviceInfos() to complete the 
     transaction, or (2) pass scanResults  and newDeviceCount to
     DisposeDeviceInfos() to abort the transaction.

     @note CommitDeviceInfos and DisposeDeviceInfos should not fail, therefore
     ScanDeviceInfos should perform all necessary preparations, 
     such as memory allocation, so that CommitDeviceInfos can always execute
     without failure.

     @see CommitDeviceInfos, DisposeDeviceInfos
     */
    PaError (*ScanDeviceInfos)( struct PaUtilHostApiRepresentation *hostApi,
                                PaHostApiIndex index,
                                void **scanResults,
                                int *newDeviceCount );

    /**
     Update the active device list with new device information that was
     returned by ScanDeviceInfos(). This is the final commit step of a two-stage
     transaction that updates the active device list.

     As this function is not permitted to fail, it should be very simple:
     swap in new device information and free the old information.

     @param hostApi The target host API.

     @param index The host API index of the target host API.

     @param scanResults An opaque structure containing collected device 
     information previously returned by ScanDeviceInfos. This is the information
     that will be installed into the active device list.

     @param newDeviceCount The number of discovered devices previously returned
     by ScanDeviceInfos. This is the new number of devices in the active device
     list.

     @note This function is not permitted to fail. It should always return paNoError.

     @see ScanDeviceInfos, DisposeDeviceInfos
     */
    PaError (*CommitDeviceInfos)( struct PaUtilHostApiRepresentation *hostApi, 
                                  PaHostApiIndex index,
                                  void *scanResults,
                                  int deviceCount );

    /**
     Free device information that was returned by ScanDeviceInfos. This is 
     used in the cleanup process for a failed two-stage transaction.
     
     @param hostApi The target host API.

     @param index The host API index of the target host API.

     @param scanResults An opaque structure containing collected device 
     information previously returned by ScanDeviceInfos. scanResults will be
     freed by this function. 

     @param newDeviceCount The number of discovered devices previously returned
     by ScanDeviceInfos.

     @note This function is not permitted to fail. It should always return paNoError.

     @see CommitDeviceInfos, ScanDeviceInfos
     */
    PaError (*DisposeDeviceInfos)( struct PaUtilHostApiRepresentation *hostApi, void *scanResults, int deviceCount );
```


### Summary Source Changes in Hotplug Branch

* `portaudio.h` new API
* `pa_hostapi.h` host-api internal rescan/refresh interface
* `pa_front.c` implements the 2-phase device list refresh
* `pa_hotplug.h` interface between platform notification engine and `pa_front.c`
* `pa_win_ds.c` has a working device refresh implementation for DirectSound
* `pa_win_wdmks.c` has a working device refresh implementation for WDM/KS
* `pa_win_hotplug.c` implements device insertion/removal notifications for Windows using `RegisterDeviceNotificationW` `DEVICE_NOTIFY_ALL_INTERFACE_CLASSES` API. Includes a device cache to track which devices are currently connected
* `patest_refresh_device_list.c` is a simple test of the hotplug API that displays device insertion/removal events, rescans devices, and lists them.

Other files with minor changes 

* `portaudio.def` export new API symbols
* `pa_win_wmme.c` zero function ptrs for no-op device refresh



Tests and Testing
-----------------

(Last Updated September 19)

At the time of writing, testing is very ad-hoc. We need to write more tests, and to test each implementation in detail. Some tests are on feature branches, not yet merged to hotplug (links below).


### Scenarios That We Can (At Least Partially) Test Today


* Test that the `PaDevicesChanged` callback is invoked, and that `Pa_RefreshDeviceList() `adds/removes devices. [hotplug:patest_refresh_device_list.c](https://github.com/PortAudio/portaudio/tree/hotplug/test/patest_refresh_device_list.c)

* Test that streams do not hang when the stream's device(s) are unplugged (callback, `Pa_ReadStream()`, `Pa_WriteStream()`. [hotplug:patest_unplug.c](https://github.com/PortAudio/portaudio/tree/hotplug/test/patest_unplug.c) [rb-hotplug-wmme:patest_unplug.c](https://github.com/PortAudio/portaudio/tree/rb-hotplug-wmme/test/patest_unplug.c) [rb-hotplug-wmme:patest_unplug_readwrite.c](https://github.com/PortAudio/portaudio/tree/rb-hotplug-wmme/test/patest_unplug_readwrite.c) 

* Test that streams can be aborted, stopped and/or closed without hanging after a streaming device is disconnected. [rb-hotplug-wmme:patest_unplug.c](https://github.com/PortAudio/portaudio/tree/rb-hotplug-wmme/test/patest_unplug.c) [rb-hotplug-wmme:patest_unplug_readwrite.c](https://github.com/PortAudio/portaudio/tree/rb-hotplug-wmme/test/patest_unplug_readwrite.c)  (Test is very preliminary, requires manual manipulation of `#if` to test the stop and abort cases.)


### Scenarious That Need New Tests

In all cases below, tests involving streams need to test input-only, output-only, full-duplex, callback and blocking read/write streams.

* Test that unreleated streams are not affected by `PaDevicesChanged` callback and calls to `Pa_RefreshDeviceList() `

* Test that streams becomes inactive and enters the correct error state when their device is unpluged (requires updated specification of the stream state machine for asynchronous errors).

* Test that the correct device is opened when calling `Pa_OpenStream()` after connecting a new device, but prior to calling `Pa_RefreshDevices()`. (There is a possible failure mode where a different device is opened, depending on how PA devices are matched to host API devices. This is likely buggy with WMME at the moment, a partial test would be to open each device with max channels to ensure we at least maybe have the correct devices by expecting paNoError or paDeviceUnavailable.)

* Test that opening a disconnected device with `Pa_OpenStream()`, prior to calling `Pa_RefreshDeviceList()` returns `paDeviceUnavailable`.

* Test that default device changes are notified, and that defaults are updated (maybe extend `patest_refresh_device_list.c` to indicate default devices? [Erik Bunce's patch](https://app.assembla.com/spaces/portaudio/tickets/11/details?comment=65652633) might give some ideas.)

* Could have a test that plays audio out the default device and "follows" the current default device(s) when they change.


Proposed Changes/Additions to Hotplug Branch
-----------------

(Updated September 2, 2016)

This section describes changes that we plan to make on the hotplug branch, but that haven't been actioned yet.

### Misc

(Sept. 19) Windows (and Linux?) notification engines don't call `PaDevicesChangedCallback` when default devices change.

Device info `connectionId` has been added, but it is not yet correctly persistent for the host APIs that support refresh (DirectSound and WDM/KS)

### Remove Error Return From CommitDeviceInfos/DisposeDeviceInfos Internal Interface.

The `CommitDeviceInfos` and `DisposeDeviceInfosinternal` functions should be coded in such a way that the never fail. Therefore returning an error code probably doesn’t make sense (it would be like throwing an exception from a destructor).


Earlier Hotplug Work and Patches
-----------------

Work prior to August 2016 was stored in the hotplug branch in SVN (now merged to git, see link above). Old SVN link:
https://app.assembla.com/spaces/portaudio/subversion/source/HEAD/portaudio/branches/hotplug For reference, there is an annotated version of the SVN log for the hotplug branch here: [HotPlug_SVN_Log]([[HotPlug_SVN_Log]]). It includes links to the individual commits.

There are also two other hotplug contributions that may be useful:

David Stuart’s 2010 patch for DirectSound and CoreAudio, last known CoreAudio version, written prior to 2-phase commit. (click “expand all diffs”)
7fcdfbf5dfbd43ee042bfbc72de7136ed5895c64

Erik Bunce’s 2007 patch, CoreAudio, includes notifications (download the patch)
https://app.assembla.com/spaces/portaudio/tickets/11/details?comment=65652633


Open Questions
-----------------

### Questions requiring discussion and decision

After device list refresh, what happens to `PaDeviceInfo` struct pointers that reference disconnected devices? Proposal: they are freed and no longer valid. Discuss, decide.

Review names for functions and fields.

Question: does `Pa_RefreshDevices()` guarantee to not update existing devices, or can it update existing devices (e.g. if some system parameter has changed such as default sample rate)?

When should the notification engine be started/stopped? At the moment, the device changed notification engine is started during `Pa_Initialize()` and stopped during `Pa_Terminate()`. Alternatively it could be started when the notification callback is registered. There might be reasons why Robert configured it the way he did. [note also: if we're going to allow registering the callback before Pa_Initialize, we may want to defer starting the notification engine until Pa_Initialize().]

### Questions requiring design work and/or research

Device disconnection may require async error reporting, or at least an “error” stream state, which is not currently implemented. A `Pa_GetStreamError()` function could query why a stream failed (e.g. due to disconnection). This is bound up with adding an error state to the stream state machine. (Ross to move documentation for stream state machine into the main documentation.)

*How functions that call multiple-APIs should fail.* During `Pa_Initialize()` and `Pa_RefreshDeviceList()` each host API is called in turn. When a host API returns an error, there are many error handling policies. So far, two policies are of interest. Policy 1 is what is currently implemented. (1) As soon as an error is encountered, roll back to the previous state and return an error. In the case of Pa_Initialize(), this means that Pa_Initialize() fails and cleans up when the first host API fails. In the case of `Pa_RefreshDeviceList()`, this means that if any host API fails, an error is returned and all device lists are rolled back to their pre-call state. (2) When an error is encountered, skip or roll-back that host API but continue to initialize/refresh other host APIs.
Policy 1 does not guarantee forward progress. Policy 2 does not return full error information. Both policies suffer from making a policy decision that only the client can decide on for sure. Note that something close to policy (2) is implemented for some host APIs (errors during device enumeration cause devices to be skipped), possibly this is not consistent.

Options discussed so far:

* Stick with current “consistent” design for Pa_Initialize() and Pa_RefreshDevices()
* Could introduce a policy parameter to Pa_RefreshDevices() `enum { paFailFast, paSkipOnHostApiError }`
* Add a new API function: `Pa_RefreshHostApiDevices(hostApiIndex)` that allows for initializing individual host APIs. This would allow the client to implement the “fail fast” policy. It would *not* allow the client to implement the current “global rollback on first error” policy, as the rollback mechanism would not be exposed in the API.



### Questions requiring implementation experience

Evan proposed a `Pa_GetDeviceError` function to probe for whether a device is still connected (Returns PaNoError if the device appears healthy, or an error code if some kind of problem, such as disconnected state, is identified.). It’s unclear whether this is implementable. To be explored. (Note that you can already track device insertion/removal notifications and call refresh if you want to know whether a device is still connected).

Robert pointed out that WASAPI has its own notification mechanism  for insertion/removal of WASAPI endpoints (this might be needed for e.g. virtual endpoints which would no show up as devices). Therefore we may need to support per-API notification engines. Right now we assume there is only one per platform. Not sure which other APIs have their own notification mechanisms.

Sqweek raised the issue of “Default output device” transparently switching between headphone and speakers when headphones are plugged in. It’s not clear whether this conflicts with our goal of hotplug not messing with open streams. Ross thinks this is a detail for individual host APIs to resolve, but noted that "not messing with open streams" refers to not messing with streams that involve streams that are *not related* to the connected/disconnected devices.

It is possible that `PaDevicesChangedCallback` could return additional information, for example: it could specify which APIs were affected, and whether it is a connection, disconnection, or unknown event. Adding this functionality only makes sense if we can reliably source this information -- until we have more implementation experience that's not clear. For now we have the lowest common denominator: "something changed".

(Sept. 19) On the mailing list we discussed the idea that the `PaDevicesChangedCallback` could have a parameter to indicate whether the notification involved a device list change, or a default device change. This could be done by adding a flags parameter to the callback, with values such as `{ paDeviceAdded, paDeviceRemoved, paDefaultDeviceChanged }`. This is only practical if such granularity can be implemented on all platforms. See the mailing list thread for further discussion:
https://lists.columbia.edu/pipermail/portaudio/2016-September/000761.html

There are two ways to generate an updated device list: (1) do a full rescan and then cross-correlate to the old device list to synchronise connectionIds, (2) only scan new devices, reuse device info records from previous scan (requires reference counting device records). Different host APIs may use different schemes, but scheme 2 (partial/minimal rescan) is preferred.

There is the option to add a Pa_RefreshHostApiDeviceList(hostApiIndex) to allow for refreshing the device list of a specific host api. We would like to avoid this as it adds complexity to the API with no obvious benefit.

(Sept. 19) Most platforms will eventually have multiple notification sources (e.g. udev and JACK on Linux, CoreAudio and JACK on OSX, system devices and WASAPI on Windows). The infrastructure code will need to be extended to support device notifications from multiple sources. The most likely structure is the following:

* A single per-platform hotplug file will manage the callback mutex and any other global initialization
* Multiple notification engine back-ends can be implemented in separate modules. 
* Notification engines can be initialized by the host APIs that need them during host API `Initialize()` and Terminated during host API `Terminate()`. Use reference counting to support notification engines initialized by multiple APIs.

We will refactor to this structure (or something else) when we first need to support multiple notification engines on a single platform. This will most likely happen when we add a WASAPI notification engine on Windows.

Open question: does the `PaDevicesChangedCallback` notification engine get started at `Pa_Initialize()/Pa_Terminate`? Or only when a callback is registered/unregistered? This will affect how hooks for initializing and terminating the notification engine work. Having it always initialized seems simpler and more robust, but also adds overhead even for clients who don't use it.(End Sept. 19)


### Nice to Haves

Do we want a way to poll for device changes in addition to the callback? (This wouldn’t be hard to implement with a couple of atomic counters. Doesn't critically affect developing the hotplug implementation so leave it out for now.)

Evan proposed having an API to map between device indexes and connection ids. Although this is possible, it could be implemented by the client as a simple search over device info structures (PA would probably implement it that way internally). This could be added later, and doesn’t seem worth adding until connection id API has been implemented/proven.

Items to Revisit Prior to Merge
-------------------------

Before merge, need to update pa_hostapi_skeleton.c to include any generic functionality for refresh etc.

Need to test that running streams behave correctly when device is connected/disconnected.

Streams should call stream finished callback if they fail due to device disconnection.

Maybe Pa_SetDevicesChangedCallback should be named differently, as it doesn't actually indicate that devices changed. It indicates that devices might need to be refreshed. It's also called when default devices change.


Rejected Options
-------------------------

### Rejected Alternatives to connectionId

* Monotonic device list (devices are added, but never removed)
* Just use device name to correlate devices (not unique enough for “5 duplicate headsets” use-case)
* Use PaDeviceInfo pointer to uniquely identify connection (probably not good if we allow for freeing device ptrs, i.e. suffers from ABA problem)


---

Related Features That Will Not Be Implemented As Part of HotPlug
-----------------------------------------------------------

This section provides context for what we are including in HotPlug.

### Add Persistent Device Identifiers to PaDeviceInfo
(“Persistent” here means across calls to `Pa_Initailize()`/`Pa_Terminate()`, across application invocations, and/or across reboots).

Possibly add two opaque string fields to `PaDeviceInfo`:

* `persistentDescriptor` (e.g. Maybe a GUID or combination of USB vendorId, productId and serial number. Fallback would be the device name string.)
* `connectionPath` (e.g. a string representing the path of the device from the root USB hub. Fallback would be an empty string)

When combined with the host API ID, the `persistentDescriptor`  and `connectionPath`  could be used to persistently identify audio devices, whether they were connected to the same hardware port, or a different port. This covers both the use-case of storing a reference to a device irrespective of how it is connected (just use `persistentDescriptor` to identify the device) or storing references to multiple identical devices that are connected to different ports (use a combination of `persistentDescriptor`, `connectionPath`). Although the fields may reference host-api neutral hardware identifiers, they should be treated as blobs and couldn’t necessarily be used to correlate hardware devices across multiple host APIs.

TODO: document uniqueness constraints (or not) on these values.

Although it is not proposed to implement this feature in the public API, similar mechanisms may be needed internally to ensure that session ids for existing devices are stable -- especially when multiple devices with the same name are present.

### Select Which Host APIs to Initialize, Allow Initializing/Terminating Specific host APIs While PA is Running.

The following ticket covers selecting which host API to initialize:
[#10](../issues/10)

There is now also a draft implementation in the *ticket-10-select-host-apis* branch.

Initializing/terminating host APIs while PA is active overlaps with hotplug in so far as it causes the global device list to change. It’s unclear whether there would be a big impact here. There might be some tweaks required for host APIs that share common underlying code (e.g. COM initialization.)


________________________________________________________________________________
Page HotPlug_SVN_Log.md
```

You can check out the code from the branch prior to any work, and then the latest:

svn checkout https://subversion.assembla.com/svn/portaudio/portaudio/branches/hotplug hotplug_initial
svn up -r1661

svn checkout https://subversion.assembla.com/svn/portaudio/portaudio/branches/hotplug hotplug

The git revision corresponding to the state of trunk at r1660 is 8d0c648b7d

Here's a log of changes:

C:\PortAudio\hotplug>svn log -r 1520:1968
------------------------------------------------------------------------
r1520 | bjornroche | 2010-07-10 00:08:38 +1000 (Sat, 10 Jul 2010) | 1 line

initial branch for david stuart's hot-plug patch sent to the mailing list on may 12, 2010.
------------------------------------------------------------------------
r1661 | rob_bielik | 2011-04-29 04:54:46 +1000 (Fri, 29 Apr 2011) | 1 line

/portaudio/trunk:1520-1660 merged into branch hotplug
------------------------------------------------------------------------
r1663 | rossb | 2011-05-01 23:21:43 +1000 (Sun, 01 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1663

merged initial two-stage-commit hot-plug patch from David Stuart, with ds implementation only, including: * include\portaudio.h: added note about available device list lifetime to Pa_Initialize() doc comment. added Pa_UpdateAvailableDeviceList() declaration and doc comment. * src\common\pa_front.c: added Pa_UpdateAvailableDeviceList implementation * src\common\pa_hostapi.h: added function pointers for ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos. * src\hostapi\dsound\pa_win_ds.c added ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos implementation. * src\hostapi\dsound\pa_win_wmme.c zeroed ScanDeviceInfos, CommitDeviceInfos, DisposeDeviceInfos ptrs. * added test\patest_update_available_device_list.c simple test case. See also ticket #11
------------------------------------------------------------------------
r1664 | rossb | 2011-05-02 02:10:58 +1000 (Mon, 02 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1664

refactored ds rescan code to use the same function for Initialization scanning and rescanning. this will be most clear if you diff against the trunk version of pa_win_ds.c see also ticket #11
------------------------------------------------------------------------
r1665 | rossb | 2011-05-02 02:13:40 +1000 (Mon, 02 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1665

removed #ifndef check for PA_USE_DS from pa_win_ds.c
------------------------------------------------------------------------
r1670 | rob_bielik | 2011-05-05 02:37:52 +1000 (Thu, 05 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1670

Added hotplug notification (Windows only)
------------------------------------------------------------------------
r1671 | rossb | 2011-05-05 06:04:24 +1000 (Thu, 05 May 2011) | 1 line
r1672 | rossb | 2011-05-05 06:11:30 +1000 (Thu, 05 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1671
https://app.assembla.com/spaces/portaudio/subversion/commits/1672

fixed ds scan code to skip devices that are removed during the scanning process. related scanning cleanups

1 line patch to previous commit: change 0 to NULL

------------------------------------------------------------------------
r1673 | rob_bielik | 2011-05-06 14:40:22 +1000 (Fri, 06 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1673

Added cache in win hot plug
------------------------------------------------------------------------
r1675 | rob_bielik | 2011-05-07 01:57:05 +1000 (Sat, 07 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1675

Populating cache at startup of hotplug (Windows)
------------------------------------------------------------------------
r1676 | rossb | 2011-05-07 02:19:01 +1000 (Sat, 07 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1676

added pragma to link setupapi.lib
------------------------------------------------------------------------
r1677 | rob_bielik | 2011-05-07 17:01:13 +1000 (Sat, 07 May 2011) | 1 line
https://app.assembla.com/spaces/portaudio/subversion/commits/1677

Fixed Unicode vs. MBS problem

* Use "W" unicode APIS
------------------------------------------------------------------------
```

________________________________________________________________________________
Page NextReleasePlan.md
# Planning for the Next Release

This page describes the changes that we are planning to include in the next release.

At the moment we have not scheduled the next release.

## Proposed Schedule

* Day, Month Date, deadline for new merge requests
* Day, Month Date, deadline for approval of merge requests.
   *  Anything that's still in review on Month Date will not be merged for the release. Then we take the RC snapshot.
   *  Freeze master branch. (Or make a release branch?)
   *  Run all tests release candidate.
* Day Month Date - Release 

## YES - include these

Hotplug feature. Ross says there are some internal changes and refactoring for HotPlug that could go in now without making any API changes.

[Portaudio PulseAudio HostAPI](https://app.assembla.com/spaces/portaudio/git/merge_requests/3719213) This is a very useful new feature. But it has not been tested much.


## MAYBE

(No more changes planned at this stage)

## NO - include in a future release

(No more changes planned at this stage)

## Already Merged

The release is made directly from master So any changes that are already merged into master will be included.

* Nothing so far

________________________________________________________________________________
Page pa_stable_v19_20111121.md
# pa_stable_v19_20111121 (November 21, 2011) Changelog

* Improvements to latency calculations: Improved defaults, allow very low buffer sizes, report actual latencies in PaStreamInfo (CoreAudio r1703 #95 #175, WMME r1717 #178, also changes to DirectSound and WMME)

* ALSA: Fixed issue define SND_PCM_TSTAMP_ENABLE as SND_PCM_TSTAMP_MMAP if the former is undefined #153 r1691

* AudioScience HPI: Updated support to V4.08.  #197, r1760, r1761

* CoreAudio bug fix: Fixed regression in r1612 that broke CoreAudio non-interleaved callback i/o

* Mac OS X: Fixes for build issues when only certain OSX SDK versions are installed #179

* CoreAudio: No longer ignores suggestedLatency parameter when computing host buffer sizes #182

* CoreAudio: Fix for clicks with big buffer sizes. see bug #187, r1706

* CoreAudio: Calculate timestamp offsets from device properties. Combine multiple user buffers in a host buffer to honor longer latency. #187 r1718

* WMME: Improved interpretation of suggestedLatency Pa_OpenStream parameter. see r1725, tickets #98 #99 #181

* WMME: Revised default latency on XP, Vista, Win7 to 90ms. Resolves ticket #80. Could go lower if we had more results from ticket #185

* DirectSound: Fixed bugs in PaDeviceInfo default latency and PaStreamInfo latency fields. Fixed host buffer size calculations based on suggestedLatency parameters. See #160, #122, #99 (correct interpretation of suggestedLatency down to zero).

* DirectSound: Switched to using high priority thread instead of MM timer. Old behavior available under PA_WIN_DS_USE_WMME_TIMER switch. See ticket #101 and r1683

* DirectSound: Fixes to PaStreamCallbackTimeInfo. implemented inputBufferAdcTime. Resolves ticket #121 r1174

* Windows/Mingw: Fixed some issues with ./configure script and Makefile. See revs: r1767, r1772, r1781

* Windows/Mingw: Fixes to build with ASIO support using Mingw toolchain. See rev: r1773

* Windows: Harmonized COM initialization and fixed COM uninitialisation bugs during error handling. See ticket #128. 

* ASIO: Fixed bug where host buffer size wasn't matched to client framesPerBuffer when it should have been. Resolves ticket #93 r1175

* ASIO: PaAsio_GetAvailableLatencyValues deprecated, use PaAsio_GetAvailableBufferSizes. See ticket #111

* Changed default host API selection logic: use first successfully initialized host api with a defined default input or output device. Resolves ticket #49

* Added support for Float32 to UInt8 conversion. r1748

* Made ring buffer params const-correct r1694

* Changes to ring buffer memory barrier placement (needs further review). See r1734, r1735, r1736, r1738 for details.

* Separated test programs into "test", "examples", and "qa" folders. #191

* Harmonised use of #if with PA_USE_*HOSTAPI* configuration variables accross all host APIs r1740, #164

* Improvements to QA tests including paqa_latency, paqa loopback test

* Improvements and cleanups to doxygen documentation. Added Doxyfile.developer for generating internal docs.

________________________________________________________________________________
Page pa_stable_v190600_20161030.md
# pa_stable_v190600_20161030 (October 30, 2016) Changelog

See below for the full list of changes.


## API/ABI Changes in This Release

### Changes to portaudio.h

There were no changes to existing `portaudio.h` API/ABI in this release. The API was extended as follows:

Prior to March 3, 2015, `Pa_GetVersion()` always returned 1899 in the `V19` version of PortAudio. 

On March 3, 2015, enhanced version retrieval APIs were added to `portaudio.h`:

* `Pa_GetVersion()` now returns a useful number, e.g. 0x00130501 for 19.5.1
* added `paMakeVersionNumber` macro for comparing to `int` version returned by `Pa_GetVersion()`
* added `PaVersionInfo` struct with version major, minor, subminor, versionControlRevision, versionText
* added `Pa_GetVersionInfo()` gets `PaVersionInfo` struct
* `Pa_GetVersionText()` is deprecated; use `Pa_GetVersionInfo()->versionText`

On March 3, 2015, the version number was set to 19.5.0. (5 was chosen to reflect that there were 4 prior V19 stable snapshots.)

This new release has version number 19.6.0.

The Host-API-specific structures for WDM/KS and WASAPI were altered in this release. This is an ABI change. Client code depending on these particular host-API-specific APIs will need to be recompiled and linked against a compatible PortAudio version. See below.

### Changes to WDM/KS Host-API-specific Struct in pa_win_wdmks.h

* Added `flags` and `channelMask` fields to `PaWinWDMKSInfo`. [4aa340a57e](4aa340a57e98e1bfd7f3ab1449226de76ed8f9aa)

These changes were made on April 9, 2014. At that time `Pa_GetVersion()` returned 1899. The changes are present when the version number is 19.5.0 or greater.

Forward/backward compatibility: The implementation checks the `size` field of `PaWinWDMKSInfo`. The old version will reject new structs, and the new version will reject old structs. In both cases `paIncompatibleHostApiSpecificStreamInfo` is the error returned.


### Changes to WASAPI Host-API-specific Struct pa_win_wasapi.h

* Added `streamCategory` and `streamOption` to `PaWasapiStreamInfo` [4e194eaecf](4e194eaecfab9c5ca01a90602e5ddd3baf1f4e5c)

These changes were made on October 19, 2015. At that time `Pa_GetVersion()` returned 19.5.0. The changes are present when the version number is 19.6.0 or greater.

Forward/backward compatibility: The implementation checks the `size` field of `PaWasapiStreamInfo`. The old version will reject new structs, and the new version will reject old structs. In both cases `paIncompatibleHostApiSpecificStreamInfo` is the error returned.


## Full List of Changes

Here's the full list of commits since the last stable snapshot:

[master:HEAD vs pa_stable_v19_20140130_r1919](https://app.assembla.com/spaces/portaudio/git/compare/portaudio:master%2e..portaudio:pa_stable_v19_20140130_r1919)

### All Platforms
* Add new version number API (see above)
* Updated version number to 19.6.0 (due to extension added to WASAPI host-API specific)
* pa_process: Fix output channel adaption by not skipping the conversion when the host and user number-of-channels are not equal. Reported by Leif Asbrink. [c0c0cb1414](c0c0cb1414bb75efe90b0a0d4cc2f855afe9d3d3)
* Fixed bug that would result in open streams not being closed when Pa_Terminate() is called (Thanks to Karl Wolfram). Ticket #260
* C++ binding: make operator == and != const. Thanks to Riot for patch. Ticket #230
* Moved repository to Git

### Documentation

* Various documentation improvements, including:
   *  Update docs for building on Linux
   *  Clarified safety of operations in callback
   *  Document API Version Availability (e.g. `Available as of 19.5.0`)  [MR 3881793](https://app.assembla.com/spaces/portaudio/git/merge_requests/3881793)

### Build Systems

* CMake support for Unix platforms (thanks to Nick Appleton)  [MR 3751483](https://app.assembla.com/spaces/portaudio/git/merge_requests/3751483)
* Fix PA_LIBRARY_DEPENDENCIES problem with CMake/WMME. [mailing list](https://lists.columbia.edu/pipermail/portaudio/2016-September/000861.html)

### Linux

* pa_linux_alsa: fix hang in callback caused by abort. Ticket #251

### Mac

* Update configure files for Mac OS X El Capitan, 10.11 SDK
* pa_mac_core_blocking: fix hang when running stream stopped (add timeout). Ticket #252 [MR 3829453](https://app.assembla.com/spaces/portaudio/git/merge_requests/3829453)
* pa_mac_core: Fix assert when reading or writing with non-power of 2 channels. Now Scarlett 6i6 works. Ticket #229
* pa_mac_core: stop stream instead of asserting (crashing) under certain conditions, e.g. when device is unplugged. Ticket #158
* pa_mac_core: fixed copy-pasto: last host error was being associated with paInDevelopment host api not paCoreAudio
* pa_mac_core: Fix for truncated device names e.g. 'Built-in Microph' from Olivier Tristan. [55adee0a90](55adee0a9062c432e8d40e638f12aae43380092a)

### Windows

* win: Removed Microsoft copyright include files from src/hostapi/wasapi/mingw-include (may affect MinGW builds) [MR 3848293](https://app.assembla.com/spaces/portaudio/git/merge_requests/3848293)
* win: Removed MSVC dependence on ksguid.lib from src/os/win/pa_win_wdmks_utils.c (ksguid.lib is no longer in Platform SDK 8.0, always use static instances of GUID.)
* win mingw: Issue #234 fixed typo in configure and configure.in affecting mingw builds.


### WASAPI

* pa_win_wasapi: ported to WinRT (UWP) platform, compatibility fixes to compile PortAudio as Windows Store library (only WASAPI hostapi is compatible with Windows Store APIs) [MR 3643753](https://assembla.com/code/portaudio/git/merge_requests/3643753) [MR 3772573](https://assembla.com/code/portaudio/git/merge_requests/3772573)
* pa_win_wasapi: use InterlockedXXX APIs to secure inter-thread r/w access to variables to avoid possible deadlocks or logic corruption
* pa_win_wasapi: workaround to avoid PaWasapi_Initialize() failure when enumerating devices and device fails to report min/default periods
* pa_win_wasapi: support for setting the WASAPI's AudioClientProperties options via PaWasapiStreamInfo

### WDM/KS

* pa_win_wdmks: Leland's patch for WDM-KS, should take care of some of the problems referenced here http://sites.music.columbia.edu/pipermail/portaudio/2014-August/016246.html [d7085cb226](d7085cb226fb8d2974e281b3ea25d89a401d85c3)
* pa_win_wdmks: Support for default device (see caveat for input devices though in ScanDeviceInfos).
* pa_win_wdmks: Added possibility to set channel mask.
* pa_win_wdmks: Fixed MinGW-w64 build: Inclusion of winioctl.h triggered multiple redefinition errors [MR 3915493](https://app.assembla.com/spaces/portaudio/git/merge_requests/3915493)

### WMME

* pa_win_wmme: avoid potential (but highly unlikely) overflow in buffer size in call to WideCharToMultiByte if a device name length exceeds INT_MAX.
* pa_win_wmme: correctly convert device names to UTF-8, see ticket #224. Thanks to Tobias Erichsen for the patch.


### DirectSound

* pa_win_ds: correctly output device names as UTF-8 when compiled with UNICODE defined. Note that this patch may not be correct if UNICODE is not defined.

________________________________________________________________________________
Page Platforms_Linux.md
# PortAudio on Linux

Documentation for PortAudio on Linux is at:

http://portaudio.com/docs/v19-doxydocs/compile_linux.html


Note that if you are cross compiling for another Linux platform then there may be an issue finding the Jack libraries.
The FindJACK module that comes with the PortAudio source tarball uses `pkg_search_module`, which sets `JACK_LIBRARIES` to just `jack`.
You may need to run cmake with the option `-DCMAKE_DISABLE_FIND_PACKAGE_PkgConfig=ON`, which disables pkgconfig.

________________________________________________________________________________
Page MigrationToGitHub.md
![portaudio_logo.png](http://www.portaudio.com/images/portaudio_logo.png)

# Plan for Migrating Repository, Tickets, Wiki to GitHub

## Resources and Links

* PortAudio Organization on GitHub https://github.com/PortAudio
* [Project Tracking for this Migration](https://github.com/orgs/PortAudio/projects/1)
* [Email thread from September 2019](https://lists.columbia.edu/pipermail/portaudio/2019-September/001918.html)
* [Email thread from July 2020](https://lists.columbia.edu/pipermail/portaudio/2020-July/002148.html)
* [Migrating from Assembla to GitHub](https://www.codeproject.com/Articles/5247083/Migrating-from-Assembla-to-Github-using-Automation)
* [SVein's Wiki Migration script](https://github.com/sveinse/assembla2github-portaudio)
* [Ross page of backups from Assembla](http://www.rossbencina.com/static/portaudio/assembla-backup-20200731/)

## Original High Level Plan by Ross Bencina from September 2019 email

1. Merge or discard open merge requests
1. Archive all repos and content currently on Assembla
1. Work out which new host to use [decided: GitHub]
1. Port the git repo
1. Port the wiki
1. Port/rehost open tickets to new platform, and/or host closed tickets somewhere in static form. For example, this could take the form of a re-skinned static screen-scrape hosted at portaudio.com.
1. Put Assembla site into some kind of reduced/stub state.

## How to Port Repository

GitHub provides a [GitHub Importer](https://docs.github.com/en/github/importing-your-projects-to-github/importing-source-code-to-github) that can also match and modify authors.

1. Visit https://github.com/portaudio
1. Click "Create a new repository"
1. Click"Import a repository"
1. Enter "https://github.com/PortAudio/portaudio.git" as the old clone URL
1. Enter a name="test-migration-1" and click "Begin Import"
1. Waited two minutes and got:  https://github.com/philburk/test-migration-1

The new repo has 12 release tags. The 35 branches were preserved so it would be easy to finish the pending merge requests. Compare these
* [diff on GitHub](https://github.com/philburk/test-migration-1/compare/unixmutex)
* [Merge Request on Assembla](https://app.assembla.com/spaces/portaudio/git/merge_requests/4022683?section=files)

Ownership for RossBencina, philburk, dmitrykos, dechamps, nickappleton were associated with GitHub accounts by matching emails. One commit from DaShun to add ASIO lib on April 16, 2018 was not matched.  Commits before April 10, 2016 have names but they are not matched. That is when we switched from SVN to Git. They probably cannot be matched but at least the original names are on the commits. There are no unmatched commits after April 10, 2016.

.h3 How to Map Old Names from SVN

This hack allows GitHub to match old names before 2016.  The email addresses from SVN are stored with a hash for the domain. Everyone has the same hash. For example:
* rbencina@0f58301d-fd10-0410-b4af-bbb618454e57
* philburk@0f58301d-fd10-0410-b4af-bbb618454e57

By adding that email address to your GitHub profile, GitHub will match those commits to your account.
The email address cannot be verified because it is not real. I don't know if that will cause problems.

OR, here are manual steps provided by Svein Seldal

```
git clone --mirror git@git.assembla.com:portaudio.git
cd portaudio.git
git remote add github git@github.com:${user}/${repo}.git
git push github --all
git push github --tags
```

Demo of this procedure at https://github.com/sveinse/sandbox4

## How to Port Wiki and Tickets

Use the version of assembla2github extended for PortAudio by Svein Seldal. Full instructions are here: [https://github.com/sveinse/assembla2github-portaudio#procedure|](https://github.com/sveinse/assembla2github-portaudio#procedure)


## Goals, Priorities and Requirements

Goals: 
* Lose as little data as possible.
* Automate as much as possible
* Do one or more draft migrations to test/verify
* No manual edits until after the final automated migration

### Git Import

Strong Desire: 
* transfer/translate user names on commits. use GitHub Importer to assign email/user names. Will need each committer’s GitHub user name [GitHub importer will map users with same email address automatically, otherwise: if commits have email addresses, github will match them later if user adds that email address to their account. If we have GitHub user names, can do matching during import. Phil is going to try to make a list of user names that we need based on a test import.]
    

### Project Commiters/Collaborators

* Committers/Collaborators [deal with manually after automated migration]

### Merge Requests

Phil and Ross have reviewed the open merge requests and merged the few that made sense to merge now. The rest of the merge requests will be left open and ported across manually once the GitHub migration is complete.

### Wiki

Minimum requirements:

* all wiki pages [current revision] migrated
* all images on wiki pages migrated

Extra:

* older page revisions


### Tickets

Minimum requirements:

* Ticket numbers: Retain ticket numbers -- needed because existing tickets and commit messages reference ticket numbers with # notation. See "Note" below about #223.
* Don’t need assembla ticket numbers in ticket name e.g. "[#123]" at start of name if we can get github ticket numbers to line up.
* Assignee
* Attachments
* Milestones [DONE?]
* Status {New, Open, Closed, etc.} [DONE?]
* Include commenter name in ticket comments somehow [e.g. next to date]
* Retain ticket fields {Priority, Component, Keywords, Tags}, ideally as labels: https://docs.github.com/en/github/managing-your-work-on-github/applying-labels-to-issues-and-pull-requests

Note: [August 8: seems to be an issue with git ticket numbers being out of sync with our ticket numbers e.g. https://github.com/illuusio/test_portaudio_export/issues/288 is Assembla ticket #289 -- got out of sync on/after number 223.
It may be because Ticket #223 is broken in Assembla, or it may be a list instead of a real ticket. So it gets skipped. Assembla Ticket #224 is then assigned index #223 GitHub.
We can probably fix this be putting in a dummy Ticket in the Ticket dump file. Compare these two links.

* [good ticket 222](https://app.assembla.com/spaces/portaudio/tickets/realtime_list?ticket=222)
* [bad ticket 223](https://app.assembla.com/spaces/portaudio/tickets/realtime_list?ticket=223)
* [good ticket 224](https://app.assembla.com/spaces/portaudio/tickets/realtime_list?ticket=224)

Important:
* Create tickets either with original user name or special "PortAudio GitHub Import" user that we create
* Event Dates [especially creation date/close date]

Nice to have:
* Remove first "[#123] -" from ticket name
* Fix milestone names e.g. "[#951063] - V19-M3" --> "V19-M3"
